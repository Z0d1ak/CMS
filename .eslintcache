[{"D:\\diploma\\CMS\\src\\index.tsx":"1","D:\\diploma\\CMS\\src\\reportWebVitals.ts":"2","D:\\diploma\\CMS\\src\\App.tsx":"3","D:\\diploma\\CMS\\src\\mediasources\\mediaSources.js":"4","D:\\diploma\\CMS\\src\\redactor\\editorJsRedactor.js":"5","D:\\diploma\\CMS\\src\\settings\\settings.tsx":"6","D:\\diploma\\CMS\\src\\profile\\profile.tsx":"7","D:\\diploma\\CMS\\src\\login\\login.tsx":"8","D:\\diploma\\CMS\\src\\base\\mainInterface\\mainPart\\mainPart.tsx":"9","D:\\diploma\\CMS\\src\\redactor\\articleEditor.js":"10","D:\\diploma\\CMS\\src\\redactor\\tools.js":"11","D:\\diploma\\CMS\\src\\const\\shared.js":"12","D:\\diploma\\CMS\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx":"13","D:\\diploma\\CMS\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx":"14","D:\\diploma\\CMS\\src\\base\\contentOptions\\company\\company.tsx":"15","D:\\diploma\\CMS\\src\\base\\contentOptions\\employee\\employee.tsx":"16","D:\\diploma\\CMS\\src\\base\\contentOptions\\article\\article.tsx":"17","D:\\diploma\\CMS\\src\\base\\contentOptions\\infographics\\infographics.tsx":"18","D:\\diploma\\CMS\\src\\base\\contentOptions\\role\\role.tsx":"19","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx":"20","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx":"21","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx":"22","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx":"23","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx":"24","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx":"25","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx":"26","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx":"27","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx":"28","D:\\diploma\\CMS\\src\\redactor\\redactor.tsx":"29","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx":"30","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx":"31","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx":"32"},{"size":545,"mtime":1616538762116,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":1616538761801,"results":"35","hashOfConfig":"34"},{"size":1432,"mtime":1621714890213,"results":"36","hashOfConfig":"34"},{"size":2918,"mtime":1621714891219,"results":"37","hashOfConfig":"34"},{"size":20491,"mtime":1622226954822,"results":"38","hashOfConfig":"34"},{"size":1900,"mtime":1621714799934,"results":"39","hashOfConfig":"34"},{"size":9649,"mtime":1622226023332,"results":"40","hashOfConfig":"34"},{"size":5759,"mtime":1621714891219,"results":"41","hashOfConfig":"34"},{"size":2596,"mtime":1621714799929,"results":"42","hashOfConfig":"34"},{"size":5470,"mtime":1621714862632,"results":"43","hashOfConfig":"34"},{"size":1228,"mtime":1622157280568,"results":"44","hashOfConfig":"34"},{"size":241,"mtime":1621714891218,"results":"45","hashOfConfig":"34"},{"size":1977,"mtime":1621714799928,"results":"46","hashOfConfig":"34"},{"size":4628,"mtime":1622162244074,"results":"47","hashOfConfig":"34"},{"size":13622,"mtime":1621714799920,"results":"48","hashOfConfig":"34"},{"size":15658,"mtime":1621714799926,"results":"49","hashOfConfig":"34"},{"size":15802,"mtime":1622224928843,"results":"50","hashOfConfig":"34"},{"size":273,"mtime":1621714799927,"results":"51","hashOfConfig":"34"},{"size":11512,"mtime":1621714799927,"results":"52","hashOfConfig":"34"},{"size":4936,"mtime":1621714799924,"results":"53","hashOfConfig":"34"},{"size":1572,"mtime":1621714799926,"results":"54","hashOfConfig":"34"},{"size":2411,"mtime":1621714799922,"results":"55","hashOfConfig":"34"},{"size":795,"mtime":1621714799920,"results":"56","hashOfConfig":"34"},{"size":26664,"mtime":1621714891317,"results":"57","hashOfConfig":"34"},{"size":2366,"mtime":1621714799925,"results":"58","hashOfConfig":"34"},{"size":3529,"mtime":1621714799926,"results":"59","hashOfConfig":"34"},{"size":1122,"mtime":1621714799925,"results":"60","hashOfConfig":"34"},{"size":2016,"mtime":1621714799921,"results":"61","hashOfConfig":"34"},{"size":33830,"mtime":1621714883785,"results":"62","hashOfConfig":"34"},{"size":14493,"mtime":1621714799921,"results":"63","hashOfConfig":"34"},{"size":5863,"mtime":1621714799924,"results":"64","hashOfConfig":"34"},{"size":4953,"mtime":1621714799923,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1r1nfyz",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"68"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"68"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"68"},"D:\\diploma\\CMS\\src\\index.tsx",[],["151","152"],"D:\\diploma\\CMS\\src\\reportWebVitals.ts",[],"D:\\diploma\\CMS\\src\\App.tsx",["153","154"],"import React from 'react';\nimport './App.css';\nimport { Login } from \"./login/login\";\nimport { Settings } from \"./settings/settings\";\nimport { Profile } from \"./profile/profile\";\nimport MainPart from \"./base/mainInterface/mainPart/mainPart\"\nimport { ArticleV, Redactor } from \"./redactor/redactor\";\nimport {\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { ArticlePreview, ArticlePreview2, EditorJSRedactor } from './redactor/editorJsRedactor';\nimport {MediaSources} from \"./mediasources/mediaSources.js\"\n\nexport class App extends React.Component<{}, {}> {\n\n\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/home/alltexts/:id\">\n          <MainPart></MainPart>\n        </Route>\n        <Route path=\"/home\">\n          <MainPart></MainPart>\n        </Route>\n        <Route path=\"/settings\">\n          <Settings></Settings>\n        </Route>\n        <Route path=\"/profile\">\n          <Profile></Profile>\n        </Route>\n        <Route path=\"/redactor/:id\" component={EditorJSRedactor} />\n        <Route path=\"/article/:id\" component={ArticlePreview} />\n\n        <Route path=\"/media\">\n          <MediaSources></MediaSources>\n        </Route>\n        <Route path=\"/:name\" component={ArticlePreview2} />\n        <Route path=\"/\">\n          <Redirect from='/' to='/login' />\n        </Route>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n\n","D:\\diploma\\CMS\\src\\mediasources\\mediaSources.js",["155","156","157","158","159","160","161","162"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Card, Checkbox, Col, Row, notification } from 'antd';\nimport axios from 'axios'\nimport { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nexport class MediaSources extends React.Component{\n\n    constructor(props){\n        super(props)\n    }\n\n\n    render(){\n        //return(<p>gfdgdfsgdfskgpkdfshkdpokhdgkhkspodgkpohkgpohk</p>)\n        return (<TelegrammMedia/>)\n    }\n}\n\nclass TelegrammMedia extends React.Component{\n    \n    constructor(props){\n        super(props)\n        this.tgBotNAmeChange = this.tgBotNAmeChange.bind(this)\n        this.thChanelNameChange = this.thChanelNameChange.bind(this)\n        this.save = this.save.bind(this)\n    }\n    state = {\n        tgBotNAme: \"\",\n        thChanelName: \"\",\n        modified: false,\n        loaded: false\n    }\n\n    tgBotNAmeChange(event){\n        console.log(event)\n        this.setState({\n            tgBotNAme: event.target.value,\n            modified: true\n        })\n    }\n\n    thChanelNameChange(event){\n        this.setState({\n            thChanelName: event.target.value,\n            modified: true\n        })\n    }\n\n    save(){\n        let val = {\n            botname: this.state.tgBotNAme,\n            chanelname: this.state.thChanelName\n        };\n\n        //axios.post(\"https://localhost:44329/api/publish/tg\",\n        axios.post(\"https://hse-cms.herokuapp.com/api/publish/tg\",\n        val,\n        {\n        headers: {\n            \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n        }})\n        .then(res => {\n            this.setState({\n                modified: false\n            })\n        })\n        .catch(err =>{\n            console.log(err);\n        })\n    }\n\n    componentDidMount(){\n        //axios.get(\"https://localhost:44329/api/publish/tg\",\n        axios.get(\"https://hse-cms.herokuapp.com/api/publish/tg\",\n        {\n        headers: {\n            \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n        }})\n        .then(res => {\n            console.log(res)\n            this.setState({\n                tgBotNAme: res.data.botName,\n                thChanelName: res.data.chanelName,\n                modified: false,\n                loaded: true\n            })\n        })\n        .catch(err =>{\n            console.log(err);\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <Card>\n                    <p>Токен бота</p>\n                    <Input value={this.state.tgBotNAme} onChange={this.tgBotNAmeChange}></Input>\n                    <p>Токен Чата</p>\n                    <Input value={this.state.thChanelName} onChange={this.thChanelNameChange}></Input>\n                    {this.state.modified && <Button onClick={this.save}>Сохранить</Button>}\n                </Card>\n            </div>\n        )\n    }\n}",["163","164"],"D:\\diploma\\CMS\\src\\redactor\\editorJsRedactor.js",["165","166","167","168","169","170","171","172"],"D:\\diploma\\CMS\\src\\settings\\settings.tsx",[],"D:\\diploma\\CMS\\src\\profile\\profile.tsx",["173","174","175"],"D:\\diploma\\CMS\\src\\login\\login.tsx",["176","177"],"import React from 'react';\nimport './login.css';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Checkbox, Col, Row, notification } from 'antd';\nimport axios from 'axios'\nimport { paths,/*components,operations*/ } from \"../swaggerCode/swaggerCode\"\nimport { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { getUser, setUser} from \"../const/shared\"\n\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nconst pathBase: string = \"https://hse-cms.herokuapp.com\";\n\ntype authenticationData = paths[\"/api/Auth/login\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"];\n\ntype field =\n    {\n        name: string[];\n        value: string,\n    };\n\nexport class Login extends React.Component<{}, { fields: field[] }> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            fields: [\n                {\n                    name: ['username'],\n                    value: 'admin@admin.com',\n                },\n                {\n                    name: ['password'],\n                    value: 'Master1234',\n                }\n            ]\n        };\n    }\n\n\n    setFields(newFields: any) {\n        this.setState({ fields: newFields });\n    }\n\n    render() {\n\n        return (\n            <LoginForm fields={this.state.fields} onChangeFields={(newFields: field[]) => { this.setFields(newFields); }} />\n        );\n    }\n}\n\n\n\n\n\n\nconst LoginForm = (props: { fields: field[], onChangeFields: (newFields: any) => void }) => {\n\n\n    const [loadings, setLoadings] = useState(false);\n    const history = useHistory();\n\n    const onFinish = () => {\n\n        let auth: authenticationData = { email: props.fields[0].value, password: props.fields[1].value }\n        axios.post(pathBase + \"/api/Auth/login\", auth)\n            .then(res => {\n                console.log(res);\n                sessionStorage.setItem('AuthUserId', res.data.user.id);\n                sessionStorage.setItem('AuthUserSecurityToken', res.data.securityToken);\n                setUser(res.data.user)\n                console.log(JSON.stringify(getUser()))\n                history.push(\"/home/inwork\");\n            })\n            .catch(err => {\n                console.log(err)\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n                setLoadings(false);\n            })\n\n    };\n\n    const onFinishFailed = () => {\n        console.log('Failed:', \"1\");\n    };\n\n    const enterLoading = (index: any) => {\n\n    };\n\n\n    return (\n        <div className=\"loginForm\">\n\n            <Row>\n                <Col span={7}></Col>\n                <Col span={8}>\n                    <Form {...layout}\n                        name=\"authentication\"\n                        initialValues={{\n                            remember: true,\n                        }}\n                        onFinish={onFinish}\n                        fields={props.fields}\n                        onFieldsChange={(_, allFields) => {\n                            props.onChangeFields(allFields);\n                        }}\n                        onFinishFailed={onFinishFailed}\n                    >\n                        <Form.Item\n                            label=\"Логин\"\n                            name=\"username\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'email',\n                                    message: 'Пожалуйста введите логин!',\n                                },\n                            ]}\n                        >\n                            <Input disabled={loadings}></Input>\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Пароль\"\n                            name=\"password\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Пожалуйста введите пароль!',\n                                },\n                            ]}\n                        >\n                            <Input.Password disabled={loadings}></Input.Password>\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                            <Checkbox>Запомнить меня</Checkbox>\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" loading={loadings} onClick={() => setLoadings(true)} className=\"buttonLogin\" htmlType=\"submit\">\n                                Войти\n                    </Button>\n                        </Form.Item>\n                    </Form>\n                </Col>\n                <Col span={9}></Col>\n            </Row>\n        </div>\n    );\n};\n\n\n\nexport default { Login };\n\n","D:\\diploma\\CMS\\src\\base\\mainInterface\\mainPart\\mainPart.tsx",[],"D:\\diploma\\CMS\\src\\redactor\\articleEditor.js",["178","179","180","181","182","183","184","185","186","187","188"],"import ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, Input, Button, AutoComplete, notification } from 'antd';\nimport EditorJs from \"react-editor-js\";\nimport axios from 'axios'\nimport { v4 as uuidv4 } from 'uuid';\nimport CheckList from '@editorjs/checklist';\nimport { getUser} from \"../const/shared\"\nimport 'antd/dist/antd.css';\nimport { EDITOR_JS_TOOLS } from './tools'\nconst { Option } = AutoComplete;\n\nexport class EditorCore extends React.Component{\n    constructor(props){\n        super(props);\n        this.elements = props.data;\n        if(!this.elements || this.elements == undefined){\n            this.elements = []\n        }\n        console.log(this.elements);\n        this.addFrame = this.addFrame.bind(this)\n        this.addText = this.addText.bind(this)\n        this.elementsDict = {};\n        this.moveDownById = this.moveDownById.bind(this)\n        this.moveUpById = this.moveUpById.bind(this)\n\n        this.state =\n        {\n            data: this.elements\n        }\n    }\n\n    async moveUpById(id){\n        let el = this.elements.find(x => x.id == id);\n        let ord = el.order;\n        if(ord === 0){\n            return;\n        }\n\n        let prevEl = this.elements.find(x => x.order = ord -1)\n\n        prevEl.order = ord;\n        el.order = ord - 1;\n        await this.elementsDict[el.id]();\n        await this.elementsDict[prevEl.id]();\n        this.setState({data: this.elements.slice()})\n    }\n\n    async moveDownById(id){\n        console.log(id)\n\n        console.log(this.elements)\n        let el = this.elements.find((x) => x.id === id);\n        console.log(el)\n\n        let ord = el.order;\n        if(ord === this.elements.length){\n            return;\n        }\n\n        let nextEl = this.elements.find((x) => x.order = ord + 1)\n        console.log(nextEl)\n\n        nextEl.order = ord;\n        el.order = ord + 1;\n        console.log(el)\n        console.log(nextEl)\n        console.log(this.elementsDict)\n        await this.elementsDict[el.id]();\n        await this.elementsDict[nextEl.id]();\n        this.setState({data: this.elements.slice()})\n    }\n\n    removeById(id){\n\n    }\n\n    render(){\n \n        return(\n            <div>\n                <Row>\n                    <Col span={24}>\n                        {console.log(this.state.data)}\n                        <div>\n                        {this.state.data.sort((l,r) => r.order - l.order).map(x => \n                                <div key={x.id}>\n                                    {x.type === \"text\" &&\n                                    <EditorJsElement \n                                        elDict={this.elementsDict}\n                                        element={x}\n                                        moveUpById={this.moveUpById}\n                                        moveDownById={this.moveDownById}\n                                        removeById={this.removeById}\n                                        />}\n                                    {x.type === \"Frame\" && <div></div>}\n                                </div>\n                            )}\n                        \n                            <Button onClick={this.addText}>Текст</Button>\n                            <Button onClick={this.addFrame}>Внешний контент</Button>\n                        </div>\n\n                    </Col>\n                    <Col span={1}>\n                        \n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n\n    addText(){\n        this.elements.push(\n            {\n                id: uuidv4(),\n                order: this.elements.length,\n                type: \"text\",\n                content: {}\n            }\n        )\n        console.log(\"Elements\")\n        console.log(this.elements)\n        this.setState({data: this.elements.slice()})\n\n    }\n\n    addFrame(){\n        \n        this.elements.push(\n            {\n                id: uuidv4(),\n                order: this.elements.length,\n                type: \"frame\",\n                content: \"\"\n            }\n        )\n        console.log(\"Elements\")\n        console.log(this.elements)\n        this.setState({data: this.elements.slice()})\n    }\n}\n\nclass EditorJsElement extends React.Component{\n    \n    constructor(props){\n        super(props)\n        this.props = props;\n        this.state = \n        {\n            content: this.props.element.content\n        }\n        this.moveUp = this.moveUp.bind(this);\n        this.moveDown = this.moveDown.bind(this);  \n        this.remove = this.remove.bind(this); \n        this.save = this.save.bind(this)\n        this.props.elDict[this.props.element.id] = this.save;\n    }\n\n    async save(){\n        this.props.element.content = await this.instance.save();\n    }\n\n    remove(){\n        this.props.removeById(this.props.element.id);\n    }\n\n    moveUp(){\n        this.props.moveUpById(this.props.element.id)\n    }\n\n    moveDown(){\n        this.props.moveDownById(this.props.element.id)\n    }\n\n    instance = null;\n\n    render(){\n        return(\n            <div >\n                {console.log(\"EditorJSREnder\")}\n                <EditorJs instanceRef={i => this.instance = i} data={this.state.data} tools={EDITOR_JS_TOOLS}/>\n                <Button onClick={this.moveUp}>Вверх</Button>\n                <Button onClick={this.moveDown}>Вниз</Button>\n                <Button onClick={this.remove}>Удалить</Button>\n            </div>\n        )\n    }\n}","D:\\diploma\\CMS\\src\\redactor\\tools.js",[],"D:\\diploma\\CMS\\src\\const\\shared.js",["189","190"],"import { resourceUsage } from \"process\";\n\nvar userScoped = null;\n\nexport function getUser(){\n    return JSON.parse(sessionStorage.getItem(\"User\"));\n}\n\nexport function setUser(user){\n    sessionStorage.setItem(\"User\", JSON.stringify(user));\n}","D:\\diploma\\CMS\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx",["191"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport './avatarMenu.css';\nimport { Menu } from 'antd';\nimport {\n    Link,\n    Route\n} from \"react-router-dom\";\nimport { Dropdown } from 'antd';\nimport { Avatar } from 'antd';\nimport {\n    UserOutlined\n} from '@ant-design/icons';\n\n/**\n * Интерфейс для построения меню.\n * @param text Текст-пояснение опции\n * @param link Ссылка в рамках React Router.\n */\ninterface menuOpt {\n    text: string;\n    link: string;\n}\n\n/**\n * Массив опций меню\n */\nconst avatarMenuContent: Array<menuOpt> = [\n    { text: \"Профиль\", link: \"/profile\" },\n    { text: \"Настройки\", link: \"/settings\" },\n    { text: \"Выход\", link: \"/login\" },\n];\n\n\n/**\n * Сбор всех ссылок для React-router, для родительского компонента\n */\nexport function getLinksAvatarMenu() {\n    return (\n        avatarMenuContent.map((r, i) => {\n            return (\n                <Route path={r.link} key={\"al\" + i}>\n\n                </Route>\n            )\n        })\n    );\n};\n\n\n/**\n * Генерирует компонент меню на основе масива\n */\nfunction generateMenu() {\n    return (\n        avatarMenuContent.map((r, i) => {\n            return (\n                <Menu.Item key={i + \"am\"}>\n                    <Link to={r.link}>{r.text}</Link>\n                </Menu.Item>\n            )\n        }\n        ));\n};\n\n\n/**\n * Компонент меню при значке аватара.\n */\nexport class AvatarMenu extends React.Component<{}, {}> {\n\n    render() {\n        return (\n\n            <Dropdown overlay={\n                <Menu>\n                    {generateMenu()}\n                </Menu>\n            } placement=\"bottomLeft\">\n                <Avatar className=\"userBox\" size={40} icon={<UserOutlined />} />\n            </Dropdown>\n        );\n    }\n}\n\nexport default { getLinksAvatarMenu, AvatarMenu };\n\n","D:\\diploma\\CMS\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx",["192","193","194","195","196"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport './leftMenu.css';\nimport { Layout, Menu } from 'antd';\nimport {\n    UsbOutlined,\n    SnippetsOutlined,\n    IdcardOutlined,\n    AreaChartOutlined,\n    BankOutlined,\n    FunctionOutlined\n} from '@ant-design/icons';\n\nimport {\n    Link,\n    Route\n} from \"react-router-dom\";\n\n\nimport Employees from \"../../contentOptions/employee/employee\"\nimport Company from \"../../contentOptions/company/company\"\nimport Article from \"../../contentOptions/article/article\"\nimport Infographic from \"../../contentOptions/infographics/infographics\"\nimport Task from \"../../contentOptions/task/task\"\nimport Role from '../../contentOptions/role/role';\nimport { getUser} from \"../../../const/shared\"\nimport {MediaSources} from \"../../../mediasources/mediaSources\"\n\n\n\n\n/**\n * Интерфейс для построения меню.\n * @param text Текст-пояснение к иконке\n * @param link Ссылка в рамках React Router.\n * @param icon Иконка.\n * @param component Генерируемый по нажатию компонент в поле Content в Layout.\n */\ninterface menuOpt {\n    text: string;\n    link: string;\n    icon: JSX.Element;\n    component: JSX.Element;\n}\n\n/**\n * Массив опций меню\n */\nconst leftMenuContent: Array<menuOpt> = [\n    //{ text: \"Статьи\", link: \"/home/inwork\", icon: <SnippetsOutlined />, component: < Article /> }\n    //{ text: \"Компании\", link: \"/home/company\", icon: <BankOutlined />, component: <Company /> },\n    //{ text: \"Роли\", link: \"/home/role\", icon: <FunctionOutlined />, component: <Role /> },\n    //{ text: \"Сотрудники\", link: \"/home/emplo\", icon: <IdcardOutlined />, component: <Employees /> },\n    //{ text: \"Инфографика\", link: \"/home/info\", icon: <AreaChartOutlined />, component: <Infographic /> }\n];\n\n\n/**\n * Сбор всех ссылок для React-router, для родительского компонента\n */\nexport function getLinksLeftMenu() {\n    return (\n        getMenuOpt().map((r, i) => {\n            return (\n                <Route path={r.link} key={\"ll\" + i} >\n                    {r.component}\n                </Route>\n            )\n        })\n    );\n};\n\nfunction getMenuOpt(){\n    let menu = [...leftMenuContent]\n    var user = getUser();\n    if(!user.roles.includes(\"SuperAdmin\")){\n        menu.push({ text: \"Статьи\", link: \"/home/inwork\", icon: <SnippetsOutlined />, component: < Article /> })\n    }\n\n    if(user.roles.includes(\"ChiefRedactor\")){\n        menu.push({ text: \"Сотрудники\", link: \"/home/emplo\", icon: <IdcardOutlined />, component: <Employees /> })\n        //menu.push({ text: \"Инфографика\", link: \"/home/info\", icon: <AreaChartOutlined />, component: <Infographic /> })\n    }\n    if(user.roles.includes(\"CompanyAdmin\")){\n        menu.push({ text: \"Сотрудники\", link: \"/home/emplo\", icon: <IdcardOutlined />, component: <Employees /> })\n        //menu.push({ text: \"Инфографика\", link: \"/home/info\", icon: <AreaChartOutlined />, component: <Infographic /> })\n        menu.push({ text: \"Роли\", link: \"/home/role\", icon: <FunctionOutlined />, component: <Role /> })\n        menu.push({ text: \"Платформы\", link: \"/home/media\", icon: <FunctionOutlined />, component: <MediaSources /> })        \n    }\n    if(user.roles.includes(\"SuperAdmin\")){\n        menu.push({ text: \"Компании\", link: \"/home/company\", icon: <BankOutlined />, component: <Company /> })\n        menu.push({ text: \"Сотрудники\", link: \"/home/emplo\", icon: <IdcardOutlined />, component: <Employees /> })\n    }\n    return menu\n}   \n/**\n * Генерирует компонент меню на основе масива\n */\nfunction generateMenu() {\n    return (<Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['2']}>\n        {getMenuOpt().map((r, i) => {\n            return (\n                <Menu.Item key={i + \"lm\"} icon={r.icon}>\n                    <Link to={r.link}>{r.text}</Link>\n                </Menu.Item>\n            )\n        })}\n    </Menu>);\n};\n\n/**\n * Компонент левого меню.\n * @param collapsed Состояние меню (расшиернное/суженное)\n */\nexport class LeftMenu extends React.Component<{ collapsed: boolean }, {}> {\n    render() {\n        return (\n            <Layout.Sider trigger={null} collapsible collapsed={this.props.collapsed}>\n                <div className=\"logo\" />\n                {generateMenu()}\n            </Layout.Sider>\n        );\n    }\n}\n\nexport default { getLinksLeftMenu, LeftMenu };\n\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\company\\company.tsx",["197","198"],"import React from 'react';\nimport './company.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport { notification } from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\ntype getCompanies = paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteCompany = paths[\"/api/Company/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateCompany = paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addCompany = paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Company extends React.Component<{}, {}> {\n\n\n\n    state = {\n        dataType: \"company\",\n        requestUrl: \"https://hse-cms.herokuapp.com\",\n        requestPath: \"/api/Company\",\n        NameStartsWith: \"\",\n\n        SortingColumn: \"Name\",\n        SortingColumnOptions: [\"Name\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions: [\"Ascending\", \"Descending\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy: \"All\",\n\n        optionName: [\"SearchBy\"],\n        optionList: [[\"Name\", \"All\"]],\n        text: [\"Искать по\"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n        ],\n        loading: false\n    }\n\n    isNull = (val: string): boolean => {\n        return val === \"\";\n    }\n\n    changeValue = (val: any, type: string, callback?: () => void) => {\n        if (callback !== undefined)\n            this.setState({ [type]: val }, callback)\n        else this.setState({ [type]: val })\n    }\n\n    delete = (val: string) => {\n        axios.delete(\n            this.state.requestUrl + this.state.requestPath + \"/\" + val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n                this.update();\n                notification.success({\n                    message: 'Удаление прошло успешно',\n                    description:\n                        'Компания с id:' + val + \" была удалена\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для удаления компании\"\n                        });\n                        break;\n                    }\n                    case 404: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Компания с id:\" + val + \" не найдена\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n    create = (val: addCompany) => {\n        axios.post(this.state.requestUrl + this.state.requestPath, val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                this.update();\n                notification.success({\n                    message: 'Создание прошло успешно',\n                    description:\n                        'Компания с id:' + val.company.id + \" была успешно создана\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для создания компании\"\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n    updateData = (val: updateCompany) => {\n        axios.put(this.state.requestUrl + this.state.requestPath, val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                notification.success({\n                    message: 'Данные успешно обновлены',\n                    description:\n                        'Данные сотрудника с id:' + val.id + \" были успешно обновлены\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    case 403: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                \"Недостаточно прав для изменения данных компании\",\n                        });\n                        break;\n                    }\n                    case 404: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                'Компания с id:' + val.id + \" не найдена\",\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n\n    }\n\n    update() {\n        this.setState({ loading: true });\n        let request: string = \"?\";\n        request += \"&PageLimit=\" + this.state.PageLimit;\n        request += \"&PageNumber=\" + this.state.PageNumber;\n        request += this.isNull(this.state.NameStartsWith) ? \"\" : \"&NameStartsWith=\" + this.state.NameStartsWith;\n        request += this.isNull(this.state.SortingColumn) ? \"\" : \"&SortingColumn=\" + this.state.SortingColumn;\n        request += this.isNull(this.state.SortDirection) ? \"\" : \"&SortDirection=\" + this.state.SortDirection;\n        request += this.isNull(this.state.QuickSearch) ? \"\" : \"&QuickSearch=\" + this.state.QuickSearch;\n        axios.get(\n            this.state.requestUrl + this.state.requestPath + request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n                this.setState({ count: res.data.count })\n                this.setState({ items: res.data.items })\n                this.setState({ loading: false });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    case 403: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                \"Недостаточно прав для получения данных\",\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n\n\n\n    setCountItems = (val: number) => {\n        this.setState({ count: val })\n    }\n\n    onPageChange = (page: number, pageSize?: number | undefined) => {\n        if (page === 0) {\n            this.setState({ PageNumber: 1 }, () => this.update());\n        }\n        else {\n            this.setState({ PageNumber: page }, () => this.update());\n        }\n    }\n\n    onMaxItemsChange = (current: number, size: number) => {\n        if (current === 0) {\n            this.setState({ PageLimit: size, PageNumber: 1 }, () => this.update());\n        }\n        else {\n            this.setState({ PageLimit: size, PageNumber: current }, () => this.update());\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <FilterEntity\n                    dataType={this.state.dataType}\n                    updateCallback={this.update}\n                    changeValueCallback={this.changeValue}\n                    SortDirection={this.state.SortDirection}\n                    SortDirectionOptions={this.state.SortDirectionOptions}\n                    SortingColumn={this.state.SortingColumn}\n                    SortingColumnOptions={this.state.SortingColumnOptions}\n                    option={[this.state.SearchBy]}\n                    optionName={this.state.optionName}\n                    optionList={this.state.optionList}\n                    text={this.state.text}\n                />\n                <AddEntity\n                    dataType={this.state.dataType}\n                    createCallback={this.create}\n                />\n                <DataEntity\n                    dataType={this.state.dataType}\n                    loading={this.state.loading}\n                    updateDataCallback={this.updateData}\n                    deleteCallback={this.delete}\n                    updateCallback={this.update}\n                    changeValueCallback={this.changeValue}\n                    items={this.state.items} />\n                <PaginationEntity\n                    countItems={this.state.count}\n                    onPageChange={this.onPageChange}\n                    onMaxItemsChange={this.onMaxItemsChange} />\n            </div>\n\n        );\n    }\n\n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Company;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\employee\\employee.tsx",["199","200"],"import React from 'react';\nimport './employee.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {notification } from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\ntype getUser = paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteUser = paths[\"/api/User/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateUser = paths[\"/api/User\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addUser = paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Company extends React.Component<{}, {}> {\n\n\n\n    state = {\n        dataType: \"employee\",\n        requestUrl: \"https://hse-cms.herokuapp.com\",\n        requestPath: \"/api/User\",\n        NameStartsWith: \"\",\n        EmailStartsWith: \"\",\n        FirstNameStartsWith: \"\",\n        LastNameStartsWith: \"\",\n\n        SortingColumn: \"FirstName\",\n        SortingColumnOptions: [\"FirstName\", \"LastName\", \"Email\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions: [\"Ascending\", \"Descending\"],\n\n        Roles: \"All\",\n        RolesOptions: [\"SuperAdmin\", \"CompanyAdmin\", \"ChiefRedactor\", \"Redactor\", \"Author\", \"Corrector\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy: \"All\",\n\n        optionName: [\"SearchBy\", \"Roles\"],\n        optionList: [[\"FirstName\", \"LastName\", \"Email\", \"All\"], [\"SuperAdmin\", \"CompanyAdmin\", \"ChiefRedactor\", \"Redactor\", \"Author\", \"Corrector\", \"All\"]],\n        text: [\"Искать по\", \"Входит в \"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"1\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"2\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"3\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n        ],\n        loading: false\n    }\n\n\n\n\n    isNull = (val: string): boolean => {\n        return val === \"\" || val === \"All\" || val === null;\n    }\n\n    changeValue = (val: any, type: string, callback?: () => void) => {\n        if (callback !== undefined)\n            this.setState({ [type]: val }, callback)\n        else this.setState({ [type]: val })\n    }\n\n    delete = (val: string) => {\n        axios.delete(\n            this.state.requestUrl + this.state.requestPath + \"/\" + val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n                this.update();\n                notification.success({\n                    message: 'Удаление прошло успешно',\n                    description:\n                        'Сотрудник с id:' + val + \" был удален\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для удаления сотрудника\"\n                        });\n                        break;\n                    }\n                    case 404: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Пользователь с id:\" + val + \" не найден\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n    create = (val: addUser) => {\n        axios.post(this.state.requestUrl + this.state.requestPath, val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n\n                this.update();\n                notification.success({\n                    message: 'Создание прошло успешно',\n                    description:\n                        'Сотрудник с id:' + val.id + \" был успешно создан\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для создания сотрудника\"\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n    updateData = (val: updateUser) => {\n\n        if (!val.password) {\n            val.password = null;\n        }\n        else if (val.password.length < 8) {\n            notification.error({\n                message: \"Пароль слишком короткий\",\n                description: \"Длина пароля должны быть не менее 8 символов.\"\n            });\n            return;\n        }\n\n        axios.put(this.state.requestUrl + this.state.requestPath, val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                notification.success({\n                    message: 'Данные успешно обновлены',\n                    description:\n                        'Данные сотрудника с id:' + val.id + \" были успешно обновлены\",\n                });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    case 403: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                \"Недостаточно прав для изменения данных сотрудника\",\n                        });\n                        break;\n                    }\n                    case 404: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                'Сотрудника с id:' + val.id + \" не найден\",\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n\n    }\n\n\n    update() {\n        this.setState({ loading: true });\n        let request: string = \"?\";\n        request += \"&PageLimit=\" + this.state.PageLimit;\n        request += \"&PageNumber=\" + this.state.PageNumber;\n        request += this.isNull(this.state.NameStartsWith) ? \"\" : \"&EmailStartsWith=\" + this.state.NameStartsWith;\n        request += this.isNull(this.state.NameStartsWith) ? \"\" : \"&LastNameStartsWith=\" + this.state.NameStartsWith;\n        request += this.isNull(this.state.NameStartsWith) ? \"\" : \"&FirstNameStartsWith=\" + this.state.NameStartsWith;\n        request += this.isNull(this.state.SortingColumn) ? \"\" : \"&SortingColumn=\" + this.state.SortingColumn;\n        request += this.isNull(this.state.SortDirection) ? \"\" : \"&SortDirection=\" + this.state.SortDirection;\n        request += this.isNull(this.state.QuickSearch) ? \"\" : \"&QuickSearch=\" + this.state.QuickSearch;\n        request += this.isNull(this.state.Roles) ? \"\" : \"&Role=\" + this.state.Roles;\n        axios.get(\n            this.state.requestUrl + this.state.requestPath + request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n\n                this.setState({ count: res.data.count })\n                this.setState({ items: res.data.items })\n                this.setState({ loading: false });\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    case 403: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                \"Недостаточно прав для получения данных\",\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n\n\n\n    setCountItems = (val: number) => {\n        this.setState({ count: val })\n    }\n\n    onPageChange = (page: number, pageSize?: number | undefined) => {\n        if (page === 0) {\n            this.setState({ PageNumber: 1 }, () => this.update());\n        }\n        else {\n            this.setState({ PageNumber: page }, () => this.update());\n        }\n    }\n\n    onMaxItemsChange = (current: number, size: number) => {\n\n        if (current === 0) {\n \n            this.setState({ PageLimit: size, PageNumber: 1 }, () => this.update());\n        }\n        else {\n    \n            this.setState({ PageLimit: size, PageNumber: current }, () => this.update());\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <FilterEntity\n                    dataType={this.state.dataType}\n                    updateCallback={this.update}\n                    changeValueCallback={this.changeValue}\n                    SortDirection={this.state.SortDirection}\n                    SortDirectionOptions={this.state.SortDirectionOptions}\n                    SortingColumn={this.state.SortingColumn}\n                    SortingColumnOptions={this.state.SortingColumnOptions}\n                    option={[this.state.SearchBy, this.state.Roles]}\n                    optionName={this.state.optionName}\n                    optionList={this.state.optionList}\n                    text={this.state.text}\n                />\n                <AddEntity\n                    createCallback={this.create}\n                    dataType={this.state.dataType}\n                />\n                <DataEntity\n                    dataType={this.state.dataType}\n                    loading={this.state.loading}\n                    updateDataCallback={this.updateData}\n                    deleteCallback={this.delete}\n                    updateCallback={this.update}\n                    changeValueCallback={this.changeValue}\n                    items={this.state.items} />\n                <PaginationEntity\n                    countItems={this.state.count}\n                    onPageChange={this.onPageChange}\n                    onMaxItemsChange={this.onMaxItemsChange} />\n            </div>\n\n        );\n    }\n\n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Company;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\article\\article.tsx",["201","202"],"D:\\diploma\\CMS\\src\\base\\contentOptions\\infographics\\infographics.tsx",[],"D:\\diploma\\CMS\\src\\base\\contentOptions\\role\\role.tsx",[],"D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx",[],"D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx",[],"D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx",["203"],"import React from 'react';\nimport './dataEntity.css';\nimport 'antd/dist/antd.css';\nimport { Row, Col } from 'antd';\nimport { DataCard } from \"../dataSubEntities/dataCard/dataCard\";\nimport { paths } from '../../../../swaggerCode/swaggerCode';\nimport { Empty } from 'antd';\ntype updateCompany = paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class DataEntity extends React.Component<{\n    items: any[],\n    loading: boolean,\n    dataType: string,\n    updateCallback: () => void,\n    changeValueCallback: (val: any, type: string, callback: any) => void,\n    updateDataCallback: (val: any) => void,\n    deleteCallback: (val: string) => void\n}, {}> {\n\n    updateItem = (position: number, item: any) => {\n        let buf = this.props.items;\n        buf[position] = item;\n        this.props.changeValueCallback(buf, \"items\", this.props.updateDataCallback(item))\n    }\n\n    deleteItem = (position: number) => {\n        let buf = this.props.items;\n        let objId: string = buf[position].id\n        buf.splice(position, 1);\n        this.props.changeValueCallback(buf, \"items\", this.props.deleteCallback(objId))\n    }\n\n    render() {\n\n        return (\n            <div>\n\n\n                {\n                    this.props.items.length !== 0 ?\n                        this.props.items.map((d, i) => {\n                            return (\n                                <Row key={\"Row\" + i}>\n                                    <Col span={1}></Col>\n                                    <Col span={22}>\n                                        <DataCard\n                                            deleteItemCallback={this.deleteItem}\n                                            updateItemCallback={this.updateItem}\n                                            position={i}\n                                            data={d}\n                                            key={\"DC\" + i}\n                                            loading={this.props.loading}\n                                            dataType={this.props.dataType}\n\n                                        />\n                                    </Col>\n                                    <Col span={1}></Col>\n                                </Row>\n                            )\n                        })\n                        : <Empty />\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default DataEntity;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx",["204"],"import React from 'react';\nimport './addEntity.css';\nimport 'antd/dist/antd.css';\nimport { Row, Col } from 'antd';\nimport { AddBox } from \"../addSubEntities/addBox/addBox\"\nimport { paths } from '../../../../swaggerCode/swaggerCode';\n\ntype addCompany = paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class AddEntity extends React.Component<{\n    dataType: string,\n    createCallback: (val: any) => void,\n}, {}> {\n\n\n    render() {\n        return (\n            <Row>\n                <Col span={1}></Col>\n                <Col span={22}>\n                    <AddBox createCallback={this.props.createCallback} dataType={this.props.dataType} />\n                </Col>\n                <Col span={1}></Col>\n            </Row>\n        );\n    }\n\n}\n\nexport default AddEntity;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx",["205","206","207","208","209","210","211","212","213","214","215","216","217","218"],"import React from 'react';\nimport './dataCard.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport { Skeleton, Button, Input, Typography, Row, Col, Card, Divider, Popconfirm, Avatar } from 'antd';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined,\n    EllipsisOutlined,\n    SettingOutlined,\n    DeleteOutlined\n\n} from '@ant-design/icons';\nimport { DataRow, DataRowEditable, DataRowList } from \"../dataRow/dataRow\";\nimport axios from 'axios'\nimport { notification } from 'antd';\nimport { Steps } from 'antd';\nimport { MultiplyPicker } from \"../multiplyPicker/multiplyPicker\";\n\nimport { Redactor, ArticleV } from \"../../../../../redactor/redactor\"\nimport {\n    Route,\n    Redirect,\n    Link\n} from \"react-router-dom\";\n\n\nconst { Step } = Steps;\nconst { Search } = Input;\nconst { Paragraph } = Typography;\nconst { Meta } = Card;\nconst { Title, Text } = Typography;\n\n\ntype company = paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype article = paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\ntype role = paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype task = paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\ntype emploe = paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype t = paths[\"/api/Task/take\"][\"post\"][\"parameters\"]\n\nexport class DataCard extends React.Component<{\n    deleteItemCallback: (position: number) => void,\n    updateItemCallback: (position: number, item: any) => void,\n    position: number,\n    data: any,\n    dataType: string,\n    loading: boolean\n}, {}> {\n\n    /*\n            constructor(props:{deleteItemCallback:(position: number)=>void,\n                updateItemCallback:(position: number,item:any)=>void,\n                position:number,\n                data: any,\n                dataType:string,\n                loading:boolean}) \n              {\n                super(props);\n                this.state = {status:'narrow',bufData:this.props.data};\n              }*/\n\n    state = {\n        status: 'narrow',\n        bufData: this.props.data\n    };\n\n\n\n\n    updateDataFieldCallBack = (val: string, param: string) => {\n        let buf = this.state.bufData;\n\n        switch (param) {\n\n            case \"id\":\n                buf.id = val;\n                this.setState({ bufData: buf });\n                break;\n            case \"name\":\n                buf.name = val;\n                this.setState({ bufData: buf });\n                break;\n            case \"roles\":\n                buf.roles = val;\n                this.setState({ bufData: buf });\n                break;\n            case \"firstName\":\n                buf.firstName = val;\n                this.setState({ bufData: buf });\n                break;\n            case \"lastName\":\n                buf.lastName = val;\n                this.setState({ bufData: buf });\n                break;\n            case \"email\":\n                buf.email = val;\n                this.setState({ bufData: buf });\n                break;\n\n        }\n    };\n\n    updateListCallBack = (val: string) => {\n        let buf = this.state.bufData;\n        buf.roles = val;\n        this.setState({ bufData: buf });\n    };\n\n    expandCardChange = () => {\n        if (this.state.status === 'narrow')\n            this.setState({ status: 'expand' });\n        else\n            this.setState({ status: 'narrow' });\n    };\n\n    makeEditableCardChange = () => {\n        if (this.state.status === 'expand')\n            this.setState({ status: 'editable' });\n        else {\n            this.setState({ status: 'expand' });\n        }\n    };\n\n    deleteCard = () => {\n        this.props.deleteItemCallback(this.props.position);\n    };\n\n    updateCard = () => {\n        this.props.updateItemCallback(this.props.position, this.state.bufData);\n    };\n\n    isNull = (val: string): boolean => {\n        return val === \"\" || val === null;\n    }\n\n    Header = (): JSX.Element => {\n\n        switch (this.props.dataType) {\n            case \"article\": {\n                return (\n                    <Skeleton title={{ width: \"30%\" }} active loading={this.props.loading} paragraph={{ rows: 1, width: \"50%\" }}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.title}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            case \"employee\": {\n                return (\n                    <Skeleton title={{ width: \"30%\" }} active loading={this.props.loading} paragraph={{ rows: 1, width: \"50%\" }}>\n                        <Meta\n                            avatar={<Avatar size={50} src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n                            title={<div className=\"titleCard\">{this.props.data.firstName}  {this.isNull(this.props.data.lastName) ? \"\" : this.props.data.lastName}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            case \"role\": {\n                return (\n                    <Skeleton title={{ width: \"30%\" }} active loading={this.props.loading} paragraph={{ rows: 1, width: \"50%\" }}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            case \"company\": {\n                return (\n                    <Skeleton title={{ width: \"30%\" }} active loading={this.props.loading} paragraph={{ rows: 1, width: \"50%\" }}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            case \"task\": {\n                return (\n                    <Skeleton title={{ width: \"30%\" }} active loading={this.props.loading} paragraph={{ rows: 1, width: \"50%\" }}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.description}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            default: {\n                return (\n                    <div>No such type</div>\n                )\n            }\n        }\n    }\n\n    openArticle = (id: string) => {\n\n        return <Redirect from='/home/inwork' to='/article/:id/' />\n        return <Route path=\"/article/:id/\" component={ArticleV} />\n    }\n\n    editArticle = (id: string) => {\n\n        return <Redirect from='/home/inwork' to='/redactor/:id/' />\n        return <Route path=\"/redactor/:id/\" component={Redactor} />\n\n    }\n\n\n    DataRows = (): JSX.Element[] => {\n        switch (this.props.dataType) {\n            case \"article\": {\n                return (\n                    [\n                        <Divider />,\n                        <Paragraph strong>Инициатор статьи</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.initiator.firstName} titleStr=\"Имя : \" />\n                        </Skeleton>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.initiator.lastName} titleStr=\"Фамилия : \" />\n                        </Skeleton>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.initiator.email} titleStr=\"Email : \" />\n                        </Skeleton>,\n                        <Divider />,\n                        <Paragraph strong>Статус статьи</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.creationDate} titleStr=\"Cоздано : \" />\n                        </Skeleton>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <Row>\n                                <Col span={2}></Col>\n                                <Col span={20}>\n                                    <Steps direction=\"horizontal\" current={2}>\n                                        {\n                                            () => {\n                                                if (this.props.data.tasks !== null) {\n                                                    this.props.data.task.map((d: any, i: number) => {\n                                                        return (\n                                                            <Step key={i + \"tk\"} title={d.description} description={d.comment} />\n                                                        )\n                                                    })\n                                                }\n                                                else {\n                                                    return \"null\"\n\n                                                }\n                                            }}\n                                    </Steps>\n                                </Col>\n                            </Row>\n                        </Skeleton>\n                    ]\n                )\n            }\n            case \"employee\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 3 }}>\n                            <DataRow dataStr={this.props.data.firstName} titleStr=\"Имя : \" />\n                            {this.isNull(this.props.data.lastName) ? \"\" : <DataRow dataStr={this.props.data.lastName} titleStr=\"Фамилия : \" />}\n                            <DataRow dataStr={this.props.data.email} titleStr=\"Почта : \" />\n                        </Skeleton>,\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRowList dataList={this.props.data.roles} titleStr=\"Роли : \" />\n                        </Skeleton>\n\n                    ]\n                )\n            }\n            case \"role\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.name} titleStr=\"Название : \" />\n                        </Skeleton>,\n                        <Divider />,\n                    ]\n                );\n            }\n            case \"company\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRow dataStr={this.props.data.name} titleStr=\"Название : \" />\n                        </Skeleton>,\n                        <Divider />,\n                    ]\n                );\n            }\n            case \"task\": {\n                return (\n                    [\n                        <Divider />,\n                        <Paragraph strong>Задание</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 3 }}>\n                            <DataRow dataStr={this.props.data.description} titleStr=\"Формулировка : \" />\n                            <DataRow dataStr={this.props.data.creationDate} titleStr=\"Дата создания : \" />\n                            <DataRow dataStr={this.props.data.assignmentDate} titleStr=\"Дата поручения : \" />\n                        </Skeleton>,\n                        <Divider />,\n                        <Paragraph strong>Инициатор</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 3 }}>\n                            <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                                <DataRow dataStr={this.props.data.author.firstName} titleStr=\"Имя : \" />\n                            </Skeleton>\n                            <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                                <DataRow dataStr={this.props.data.author.lastName} titleStr=\"Фамилия : \" />\n                            </Skeleton>\n                            <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                                <DataRow dataStr={this.props.data.author.email} titleStr=\"Email : \" />\n                            </Skeleton>\n                        </Skeleton>,\n                        <Divider />,\n                    ]\n                );\n            }\n            default: {\n                return (\n                    [<div>No such type</div>]\n                )\n            }\n        }\n    }\n\n\n    /*\n{\n                \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                \"type\": 0,\n                \"performer\": {\n                  \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                  \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                  \"email\": \"user@example.com\",\n                  \"firstName\": \"string\",\n                  \"lastName\": \"string\",\n                  \"roles\": [\n                    \"SuperAdmin\"\n                  ]\n                },\n                \"author\": {\n                  \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                  \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                  \"email\": \"user@example.com\",\n                  \"firstName\": \"string\",\n                  \"lastName\": \"string\",\n                  \"roles\": [\n                    \"SuperAdmin\"\n                  ]\n                },\n                \"creationDate\": \"2021-03-11T22:18:00.743Z\",\n                \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\n                \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\n                \"description\": \"string\",\n                \"comment\": \"string\"\n              },\n    */\n    DataRowsEditable = (): JSX.Element[] => {\n        switch (this.props.dataType) {\n            case \"article\": {\n                return (\n                    [\n\n                        <Divider />,\n                        <Paragraph strong>Задачи</Paragraph>,\n                        <div>\n                            {this.props.data.task !== null\n                                ? [this.props.data.task].map((d: any, i: number) => {\n                                    return (\n                                        <Row>\n                                            <Col key={i + \"tk\"}>{d.description}</Col>\n                                            <Col key={i + \"tk\"}>{d.comment}</Col></Row>\n                                    )\n                                })\n                                : <>Отсутствует</>\n                            }\n\n                        </div>,\n                        <Divider />,\n                        <Paragraph strong>Предпросмотр</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <Link to={'/article/' + this.props.data.id}>\n                                <Button className=\"butttonart\" onClick={() => this.openArticle(this.props.data.id)}>Открыть статью</Button>\n                            </Link>\n                        </Skeleton>,\n                        <Paragraph strong>Редактор</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <Link to={'/redactor/' + this.props.data.id}>\n                                <Button className=\"butttonart\" onClick={() => this.editArticle(this.props.data.id)}>\n                                    Открыть редактор\n                                    </Button>\n                            </Link>\n\n\n                        </Skeleton>\n\n\n\n                     \n                    ]\n                )\n            }\n            case \"employee\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 3 }}>\n                            <DataRowEditable dataStr={this.state.bufData.firstName} titleStr=\"Имя : \" typeName=\"firstName\" editFieldCallback={this.updateDataFieldCallBack} />\n                            <DataRowEditable dataStr={this.state.bufData.lastName || \"Нет данных\"} titleStr=\"Фамилия : \" typeName=\"lastName\" editFieldCallback={this.updateDataFieldCallBack} />\n                            <DataRowEditable dataStr={this.state.bufData.email} titleStr=\"Почта : \" typeName=\"email\" editFieldCallback={this.updateDataFieldCallBack} />\n                            {/* {\n                                (this.props.data.roles.includes(\"CompanyAdmin\") || this.props.data.id === sessionStorage.getItem(\"AuthUserId\"))\n                                && <DataRowEditable dataStr={this.state.bufData.password} titleStr=\"Новый пароль : \" typeName='password' editFieldCallback={this.updateDataFieldCallBack} />\n                            } */}\n                        </Skeleton>,\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n\n                            <Row className=\"DataRow\">\n                                <Col span={3} className='title'><Paragraph className='DataRowTitle'>{\"Роли: \"}</Paragraph></Col>\n                                <Col span={4}  className=\"DataRowList\">\n\n                                    <MultiplyPicker dataList={this.state.bufData.roles} typeName=\"roles\" updListCallback={this.updateListCallBack} />\n\n                                </Col>\n                            </Row>\n                        </Skeleton>\n\n\n                    ]\n                );\n            }\n            case \"role\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack} />\n                        </Skeleton>,\n                        <Divider />,\n                    ]\n\n                );\n            }\n            case \"company\": {\n                return (\n                    [\n                        <Divider />,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                            <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack} />\n                        </Skeleton>,\n                        <Divider />,\n                    ]\n                );\n            }\n            case \"task\": {\n                return (\n                    [\n                        <Divider />,\n                        <Paragraph strong>Управление заданием</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                              \n\n                            {this.props.data.сompletionDate==null?<Link to={'/home/inwork'}><Button className=\"red\"  onClick={()=>this.finish(this.props.data.id)}>Завершить</Button>\n                            </Link>:<></>}\n            \n                        </Skeleton>,\n                        <Paragraph strong>Взять в работу</Paragraph>,\n                        <Skeleton title={{ width: \"100%\" }} active loading={this.props.loading} paragraph={{ rows: 0 }}>\n                             {this.props.data.assignmentDate==null?<Button className=\"red\" onClick={()=>this.take(this.props.data.id)}>Взять</Button>:<></>}\n                            \n                        </Skeleton>\n                    ]\n                );\n            }\n            default: {\n                return (\n                    [<div>No such type</div>]\n                )\n            }\n        }\n    }\n\n    optionsNarrow = (): JSX.Element[] => {\n        return (\n            [<EllipsisOutlined onClick={() => this.expandCardChange()} />]\n        )\n    }\n\n    \n    take = (idd:string) => {\n        console.log(this.props.data);\n        axios.post(\"https://hse-cms.herokuapp.com/api/Task/take?taskId=\"+idd,{},\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                console.log(res)\n                 window.location.reload(false);\n            })\n            .catch(err => {\n                console.log(err);\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для создания статьи\"\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                err.response.body\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n\n\n    finish = (idd:string) => {\n        console.log(this.props.data);\n        let val={\n            id:idd,\n            comment: \"finished\"\n        }\n        \n        axios.post(\"https://hse-cms.herokuapp.com\" + \"/api/Task/finish\", val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                console.log(res)\n            })\n            .catch(err => {\n                console.log(err);\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Недостаточно прав для создания статьи\"\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                err.response.body\n                        });\n                        break;\n                    }\n                }\n            })\n    }\n\n\n    \n\n    optionsExpand = (): JSX.Element[] => {\n        return (\n            [<SettingOutlined onClick={() => this.makeEditableCardChange()} />, <UpOutlined onClick={() => this.expandCardChange()} />]\n        )\n    }\n\n    optionsExpandEditable = (): JSX.Element[] => {\n        return (\n            [<Popconfirm placement=\"rightTop\" title={\"Вы точно хотите удалить этот объект?\"} onConfirm={() => this.deleteCard()} okText=\"Yes\" cancelText=\"No\"><DeleteOutlined /></Popconfirm>, <CheckOutlined onClick={() => { this.makeEditableCardChange(); this.updateCard(); }} />]\n        )\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\n        if (this.props.loading === false && prevProps.loading === true) {\n            this.setState({ status: \"narrow\" })\n        }\n    }\n\n\n\n    render() {\n        this.state.bufData = this.props.data;\n        return (\n\n            <Card className=\"userCard wide\"\n                hoverable={true}\n\n                actions={\n                    this.state.status === \"narrow\" ? this.optionsNarrow() : this.state.status === \"expand\" ? this.optionsExpand() : this.optionsExpandEditable()\n                }\n            >\n                {this.Header()}\n\n                {this.state.status === \"narrow\" ? <div /> :\n                    this.state.status === \"expand\" ?\n\n                        this.DataRows().map((d, i) => {\n                            return (React.cloneElement(d, { key: i + \"dr\" }));\n                        }) :\n                        this.DataRowsEditable().map((d, i) => {\n                            return (React.cloneElement(d, { key: i + \"dre\" }));\n                        })\n                }\n            </Card>\n\n        );\n    }\n\n}\n\n\nexport default DataCard;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx",["219"],"import React from 'react';\nimport './chooseBox.css';\nimport 'antd/dist/antd.css';\nimport { Menu, Dropdown, Button, Space, Typography } from 'antd';\n\n\n/**\n * Класс компонента выбора некой опции, для задания критерия поиска.\n * @param option Текущая выбранная опция.\n * @param optionName Наименование пересенной, которой соотвествуеют option, в родительском компоненте.\n * @param optionList Массив опций выпадающего меню.\n * @param text Текст перед компонентом, для визуального пояснения выбора.\n * @param updateCallback Колбек функции на обновление отображения страницы.\n * @param changeValueCallback Колбек функции на обновление значения переменой, которой соотвествуеют option, в родительском компоненте.\n */\nexport class ChooseBox extends React.Component<{\n    option: string,\n    optionName: string,\n    optionList: string[],\n    text: string,\n    updateCallback: () => void,\n    changeValueCallback: (val: any, type: string, callback: () => void) => void\n}, {}> {\n\n\n    /**\n     * Функция генерирующая выпадающий список на основании props\n     */\n    optionGenerate = (): JSX.Element => {\n        return <Menu>\n            {this.props.optionList.map((u, i) => {\n                if (u !== this.props.option) return (\n                    <Menu.Item onClick={() => this.props.changeValueCallback(u, this.props.optionName, this.props.updateCallback)} key={this.props.optionName + i}>\n                        <Typography.Paragraph>\n                            {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n    render() {\n        return (\n            <Space size={5}>\n                <Typography.Paragraph> {this.props.text}</Typography.Paragraph>\n                <Dropdown overlay={this.optionGenerate} placement=\"bottomLeft\">\n                    <Button>{this.props.option}</Button>\n                </Dropdown>\n            </Space>\n        );\n    }\n}\n\nexport default ChooseBox;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx",["220","221"],"import React from 'react';\nimport './sortBox.css';\nimport 'antd/dist/antd.css';\nimport { Menu, Dropdown, Button, Space, Typography } from 'antd';\n\n\n/**\n * Класс компонента для установки критерия сортировки и ее напрвления.\n * @param SortDirection Текущая выбранная опция направления сортировки.\n * @param SortDirectionOptions Массив опций выпадающего меню направлений сортировки.\n * @param SortingColumn Текущая выбранная опция критериея сортировки.\n * @param SortingColumnOptions Массив опций выпадающего меню критериев сортировки.\n * @param updateCallback Колбек функции на обновление отображения страницы.\n * @param changeValueCallback Колбек функции на обновление значения переменой, в родительском компоненте.\n */\nexport class SortBox extends React.Component<{\n    SortDirection: string,\n    SortDirectionOptions: string[],\n    SortingColumn: string,\n    SortingColumnOptions: string[],\n    updateCallback: () => void,\n    changeValueCallback: (val: any, type: string, callback: () => void) => void\n}, {}> {\n\n    /**\n    * Функция генерирующая выпадающий список на основании props, для выбора направления сортировки.\n    */\n    SortDirectionGenerate = (): JSX.Element => {\n        return <Menu>\n            {this.props.SortDirectionOptions.map((u, i) => {\n                if (u !== this.props.SortDirection) return (\n                    <Menu.Item onClick={() => this.props.changeValueCallback(u, \"SortDirection\", this.props.updateCallback)} key={\"SortDirection\" + i}>\n                        <Typography.Paragraph>\n                            {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n\n    /**\n     * Функция генерирующая выпадающий список на основании props, для выбора критерия сортировки.\n     */\n    SortingColumnGenerate = (): JSX.Element => {\n        return <Menu>\n            {this.props.SortingColumnOptions.map((u, i) => {\n                if (u !== this.props.SortingColumn) return (\n                    <Menu.Item onClick={() => this.props.changeValueCallback(u, \"SortingColumn\", this.props.updateCallback)} key={\"SortingColumn\" + i}>\n                        <Typography.Paragraph>\n                            {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n\n    render() {\n        return (\n            <Space size={5}>\n                <Typography.Paragraph className=\"text\"> Сортировать</Typography.Paragraph>\n                <Dropdown overlay={this.SortingColumnGenerate} placement=\"bottomLeft\">\n                    <Button>{this.props.SortingColumn}</Button>\n                </Dropdown>\n                <Typography.Paragraph className=\"text\">по</Typography.Paragraph>\n                <Dropdown overlay={this.SortDirectionGenerate} placement=\"bottomLeft\">\n                    <Button>{this.props.SortDirection}</Button>\n                </Dropdown>\n            </Space>\n        );\n    }\n}\n\n\nexport default SortBox;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx",[],"D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx",["222"],"import React from 'react';\nimport './addBox.css';\nimport 'antd/dist/antd.css';\nimport { AddForm } from '../addForm/addForm';\nimport { Card, } from 'antd';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\n\n\n\ntype addCompany = paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class AddBox extends React.Component<{\n    createCallback: (val: any) => void,\n    dataType: string,\n}, {}> {\n\n    state = {\n        status: 'hide'\n    };\n\n\n    changeStatusValue = (val: any, type: string) => {\n        this.setState({ [type]: val })\n    }\n\n\n    submitSet = () => {\n        var event = new Event('submit', {\n            'bubbles': true, // Whether the event will bubble up through the DOM or not\n            'cancelable': true  // Whether the event may be canceled or not\n        });\n        document.getElementById(\"AddForm\")?.dispatchEvent(event);\n        //this.changeStatusValue(\"hide\",\"status\")\n    };\n\n    options = (): JSX.Element[] => {\n        return (\n            [<CheckOutlined onClick={() => { this.submitSet(); }}></CheckOutlined>, <UpOutlined onClick={() => { this.changeStatusValue(\"hide\", \"status\") }} />]\n        )\n    }\n\n\n\n    render() {\n        return (\n            <Card className=\"addBox\" id=\"addboxId\"\n                hoverable={true}\n                onClick={() => {\n                    if (this.state.status !== \"expand\")\n                        this.changeStatusValue(\"expand\", \"status\")\n                }}\n                actions={\n                    this.state.status === \"expand\" ? this.options() : []\n                }\n            >\n                {this.state.status === \"hide\" ? <PlusOutlined /> : <AddForm\n                    createCallback={this.props.createCallback}\n                    dataType={this.props.dataType}\n                    closeForm={this.changeStatusValue}\n                />}\n            </Card>\n        );\n    }\n\n}\n\nexport default AddBox;\n","D:\\diploma\\CMS\\src\\redactor\\redactor.tsx",["223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React from 'react';\nimport './redactor.css';\nimport 'antd/dist/antd.css';\nimport { useDrag } from 'react-dnd'\nimport { useDrop } from 'react-dnd'\nimport { Button, Col, Row, notification, Card, Divider, Typography, Image } from 'antd';\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport { useState } from 'react';\nimport DataEntity from \"../base/contentOptions/dataEntities/dataEntity/dataEntity\"\n//import { DataRowEditable } from \"../base/contentOptions/dataEntities/dataSubEntities/dataRow/dataRow\"\n//import '../base/contentOptions/dataEntities/dataSubEntities/dataRow/dataRow.css';\nimport {\n\n    PlusOutlined\n} from '@ant-design/icons';\nimport { Dropdown, Menu, message, Space } from \"antd\";\nimport {\n    DeleteOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CaretLeftOutlined,\n    CaretRightOutlined,\n    VerticalLeftOutlined,\n    VerticalRightOutlined,  \n    EditOutlined\n} from '@ant-design/icons';\nimport axios from 'axios'\nimport { paths } from '../swaggerCode/swaggerCode';\nimport { RouteComponentProps } from 'react-router-dom'\n\nconst { Paragraph } = Typography;\n\ntype getArticle = paths[\"/api/Article/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteArticle = paths[\"/api/Article/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateArticle = paths[\"/api/Article\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addArticle = paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n//Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiI1MWE4YjZmZC0wYWEwLTQ5MWUtOWMzNC1hZGRiZGZlNDgzMjQiLCJDb21wYW55SWQiOiJmZjA4Y2IzMS05YzBhLTQ1N2EtYTljNC0wNWYwNjZlMzAxYjUiLCJyb2xlIjoiQ29tcGFueUFkbWluIiwibmJmIjoxNjE2NDQ2NzYwLCJleHAiOjE2MTkwMzg3NjAsImlhdCI6MTYxNjQ0Njc2MH0.YbQtvyJpgWS6_V0k0dDtaEgJMut2v0JDT5TPeKEGWfzJ4c9U9C7DYmJjKmKqIw4J-hrldmyykeB4tB0AYm1xRw\n//Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiJmMDdjM2E5My04MTU2LTRhZDAtOWY5ZC1iOTYyY2Q0MWI4ODEiLCJDb21wYW55SWQiOiJmZjA4Y2IzMS05YzBhLTQ1N2EtYTljNC0wNWYwNjZlMzAxYjUiLCJyb2xlIjoiQ2hpZWZSZWRhY3RvciIsIm5iZiI6MTYxNjQ0Njg4NywiZXhwIjoxNjE5MDM4ODg3LCJpYXQiOjE2MTY0NDY4ODd9.IU5baTAuSnm96nFmg81eTgNqjf1sH7wsdbxhF4mXP0KWYA9dK3F4mdHS_IwBPxcgNRnvnqfCexWVBqYirU9KJg\n\ntype cel = {\n    x: number,\n    y: number,\n    width: number,\n    content: string | null,\n    cOpt: string[] | null,\n    cOptVal: string[] | null\n}\n\n\nexport class Redactor extends React.Component<RouteComponentProps<{ id: string }>, {}>{\n\n    state = {\n        id: this.props.match.params.id,\n        dataType: \"Redactor\",\n        requestUrl: \"https://hse-cms.herokuapp.com\",\n        requestPath: \"/api/Article/\",\n        loading: false,\n        article: {\n            id: \"\",\n            tasks: [],\n            title: \"\",\n            content: '[[{\"x\":0,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":1,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":2,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":3,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":4,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":5,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":6,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":7,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":8,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":9,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":10,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":11,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":12,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":13,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":14,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":15,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":16,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":17,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":18,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":19,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":20,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":21,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":22,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":23,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null}]]'\n        },\n        grid: [[{ x: 0, y: 0, width: 1, content: null, cOpt: null, cOptVal: null }]]\n    }\n\n    updateCallback = (content: cel[][]) => {\n        this.setState({ grid: content })\n    }\n\n\n    updateData = (val: cel[][]) => {\n        let buf = {\n            id: this.state.article.id,\n            title: this.state.article.title,\n            content: JSON.stringify(val)\n        }\n        axios.put(this.state.requestUrl + this.state.requestPath, buf,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            })\n            .then(res => {\n                notification.success({\n                    message: 'Данные успешно обновлены',\n                    description:\n                        'Данные статьи с id:' + buf.id + \" были успешно обновлены\",\n                });\n            })\n            .catch(err => {\n                console.log(err);\n                switch (err.response.status) {\n                    case 401: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Ошибка авторизации\"\n                        });\n                        break;\n                    }\n                    case 403: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                \"Недостаточно прав для изменения данных статьи\",\n                        });\n                        break;\n                    }\n                    case 404: {\n                        notification.error({\n                            message: \"Ошибка\" + err.response.status,\n                            description:\n                                'Статья с id:' + buf.id + \" не найдена\",\n                        });\n                        break;\n                    }\n                    case 409: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                        });\n                        break;\n                    }\n                    default: {\n                        notification.error({\n                            message: 'Ошибка ' + err.response.status,\n                            description:\n                                \"Неопознанная ошибка\"\n                        });\n                        break;\n                    }\n                }\n            })\n\n    }\n\n    update() {\n        this.setState({ loading: true });\n        let request: string = this.props.match.params.id;\n\n        axios.get(\n            this.state.requestUrl + this.state.requestPath + request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n                //console.log(res);\n                this.setState({ article: res.data });\n                this.setState({ grid: JSON.parse(res.data.content) })\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        console.log(\"401\");\n                        break;\n                    }\n                    default: {\n                        console.log(\"Undefined error\");\n                        break;\n                    }\n                }\n            })\n    }\n\n\n\n    render() {\n        console.log(\"ID:\");\n        console.log(this.props.match.params.id);\n        //  return(\n        //      <ArticleV gridArticle={this.state.grid}/>        \n        //  );\n        return (\n            <DndProvider backend={HTML5Backend}>\n\n                <Row>\n\n                    <Col span={24} >\n                        <DataBlock articleData={this.state.article} />\n                    </Col>\n\n                </Row>\n\n                <Row >\n                    <Col span={1}></Col>\n                    <Col span={16}>\n                        <ArticleBlock updateCallback={this.updateCallback} save={this.updateData} gridArticle={this.state.grid} />\n                    </Col>\n                    <Col span={6}>\n                        <OptionsBlock />\n                    </Col>\n                    <Col span={1}></Col>\n                </Row>\n\n\n\n            </DndProvider>\n        );\n\n    }\n    componentDidMount() {\n        this.update();\n    }\n}\n\n\n\n\n\nexport class DataBlock extends React.Component<{ articleData: any }, {}> {\n\n    render() {\n        console.log(\"!!!!!\")\n        console.log(this.props.articleData)\n        return (\n\n            <div className=\"dataPoolTop\">\n                <DataEntity\n                    dataType={\"task\"}\n                    loading={false}\n                    updateDataCallback={() => { }}\n                    deleteCallback={() => { }}\n                    updateCallback={() => { }}\n                    changeValueCallback={() => { }}\n                    items={this.props.articleData.tasks} />\n            </div>\n\n        );\n    }\n}\n\n\n\n\n\nexport class TextBlock extends React.Component<{\n    styleTypes: string[]\n    styleValues: string[]\n}, {}> {\n\n\n\n    render() {\n        return (\n            <Typography.Paragraph className={\"grey\"}\n                style={{\n                    [this.props.styleTypes[1]]: this.props.styleValues[1],\n                    [this.props.styleTypes[2]]: this.props.styleValues[2]\n                }}>{this.props.styleValues[0]}</Typography.Paragraph>\n        );\n    }\n}\n\n\nexport class ImgBlock extends React.Component<{\n    styleTypes: string[],\n    styleValues: string[]\n}, {}> {\n\n\n\n    render() {\n        return (\n            <Image className={\"grey\"}\n                src={this.props.styleValues[0]}\n                style={{\n                    [this.props.styleTypes[1]]: this.props.styleValues[1] + \"px\",\n                    [this.props.styleTypes[2]]: this.props.styleValues[2] + \"px\"\n                }}></Image>\n        );\n    }\n}\n\n\nexport class OptionsBlock extends React.Component<{}, {}> {\n    render() {\n        return (\n            <Card className=\"partsPoolright\">\n                <BlockImg name={\"text\"} />\n                <BlockImg name={\"img\"} />\n                <BlockImg name={\"text\"} />\n                <BlockImg name={\"img\"} />\n            </Card>\n        );\n    }\n}\n\n\nconst ItemTypes = {\n    OPTION: 'option',\n}\n\n\nfunction BlockImg(props: { name: string }) {\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.OPTION,\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n        }),\n        item: { name: props.name }\n    }))\n\n    return (\n        <div ref={drag} className=\"contentStyle\">{props.name}</div>\n    );\n}\n\nfunction Instuments(props: {\n    cOpt: string[],\n    cOptVal: string[],\n    delete: () => void,\n    edit: () => void,\n    mvR: () => void,\n    mvL: () => void,\n    aR: () => void,\n    rR: () => void,\n    aL: () => void,\n    rL: () => void,\n    changeOption: (newOptVal: string[]) => void\n}\n) {\n    const [visible, setVisible] = useState(false);\n\n    return (\n        <>\n            <DeleteOutlined className={\"deleteButton buttonStyle\"} onClick={props.delete} />\n            <EditOutlined className={\"editButton buttonStyle\"} onClick={() => setVisible(!visible)} />\n            <CaretRightOutlined className={\"moveRightButton buttonStyle\"} onClick={props.mvR} />\n\n            <CaretLeftOutlined className={\"moveLeftButton buttonStyle\"} onClick={props.mvL} />\n\n            <VerticalLeftOutlined className={\"addRightButton buttonStyle\"} onClick={props.aR} />\n            <VerticalRightOutlined className={\"reduceRightButton buttonStyle\"} onClick={props.rR} />\n            <VerticalRightOutlined className={\"addLeftButton buttonStyle\"} onClick={props.aL} />\n            <VerticalLeftOutlined className={\"reduceLeftButton buttonStyle\"} onClick={props.rL} />\n            <Settings changeOption={props.changeOption} visible={visible} cOpt={props.cOpt} cOptVal={props.cOptVal}></Settings>\n        </>\n    );\n}\n\n\nexport interface IDataRowE {\n    dataStr: string\n    titleStr: string\n    typeName: string\n    editFieldCallback: (val: string, param: string) => void;\n}\n\nexport function DataRowEditable({ dataStr, titleStr, typeName, editFieldCallback }: IDataRowE) {\n    const [editableStr, setEditableStr] = React.useState(dataStr);\n    return (\n        <Row className=\"DataRow\">\n            <Col span={4} className='title' >\n                <Paragraph className='DataRowTitle'>{titleStr}</Paragraph>\n            </Col>\n            <Col span={1}></Col>\n            <Col span={17}>\n                <Paragraph className='DataRowData' editable={{\n                    maxLength: 10000,\n                    icon: <EditOutlined />,\n                    tooltip: 'Изменить',\n                    autoSize: { maxRows: 3, minRows: 1 },\n                    onChange: (editableStr) => { setEditableStr(editableStr); editFieldCallback(editableStr, typeName); },\n                }}>\n                    {editableStr}\n                </Paragraph>\n            </Col>\n        </Row>\n    )\n}\n\n\nfunction Settings(props: {\n    visible: boolean,\n    cOpt: string[],\n    cOptVal: string[],\n    changeOption: (newOptVal: string[]) => void\n}\n) {\n\n\n\n    return (\n        props.visible ?\n            <Card className={\"settingsForm\"} onClick={() => {/*console.log(props.cOpt)*/ }}>\n                {props.cOptVal.map((r, i) => {\n                    return (<DataRowEditable dataStr={props.cOptVal[i]} titleStr={props.cOpt[i] + \":\"} typeName={\"\" + i}\n                        editFieldCallback={(val: string, param: string) => editFieldCallback(val, param, props.cOptVal, props.changeOption)} />)\n                })}\n            </Card> :\n            <></>\n    );\n}\n\nfunction editFieldCallback(val: string, param: string, cOptVal: string[], changeOption: (newOptVal: string[]) => void) {\n\n    let buf: string[] = cOptVal;\n    var i: number = +param;\n    buf[i] = val;\n    changeOption(buf);\n\n}\n\nfunction Cell(props: {\n    x: number, y: number, width: number,\n    content: string | null,\n    cOpt: string[] | null,\n    cOptVal: string[] | null,\n    edit: () => void,\n    mvR: (x: number, y: number) => void,\n    mvL: (x: number, y: number) => void,\n    aR: (x: number, y: number) => void,\n    rR: (x: number, y: number) => void,\n    aL: (x: number, y: number) => void,\n    rL: (x: number, y: number) => void,\n    delete: (x: number, y: number) => void,\n    insert: (x: number, y: number, item: string, cOpt: string[], cOptVal: string[]) => void,\n    changeOption: (x: number, y: number, newOptVal: string[]) => void\n}) {\n\n\n    const [{ isOver }, drop] = useDrop(\n        () => ({\n            accept: \"option\",\n            drop: (item: { name: string }) => {\n                //console.log(item)\n                switch (item.name) {\n                    case 'text':\n                        props.insert(props.x, props.y, \"text\", [\"text\", \"font-size\", \"color\"], [\"text\", \"6px\", \"green\"])\n                        break;\n                    case 'img':\n                        props.insert(props.x, props.y, \"img\", [\"img\", \"width\", \"height\"], [\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\", \"100px\", \"150px\"])\n                        break;\n                    default:\n                        break;\n                }\n\n            },\n            collect: (monitor) => ({\n                isOver: !!monitor.isOver()\n            }),\n            hover: (item) => {\n\n            }\n\n        })\n    )\n\n    const [visible, setVisible] = useState(true);\n\n    return (\n\n        <Col span={props.width}>\n            <div ref={drop} className=\"redactorCell\" onClick={() => { if (props.content != null) setVisible(!visible); }}><>\n                {(() => {\n                    //console.log(props.content);\n                    switch (props.content) {\n                        case 'text':\n                            return (<TextBlock styleTypes={props.cOpt!} styleValues={props.cOptVal!} />)\n                        case 'img':\n                            return (<ImgBlock styleTypes={props.cOpt!} styleValues={props.cOptVal!} />)\n                        default:\n                            return (<></>)\n                    }\n                })()}\n\n\n            </>\n            </div>\n            {props.content !== null && visible ? <Instuments\n                edit={props.edit}\n                mvR={() => { props.mvR(props.x, props.y) }}\n                mvL={() => { props.mvL(props.x, props.y) }}\n                aR={() => { props.aR(props.x, props.y) }}\n                rR={() => { props.rR(props.x, props.y) }}\n                aL={() => { props.aL(props.x, props.y) }}\n                rL={() => { props.rL(props.x, props.y) }}\n                delete={() => { props.delete(props.x, props.y) }}\n                cOpt={props.cOpt!}\n                cOptVal={props.cOptVal!}\n                changeOption={(newOptVal: string[]) => props.changeOption(props.x, props.y, newOptVal)}\n            /> : <></>}\n        </Col>\n\n\n    );\n}\n\n\nexport class ArticleV extends React.Component<RouteComponentProps<{ id: string }>, {}>{\n\n    //extends React.Component<{gridArticle:cel[][]|null},{}> {\n    state = {\n        id: this.props.match.params.id,\n        dataType: \"Redactor\",\n        requestUrl: \"https://hse-cms.herokuapp.com\",\n        requestPath: \"/api/Article/\",\n        loading: false,\n        article: {\n            id: \"\",\n            tasks: [],\n            title: \"\",\n            content: '[[{\"x\":0,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":1,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":2,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":3,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":4,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":5,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":6,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":7,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":8,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":9,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":10,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":11,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":12,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":13,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":14,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":15,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":16,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":17,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":18,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":19,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":20,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":21,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":22,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":23,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null}]]'\n        },\n        grid: [[{ x: 0, y: 0, width: 1, content: null, cOpt: null, cOptVal: null }]]\n    }\n\n    update() {\n        this.setState({ loading: true });\n        let request: string = this.props.match.params.id;\n\n        axios.get(\n            this.state.requestUrl + this.state.requestPath + request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \" + sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n            .then(res => {\n                //console.log(res);\n                this.setState({ article: res.data });\n                this.setState({ grid: JSON.parse(res.data.content) })\n            })\n            .catch(err => {\n                switch (err.response.status) {\n                    case 401: {\n                        console.log(\"401\");\n                        break;\n                    }\n                    default: {\n                        console.log(\"Undefined error\");\n                        break;\n                    }\n                }\n            })\n    }\n\n    render() {\n\n        return (\n            <div className=\"articleB\" title=\"Макет саттьи\">\n                {this.state.grid!.map((r, i) => {\n                    return (\n                        <Row>\n                            <Col span={1}></Col>\n                            <Col span={22}>\n                                <Row className={\"\"}>\n                                    {r.map((c, j) => {\n                                        return (\n                                            <Col span={c.width}>\n                                                {(() => {\n                                                    //console.log(props.content);\n                                                    switch (c.content!) {\n                                                        case 'text':\n                                                            return (<TextBlock styleTypes={c.cOpt!} styleValues={c.cOptVal!} />)\n                                                        case 'img':\n                                                            return (<ImgBlock styleTypes={c.cOpt!} styleValues={c.cOptVal!} />)\n                                                        default:\n                                                            return (<></>)\n                                                    }\n                                                })()}\n                                            </Col>\n\n                                        );\n                                    })}\n                                </Row>\n                            </Col>\n                            <Col span={1}></Col>\n                        </Row>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.update();\n    }\n}\n\n\n\n\nexport class ArticleBlock extends React.Component<{ updateCallback: (content: cel[][]) => void, gridArticle: cel[][] | null, save: (content: cel[][]) => void }, {\n\n}> {\n\n    changeOption = (x: number, y: number, newOptVal: string[]) => {\n        let buf: cel[][] = this.props.gridArticle!;\n        buf[y][x].cOptVal = newOptVal;\n        this.props.updateCallback(buf);\n    }\n\n\n    delete = (x: number, y: number) => {\n\n        let buf: cel[][] = this.props.gridArticle!;\n        let bufw = this.props.gridArticle![y][x].width;\n        buf[y].splice(x, 1);\n        for (let i = 0; i < bufw; i++) {\n            let zel = {\n                x: x + i,\n                y: y,\n                width: 1,\n                content: null,\n                cOpt: null,\n                cOptVal: null\n            }\n            buf[y].splice(x + i, 0, zel);\n        }\n        for (var j = 0; j < buf[y].length; j++) {\n\n            buf[y][j].x = j;\n            buf[y][j].y = y;\n        }\n        this.props.updateCallback(buf);\n    }\n    edit = () => {\n        console.log(\"edit\");\n    }\n    mvR = (x: number, y: number) => {\n        if (x + 1 < this.props.gridArticle![y].length) {\n            let buf: cel[][] = this.props.gridArticle!;\n            let gridel1: cel = buf[y][x + 1];\n            gridel1.x = x;\n            let gridel2: cel = buf[y][x];\n            gridel2.x = x + 1;\n            buf[y][x] = gridel1;\n            buf[y][x + 1] = gridel2;\n            for (var j = 0; j < buf[y].length; j++) {\n\n                buf[y][j].x = j;\n                buf[y][j].y = y;\n            }\n            this.props.updateCallback(buf);\n        }\n    }\n    mvL = (x: number, y: number) => {\n        if (x > 0) {\n            let buf: cel[][] = this.props.gridArticle!;\n            let gridel1: cel = buf[y][x - 1];\n            gridel1.x = x;\n            let gridel2: cel = buf[y][x];\n            gridel2.x = x - 1;\n            buf[y][x] = gridel1;\n            buf[y][x - 1] = gridel2;\n            for (var j = 0; j < buf[y].length; j++) {\n\n                buf[y][j].x = j;\n                buf[y][j].y = y;\n            }\n            this.props.updateCallback(buf);\n        }\n    }\n    aR = (x: number, y: number) => {\n        if (x + 1 < this.props.gridArticle![y].length)\n            if (this.props.gridArticle![y][x + 1].content == null) {\n                let buf: cel[][] = this.props.gridArticle!;\n                let gridel: cel = buf[y][x];\n                gridel.width = gridel.width + 1;\n                buf[y].splice(x, 2, gridel);\n                for (var j = 0; j < buf[y].length; j++) {\n\n                    buf[y][j].x = j;\n                    buf[y][j].y = y;\n                }\n                this.props.updateCallback(buf);\n            }\n    }\n    rR = (x: number, y: number) => {\n        if (this.props.gridArticle![y][x].width > 1) {\n            let buf: cel[][] = this.props.gridArticle!;\n            let gridel: cel = buf[y][x];\n            gridel.width = gridel.width - 1;\n            gridel.x = gridel.x;\n            let el: cel = {\n                x: x,\n                y: y,\n                width: 1,\n                content: null,\n                cOpt: null,\n                cOptVal: null\n            }\n            buf[y].splice(x, 1, gridel, el);\n            for (var j = 0; j < buf[y].length; j++) {\n\n                buf[y][j].x = j;\n                buf[y][j].y = y;\n            }\n            this.props.updateCallback(buf);\n        }\n    }\n    aL = (x: number, y: number) => {\n        if (x >= 1 && this.props.gridArticle![y][x - 1].content == null) {\n            let buf: cel[][] = this.props.gridArticle!;\n            let gridel: cel = buf[y][x];\n            gridel.width = gridel.width + 1;\n            gridel.x = gridel.x - 1;\n            buf[y].splice(x - 1, 2, gridel);\n            for (var j = 0; j < buf[y].length; j++) {\n\n                buf[y][j].x = j;\n                buf[y][j].y = y;\n            }\n            this.props.updateCallback(buf);\n        }\n    }\n    rL = (x: number, y: number) => {\n        if (this.props.gridArticle![y][x].width > 1) {\n            let buf: cel[][] = this.props.gridArticle!;\n            let gridel: cel = buf[y][x];\n            gridel.width = gridel.width - 1;\n            gridel.x = gridel.x + 1;\n            let el: cel = {\n                x: x,\n                y: y,\n                width: 1,\n                content: null,\n                cOpt: null,\n                cOptVal: null\n            }\n            buf[y].splice(x, 1, el, gridel);\n            for (var j = 0; j < buf[y].length; j++) {\n\n                buf[y][j].x = j;\n                buf[y][j].y = y;\n            }\n            this.props.updateCallback(buf);\n        }\n    }\n\n    addRow = () => {\n        let buf: cel[][] = this.props.gridArticle!;\n        let gridRow: cel[] = []\n        for (var j = 0; j < 24; j++) {\n            let el: cel = {\n                x: j,\n                y: this.props.gridArticle!.length,\n                width: 1,\n                content: null,\n                cOpt: null,\n                cOptVal: null\n            }\n            gridRow.splice(j, 0, el);\n        }\n        buf.splice(this.props.gridArticle!.length + 1, 0, gridRow);\n        this.props.updateCallback(buf);\n    }\n\n    deleteRow = (y: number) => {\n        let buf: cel[][] = this.props.gridArticle!;\n        buf.splice(y, 1);\n\n        for (let i = 0; i < buf.length; i++) {\n            for (let j = 0; j < buf[i].length; j++) {\n                buf[i][j].y = i\n            }\n        }\n        this.props.updateCallback(buf);\n    }\n\n    insert = (x: number, y: number, item: string, cOpt: string[], cOptVal: string[]) => {\n        let buf: cel[][] = this.props.gridArticle!;\n        let bufel = {\n            x: x,\n            y: y,\n            width: this.props.gridArticle![y][x].width,\n            content: item,\n            cOpt: cOpt,\n            cOptVal: cOptVal\n        }\n        buf[y][x] = bufel;\n        for (var j = 0; j < buf[y].length; j++) {\n\n            buf[y][j].x = j;\n            buf[y][j].y = y;\n        }\n        this.props.updateCallback(buf);\n    }\n\n\n    update = () => {\n        console.log(JSON.stringify(this.props.gridArticle!))\n    }\n\n    send = () => {\n        console.log(JSON.stringify(this.props.gridArticle!))\n    }\n    /*insertComponent=(x:number,y:number,width:number,component:JSX.Element)=>{\n        if(x+width>24) {x=24-width}\n        let buf:JSX.Element[][]=this.state.grid;\n        buf[y].splice(x,width,<Cell x={x} y={y} width={width} content={component} insertComponent={()=>{}} deleteComponent={this.deleteComponent}/>);\n        this.setState({grid:buf})\n    }*/\n\n\n\n\n    constructor(props: { rows: number, updateCallback: (content: cel[][]) => void, cels: number, gridArticle: cel[][] | null, save: (content: cel[][]) => void }) {\n        super(props);\n\n        if (this.props.gridArticle !== null) {\n\n        }\n        else {\n            let buf: cel[][] = []\n            for (var i = 0; i < this.props.gridArticle!.length; i++) {\n                let gridRow: cel[] = []\n                for (var j = 0; j < 24; j++) {\n                    let el: cel = {\n                        x: j,\n                        y: i,\n                        width: 1,\n                        content: null,\n                        cOpt: null,\n                        cOptVal: null\n                    }\n                    gridRow.splice(j, 0, el);\n                }\n                buf.splice(i, 0, gridRow);\n                this.props.updateCallback(buf);\n            }\n            this.state = {\n                rows: buf.length,\n                cels: 24,\n            }\n        }\n        // this.state.grid[3][3].content=ComponentsBlock[6];\n        //this.state.grid[3][6].content=ComponentsBlock[6];\n        // console.log(this.state.grid)\n    }\n\n    /*\n    <Cell x={1} y={1} width={1} content={<>2</>}\n                edit={this.edit}\n                mvR={this.mvR}\n                mvL={this.mvL}\n                mvT={this.mvT}\n                mvB={this.mvB}\n                aR={this.aR}\n                rR={this.rR}\n                aL={this.aL}\n                rL={this.rL}\n                delete={this.delete}\n    */\n\n    render() {\n\n        return (\n            <Card className=\"articleBody\" title=\"Макет статьи\">\n                {this.props.gridArticle!.map((r, i) => {\n                    return (\n                        <Row>\n                            <Col span={1}></Col>\n                            <Col span={22}>\n                                <Row className={\"redactorRow\"}>\n                                    {r.map((c, j) => {\n                                        return (\n                                            <Cell x={this.props.gridArticle![i][j].x} y={this.props.gridArticle![i][j].y} width={this.props.gridArticle![i][j].width}\n                                                content={this.props.gridArticle![i][j].content}\n                                                cOpt={this.props.gridArticle![i][j].cOpt}\n                                                cOptVal={this.props.gridArticle![i][j].cOptVal}\n                                                edit={this.edit}\n                                                mvR={this.mvR}\n                                                mvL={this.mvL}\n                                                aR={this.aR}\n                                                rR={this.rR}\n                                                aL={this.aL}\n                                                rL={this.rL}\n                                                delete={this.delete}\n                                                insert={this.insert}\n                                                changeOption={this.changeOption}\n                                            />\n\n                                        );\n                                    })}\n                                    <DeleteOutlined className={\"delRowButton\"} type=\"dashed\" onClick={() => this.deleteRow(i)} />\n                                </Row>\n                            </Col>\n                            <Col span={1}></Col>\n                        </Row>\n                    )\n                })}\n                {this.props.gridArticle!.length}: {24}\n                <Divider />\n\n                <Row >\n                    <Col span={1}></Col>\n\n                    <Col span={22}>\n                        <Button type=\"dashed\" onClick={() => this.addRow()}>Add</Button>\n                        <Button type=\"dashed\" onClick={() => this.update()}>Update</Button>\n                        <Button type=\"dashed\" onClick={() => { console.log(JSON.stringify(this.props.gridArticle!)); this.props.save(this.props.gridArticle!) }}>Save</Button>\n                    </Col>\n                    <Col span={1}></Col>\n                </Row>\n            </Card>\n        );\n    }\n\n\n\n}\n\nexport default { Redactor, ArticleV };\n\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx",["238","239","240","241","242","243","244"],"import React from 'react';\nimport './addForm.css';\nimport 'antd/dist/antd.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport { Input, Typography, Form, } from 'antd';\n\nimport { CMultiplyPicker } from '../../dataSubEntities/multiplyPicker/multiplyPicker';\n\n\n\ntype addCompany = paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addUser = paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\ntype addArticle = paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nconst { Paragraph } = Typography;\ntype option =\n    {\n        label: string,\n        value: string\n    }\n\ntype field =\n    {\n        name: string,\n        value: string,\n        type: string,\n        label: string,\n        options: option[],\n        chosedOptions: option[]\n    }\n\nconst articleFields: field[] = [\n    {\n        name: 'articleTitle',\n        value: '',\n        type: 'text',\n        label: 'Данные статьи',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'articleName',\n        value: '',\n        type: 'input',\n        label: 'Заголовок статьи',\n        options: [],\n        chosedOptions: []\n    }\n]\n\nconst companyFields: field[] = [\n    {\n        name: 'companyTitle',\n        value: '',\n        type: 'text',\n        label: 'Данные компании',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'companyName',\n        value: '',\n        type: 'input',\n        label: 'Название:',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'adminTitle',\n        value: '',\n        type: 'text',\n        label: 'Данные админа',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'firstName',\n        value: '',\n        type: 'input',\n        label: 'Имя',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'lastName',\n        value: '',\n        type: 'input',\n        label: 'Фамилия',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'email',\n        value: '',\n        type: 'input',\n        label: 'Email',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'password',\n        value: '',\n        type: 'input',\n        label: 'Пароль',\n        options: [],\n        chosedOptions: []\n    }\n]\n\nconst employeeFields: field[] = [\n    {\n        name: 'firstName',\n        value: '',\n        type: 'input',\n        label: 'Имя',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'lastName',\n        value: '',\n        type: 'input',\n        label: 'Фамилия',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'email',\n        value: '',\n        type: 'input',\n        label: 'Email',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'password',\n        value: '',\n        type: 'input',\n        label: 'Пароль',\n        options: [],\n        chosedOptions: []\n    },\n    {\n        name: 'roles',\n        value: '1',\n        type: 'multiplyPicker',\n        label: 'Роли',\n        options: [\n            {\n                label: \"SuperAdmin\",\n                value: \"SuperAdmin\"\n            },\n            {\n                label: \"CompanyAdmin\",\n                value: \"CompanyAdmin\"\n            },\n            {\n                label: \"ChiefRedactor\",\n                value: \"ChiefRedactor\"\n            },\n            {\n                label: \"Redactor\",\n                value: \"Redactor\"\n            },\n            {\n                label: \"Author\",\n                value: \"Author\"\n            },\n            {\n                label: \"Corrector\",\n                value: \"Corrector\"\n            }\n        ],\n        chosedOptions: [\n        ]\n    }\n]\n\nexport class AddForm extends React.Component<{\n    createCallback: (val: any) => void,\n    dataType: string,\n    closeForm: (val1: string, val2: string) => void\n}, { fields: field[] }> {\n\n    constructor(props: {\n        createCallback: (val: addCompany) => void,\n        dataType: string, closeForm: (val1: string, val2: string) => void\n    }) {\n        super(props);\n        switch (this.props.dataType) {\n            case \"article\": {\n                this.state = {\n                    fields: articleFields\n                }\n                break;\n            }\n            case \"employee\": {\n                this.state = {\n                    fields: employeeFields\n                }\n                break;\n            }\n            case \"role\": {\n                this.state = {\n                    fields: companyFields\n                }\n                break;\n            }\n            case \"company\": {\n                this.state = {\n                    fields: companyFields\n                }\n                break;\n            }\n            case \"task\": {\n                this.state = {\n                    fields: companyFields\n                }\n                break;\n            }\n            default: {\n                this.state = {\n                    fields: companyFields\n                }\n                break;\n            }\n        }\n\n    }\n\n\n    state = {\n        fields: [\n            {\n                name: 'companyTitle',\n                value: '',\n                type: 'text',\n                label: 'Данные компании',\n                options: [{\n                    label: \"\",\n                    value: \"\"\n                }],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n\n            },\n            {\n                name: 'companyName',\n                value: '',\n                type: 'input',\n                label: 'Название:',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'adminTitle',\n                value: '',\n                type: 'text',\n                label: 'Данные админа',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'firstName',\n                value: '',\n                type: 'input',\n                label: 'имя',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'lastName',\n                value: '',\n                type: 'input',\n                label: 'фамилия',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'email',\n                value: '',\n                type: 'input',\n                label: 'email',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'password',\n                value: '',\n                type: 'input',\n                label: 'пароль',\n                options: [],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n            },\n            {\n                name: 'articleName',\n                value: '',\n                type: 'input',\n                label: 'Данные статьи',\n                options: [{\n                    label: \"\",\n                    value: \"\"\n                }],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n\n            },\n            {\n                name: 'articleTitle',\n                value: '',\n                type: 'text',\n                label: 'Данные статьи',\n                options: [{\n                    label: \"\",\n                    value: \"\"\n                }],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n\n            },\n            {\n                name: 'articleName',\n                value: '',\n                type: 'input',\n                label: 'Статьи',\n                options: [{\n                    label: \"\",\n                    value: \"\"\n                }],\n                chosedOptions: [\n                    {\n                        label: \"\",\n                        value: \"\"\n                    }\n                ]\n\n            }\n        ]\n    };\n\n\n    onFinish = () => {\n        let buf;\n        switch (this.props.dataType) {\n            case \"article\": {\n                let guis1: string = uuidv4();\n                buf = {\n                    id: guis1,\n                    title: this.state.fields[0].value,\n                    content: \"[]\",\n                }\n                break;\n            }\n            case \"employee\": {\n                let guis1: string = uuidv4();\n                let roles: string[] = []\n                this.state.fields[4].chosedOptions.map((u, i) => {\n                    roles.splice(roles.length, 0, u.value);\n                })\n                buf = {\n                    id: \"\",\n                    email: this.state.fields[2].value,\n                    firstName: this.state.fields[0].value,\n                    lastName: this.state.fields[1].value,\n                    password: this.state.fields[3].value,\n                    roles: roles\n                };\n\n                buf.id = guis1;\n                break;\n            }\n            case \"role\": {\n                buf = {}\n                break;\n            }\n            case \"company\": {\n                let guis1: string = uuidv4();\n                let guis2: string = uuidv4();\n                buf = {\n                    company: {\n                        id: \"\",\n                        name: this.state.fields[0].value,\n                    },\n                    admin: {\n                        id: \"\",\n                        email: this.state.fields[3].value,\n                        firstName: this.state.fields[1].value,\n                        lastName: this.state.fields[2].value,\n                        password: this.state.fields[4].value,\n                    }\n                };\n                buf.admin.id = guis1;\n                buf.company.id = guis2;\n                break;\n            }\n            case \"task\": {\n                buf = {}\n\n                break;\n            }\n            default: {\n\n                buf = {}\n                break;\n            }\n        }\n        this.props.closeForm(\"hide\", \"status\");\n        this.props.createCallback(\n            buf\n        )\n    };\n\n    onFinishFailed = () => {\n        \n    };\n\n\n    updateListCallBack = (val: option[]) => {\n        let buf = this.state.fields;\n        buf[4].chosedOptions = val;\n        this.setState({ fields: buf });\n    };\n\n\n\n    formGenerator = (): JSX.Element => {\n        return (\n            <Form id=\"AddForm\" labelCol={{ span: 3 }} wrapperCol={{ span: 20, offset: 1 }} fields={this.state.fields}\n\n                onFinish={this.onFinish}\n                onFinishFailed={this.onFinishFailed}\n                onFieldsChange={(_, allFields) => {\n                    let buf = this.state.fields;\n                    for (var i = 0; i < allFields.length; i++) {\n                        buf[i].value = allFields[i].value;\n\n                    }\n                    this.setState({\n                        fields: buf\n                    })\n                }}\n            >\n\n\n                {this.state.fields.map((u, i) => {\n                    switch (u.type) {\n                        case \"input\": {\n                            return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                                <Input />\n                            </Form.Item>\n                            break;\n                        }\n                        // case \"singlePicker\":{\n                        //     return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                        //     <Select onSelect={(value:string)=>{\n                        //          let buf=this.state.fields;\n                        //          u.value=value;\n                        //          this.setValue(buf);\n                        //          console.log(buf);\n                        //     }}>\n                        //       {u.options.map((uo, j) => {\n                        //           if(u.value!==uo.value)\n                        //           return(\n                        //             <Select.Option  value={uo.value} onClick={()=>{\n\n                        //             }}>{uo.label}</Select.Option>\n                        //           );\n                        //       })}\n                        //     </Select>\n                        //   </Form.Item>\n                        //     break;\n                        // }\n                        case \"multiplyPicker\": {\n                            return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                                <CMultiplyPicker updListCallback={this.updateListCallBack} typeName=\"\" dataList={u.chosedOptions} optionList={u.options} />\n                            </Form.Item>\n                            break;\n                        }\n                        case \"text\": {\n                            return <Paragraph>\n                                {u.value}\n                            </Paragraph>\n                            break;\n                        }\n\n                    }\n\n                })}\n            </Form>\n\n\n\n        );\n    }\n\n    render() {\n        return (\n            this.formGenerator()\n        );\n    }\n}\n\n\n\n\n\nexport default AddForm;\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React from 'react';\nimport './multiplyPicker.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport { Menu, Dropdown, Button, Input, Typography, Card, } from 'antd';\nimport {\n\n    PlusOutlined,\n    CloseOutlined\n\n} from '@ant-design/icons';\nimport { Steps } from 'antd';\n\nconst { Step } = Steps;\nconst { Search } = Input;\nconst { Paragraph } = Typography;\nconst { Meta } = Card;\nconst { Title, Text } = Typography;\n\n\ntype company = paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype article = paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\ntype role = paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype task = paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\ntype emploe = paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\n\nexport class MultiplyPicker extends React.Component<{\n    updListCallback: (val: any) => void,\n    typeName: string,\n    dataList: string[],\n}, {}> {\n\n    state = {\n        bufList: this.props.dataList\n    }\n\n    deleteUl(id: number): string[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(id, 1);\n        this.setState({ bufList: updateArray });\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    addUl(el: string): string[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(this.state.bufList.length, 0, el);\n        this.setState({ bufList: updateArray });\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    updateOptionsMenuCallBack(): JSX.Element {\n        let optList: string[] = [\"SuperAdmin\", \"CompanyAdmin\", \"ChiefRedactor\", \"Redactor\", \"Author\", \"Corrector\"]\n        return <Menu>\n            {optList.map((r, i) => {\n                if (this.state.bufList.indexOf(r) == -1)\n                    return (\n\n                        <Menu.Item key={i + \"mi\"} onClick={() => this.addUl(r)}>\n                            {r}\n                        </Menu.Item>\n                    )\n            })}\n        </Menu>\n\n    }\n\n    render() {\n        return (\n\n            <div>\n                {this.props.dataList.map((d, i) => {\n                    return (\n                        <Button key={i + \"dl\"} className=\"deleteButton\" danger\n                            type=\"dashed\"\n                            onClick={() => this.deleteUl(i)}\n                        >\n                            {d} <CloseOutlined />\n                        </Button>\n                    )\n                })}\n                <Dropdown overlay={this.updateOptionsMenuCallBack()}>\n                    <Button className=\"addButtun\"\n                        type=\"dashed\"\n                        onClick={() => { }}\n                        style={{ width: '100%' }}\n                    >\n                        Добавить роль <PlusOutlined />\n                    </Button>\n                </Dropdown>\n            </div>\n\n        );\n    }\n\n}\n\ntype option =\n    {\n        label: string,\n        value: string\n    }\n\nexport class CMultiplyPicker extends React.Component<{\n    updListCallback: (val: any) => void,\n    typeName: string,\n    dataList: option[],\n    optionList: option[]\n}, {}> {\n\n    state = {\n        bufList: this.props.dataList\n    }\n\n    deleteUl(id: number): option[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(id, 1);\n        this.setState({ bufList: updateArray });\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    addUl(el: option): option[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(this.state.bufList.length, 0, el);\n        this.setState({ bufList: updateArray });\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    updateOptionsMenuCallBack(): JSX.Element {\n\n        return <Menu>\n            {this.props.optionList.map((r, i) => {\n                if (this.state.bufList.indexOf(r) == -1)\n                    return (\n\n                        <Menu.Item key={i + \"mi\"} onClick={() => this.addUl(r)}>\n                            {r.label}\n                        </Menu.Item>\n                    )\n            })}\n        </Menu>\n\n    }\n\n    render() {\n        return (\n\n            <div>\n                {this.props.dataList.map((d, i) => {\n                    return (\n                        <Button key={i + \"dl\"} className=\"deleteButton\" danger\n                            type=\"dashed\"\n                            onClick={() => this.deleteUl(i)}\n                        >\n                            {d.label} <CloseOutlined />\n                        </Button>\n                    )\n                })}\n                <Dropdown overlay={this.updateOptionsMenuCallBack()}>\n                    <Button\n                        type=\"dashed\"\n                        onClick={() => { }}\n                        style={{ width: '100%' }}\n                    >\n                        Добавить роль <PlusOutlined />\n                    </Button>\n                </Dropdown>\n            </div>\n\n        );\n    }\n\n}\n\n\n\nexport default { CMultiplyPicker, MultiplyPicker };\n","D:\\diploma\\CMS\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx",["261"],"import React from 'react';\nimport { Row, Col, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport './dataRow.css';\nimport {\n    CloseOutlined,\n    EditOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport { Dropdown, Menu, message, Typography, Space } from \"antd\";\nconst { Paragraph } = Typography;\n\n\nexport interface IDataRowE {\n    dataStr: string\n    titleStr: string\n    typeName: string\n    editFieldCallback: (val: string, param: string) => void;\n}\n\nexport interface IDataRowListE {\n    dataList: string[]\n    titleStr: string\n    typeName: string\n    editListCallback: (val: string[], param: string) => void;\n}\n\nexport interface IDataRow {\n    dataStr: string\n    titleStr: string\n}\n\nexport interface IDataRowList {\n    dataList: string[]\n    titleStr: string\n}\n\nexport function DataRowEditable({ dataStr, titleStr, typeName, editFieldCallback }: IDataRowE) {\n    const [editableStr, setEditableStr] = React.useState(dataStr);\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title' >\n                <Paragraph className='DataRowTitle'>{titleStr}</Paragraph>\n            </Col>\n            <Col span={19}>\n                <Paragraph className='DataRowData' editable={{\n                    maxLength: 10000,\n                    icon: <EditOutlined />,\n                    tooltip: 'Изменить',\n                    onChange: (editableStr) => { setEditableStr(editableStr); editFieldCallback(editableStr, typeName); },\n                }}>\n                    {editableStr}\n                </Paragraph>\n            </Col>\n        </Row>\n    )\n}\n\nexport function DataRow({ dataStr, titleStr }: IDataRow) {\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={20} ><Paragraph className='DataRowData'>{dataStr}</Paragraph></Col>\n        </Row>\n    )\n}\n\nexport function DataRowList({ dataList, titleStr }: IDataRowList) {\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={4} className=\"DataRowList\">\n\n                {dataList.map((r, i) => {\n                    return (\n                        <Row key={i + \"rw\"}>\n                            <Col span={1}></Col>\n                            <Col span={22} className=\"optionText\">{r}</Col>\n                            <Col span={1}></Col>\n                        </Row>)\n                })}\n\n            </Col>\n        </Row>\n    )\n}\n\n\nexport function DataRowListEditable({ dataList, titleStr, typeName, editListCallback }: IDataRowListE) {\n\n    function deleteUl(id: number, list: string[]): string[] {\n        let updateArray = [...list];\n        updateArray.splice(id, 1);\n        message.info(id);\n        editListCallback(updateArray, typeName);\n        return updateArray;\n    }\n\n    function addUl(el: string, list: string[]): string[] {\n        let updateArray = [...list];\n        updateArray.splice(list.length, 0, el);\n        editListCallback(updateArray, typeName);\n        return updateArray;\n    }\n\n    function updateOptionsMenuCallBack(): JSX.Element {\n        let optList: string[] = [\"SuperAdmin\", \"CompanyAdmin\", \"ChiefRedactor\", \"Redactor\", \"Author\", \"Corrector\"]\n        return <Menu>\n            {optList.map((r, i) => {\n                return (\n                    <Menu.Item onClick={() => editListCallback(addUl(r, dataList), typeName)}>\n                        {r}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={4} ><Paragraph className='DataRowList'>\n                <ul>\n                    {dataList.map((r, i) => {\n                        return (\n\n                            <Button className=\"deleteButton\" danger\n                                type=\"dashed\"\n                                onClick={() => editListCallback(deleteUl(i, dataList), typeName)}\n\n                            >\n                                {r} <CloseOutlined />\n                            </Button>\n\n\n                        )\n                    })}\n\n                    <div>\n\n                        <Dropdown overlay={updateOptionsMenuCallBack()}>\n                            <Button\n                                type=\"dashed\"\n                                onClick={() => { }}\n                                style={{ width: '100%' }}\n                            >\n                                Добавить роль <PlusOutlined />\n                            </Button>\n                        </Dropdown>\n                    </div>\n                </ul>\n            </Paragraph></Col>\n        </Row>\n\n    )\n}\n\nexport default DataRow;",{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","severity":1,"message":"267","line":7,"column":10,"nodeType":"268","messageId":"269","endLine":7,"endColumn":18},{"ruleId":"266","severity":1,"message":"270","line":7,"column":20,"nodeType":"268","messageId":"269","endLine":7,"endColumn":28},{"ruleId":"271","severity":1,"message":"272","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":14},{"ruleId":"271","severity":1,"message":"273","line":3,"column":37,"nodeType":"268","messageId":"269","endLine":3,"endColumn":45},{"ruleId":"271","severity":1,"message":"274","line":3,"column":47,"nodeType":"268","messageId":"269","endLine":3,"endColumn":50},{"ruleId":"271","severity":1,"message":"275","line":3,"column":52,"nodeType":"268","messageId":"269","endLine":3,"endColumn":55},{"ruleId":"271","severity":1,"message":"276","line":3,"column":57,"nodeType":"268","messageId":"269","endLine":3,"endColumn":69},{"ruleId":"271","severity":1,"message":"277","line":5,"column":10,"nodeType":"268","messageId":"269","endLine":5,"endColumn":18},{"ruleId":"271","severity":1,"message":"278","line":6,"column":10,"nodeType":"268","messageId":"269","endLine":6,"endColumn":20},{"ruleId":"279","severity":1,"message":"280","line":9,"column":5,"nodeType":"281","messageId":"282","endLine":11,"endColumn":6},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"271","severity":1,"message":"283","line":1,"column":8,"nodeType":"268","messageId":"269","endLine":1,"endColumn":16},{"ruleId":"271","severity":1,"message":"284","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":26},{"ruleId":"271","severity":1,"message":"285","line":3,"column":26,"nodeType":"268","messageId":"269","endLine":3,"endColumn":31},{"ruleId":"271","severity":1,"message":"286","line":7,"column":8,"nodeType":"268","messageId":"269","endLine":7,"endColumn":17},{"ruleId":"271","severity":1,"message":"287","line":10,"column":9,"nodeType":"268","messageId":"269","endLine":10,"endColumn":19},{"ruleId":"271","severity":1,"message":"288","line":12,"column":10,"nodeType":"268","messageId":"269","endLine":12,"endColumn":16},{"ruleId":"271","severity":1,"message":"289","line":17,"column":9,"nodeType":"268","messageId":"269","endLine":17,"endColumn":15},{"ruleId":"271","severity":1,"message":"290","line":572,"column":13,"nodeType":"268","messageId":"269","endLine":572,"endColumn":20},{"ruleId":"266","severity":1,"message":"291","line":8,"column":10,"nodeType":"268","messageId":"269","endLine":8,"endColumn":15},{"ruleId":"266","severity":1,"message":"292","line":22,"column":27,"nodeType":"268","messageId":"269","endLine":22,"endColumn":31},{"ruleId":"266","severity":1,"message":"293","line":65,"column":15,"nodeType":"268","messageId":"269","endLine":65,"endColumn":27},{"ruleId":"266","severity":1,"message":"294","line":118,"column":11,"nodeType":"268","messageId":"269","endLine":118,"endColumn":23},{"ruleId":"295","severity":1,"message":"296","line":187,"column":1,"nodeType":"297","endLine":187,"endColumn":26},{"ruleId":"271","severity":1,"message":"283","line":1,"column":8,"nodeType":"268","messageId":"269","endLine":1,"endColumn":16},{"ruleId":"271","severity":1,"message":"284","line":2,"column":17,"nodeType":"268","messageId":"269","endLine":2,"endColumn":26},{"ruleId":"271","severity":1,"message":"298","line":3,"column":20,"nodeType":"268","messageId":"269","endLine":3,"endColumn":24},{"ruleId":"271","severity":1,"message":"285","line":3,"column":26,"nodeType":"268","messageId":"269","endLine":3,"endColumn":31},{"ruleId":"271","severity":1,"message":"276","line":3,"column":55,"nodeType":"268","messageId":"269","endLine":3,"endColumn":67},{"ruleId":"271","severity":1,"message":"299","line":5,"column":8,"nodeType":"268","messageId":"269","endLine":5,"endColumn":13},{"ruleId":"271","severity":1,"message":"286","line":7,"column":8,"nodeType":"268","messageId":"269","endLine":7,"endColumn":17},{"ruleId":"271","severity":1,"message":"300","line":8,"column":10,"nodeType":"268","messageId":"269","endLine":8,"endColumn":17},{"ruleId":"271","severity":1,"message":"289","line":11,"column":9,"nodeType":"268","messageId":"269","endLine":11,"endColumn":15},{"ruleId":"301","severity":1,"message":"302","line":17,"column":44,"nodeType":"303","messageId":"304","endLine":17,"endColumn":46},{"ruleId":"301","severity":1,"message":"302","line":34,"column":47,"nodeType":"303","messageId":"304","endLine":34,"endColumn":49},{"ruleId":"271","severity":1,"message":"305","line":1,"column":10,"nodeType":"268","messageId":"269","endLine":1,"endColumn":23},{"ruleId":"271","severity":1,"message":"306","line":3,"column":5,"nodeType":"268","messageId":"269","endLine":3,"endColumn":15},{"ruleId":"295","severity":1,"message":"296","line":86,"column":1,"nodeType":"297","endLine":86,"endColumn":51},{"ruleId":"266","severity":1,"message":"307","line":6,"column":5,"nodeType":"268","messageId":"269","endLine":6,"endColumn":16},{"ruleId":"266","severity":1,"message":"308","line":9,"column":5,"nodeType":"268","messageId":"269","endLine":9,"endColumn":22},{"ruleId":"266","severity":1,"message":"309","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":19},{"ruleId":"266","severity":1,"message":"310","line":24,"column":8,"nodeType":"268","messageId":"269","endLine":24,"endColumn":12},{"ruleId":"295","severity":1,"message":"296","line":126,"column":1,"nodeType":"297","endLine":126,"endColumn":47},{"ruleId":"266","severity":1,"message":"311","line":12,"column":6,"nodeType":"268","messageId":"269","endLine":12,"endColumn":18},{"ruleId":"266","severity":1,"message":"312","line":13,"column":6,"nodeType":"268","messageId":"269","endLine":13,"endColumn":19},{"ruleId":"266","severity":1,"message":"300","line":12,"column":6,"nodeType":"268","messageId":"269","endLine":12,"endColumn":13},{"ruleId":"266","severity":1,"message":"313","line":13,"column":6,"nodeType":"268","messageId":"269","endLine":13,"endColumn":16},{"ruleId":"266","severity":1,"message":"314","line":13,"column":6,"nodeType":"268","messageId":"269","endLine":13,"endColumn":16},{"ruleId":"266","severity":1,"message":"315","line":14,"column":6,"nodeType":"268","messageId":"269","endLine":14,"endColumn":19},{"ruleId":"266","severity":1,"message":"316","line":8,"column":6,"nodeType":"268","messageId":"269","endLine":8,"endColumn":19},{"ruleId":"266","severity":1,"message":"317","line":8,"column":6,"nodeType":"268","messageId":"269","endLine":8,"endColumn":16},{"ruleId":"266","severity":1,"message":"318","line":9,"column":5,"nodeType":"268","messageId":"269","endLine":9,"endColumn":17},{"ruleId":"266","severity":1,"message":"319","line":30,"column":9,"nodeType":"268","messageId":"269","endLine":30,"endColumn":15},{"ruleId":"266","severity":1,"message":"320","line":33,"column":9,"nodeType":"268","messageId":"269","endLine":33,"endColumn":14},{"ruleId":"266","severity":1,"message":"292","line":33,"column":16,"nodeType":"268","messageId":"269","endLine":33,"endColumn":20},{"ruleId":"266","severity":1,"message":"321","line":36,"column":6,"nodeType":"268","messageId":"269","endLine":36,"endColumn":13},{"ruleId":"266","severity":1,"message":"322","line":37,"column":6,"nodeType":"268","messageId":"269","endLine":37,"endColumn":13},{"ruleId":"266","severity":1,"message":"323","line":38,"column":6,"nodeType":"268","messageId":"269","endLine":38,"endColumn":10},{"ruleId":"266","severity":1,"message":"324","line":39,"column":6,"nodeType":"268","messageId":"269","endLine":39,"endColumn":10},{"ruleId":"266","severity":1,"message":"325","line":40,"column":6,"nodeType":"268","messageId":"269","endLine":40,"endColumn":12},{"ruleId":"266","severity":1,"message":"326","line":41,"column":6,"nodeType":"268","messageId":"269","endLine":41,"endColumn":7},{"ruleId":"327","severity":1,"message":"328","line":198,"column":9,"nodeType":"329","messageId":"330","endLine":198,"endColumn":67},{"ruleId":"327","severity":1,"message":"328","line":204,"column":9,"nodeType":"329","messageId":"330","endLine":204,"endColumn":68},{"ruleId":"331","severity":1,"message":"332","line":547,"column":52,"nodeType":"303","messageId":"333","endLine":547,"endColumn":53},{"ruleId":"334","severity":1,"message":"335","line":611,"column":9,"nodeType":"336","endLine":611,"endColumn":19},{"ruleId":"337","severity":1,"message":"338","line":31,"column":47,"nodeType":"339","messageId":"340","endLine":31,"endColumn":49},{"ruleId":"337","severity":1,"message":"338","line":30,"column":57,"nodeType":"339","messageId":"340","endLine":30,"endColumn":59},{"ruleId":"337","severity":1,"message":"338","line":48,"column":57,"nodeType":"339","messageId":"340","endLine":48,"endColumn":59},{"ruleId":"266","severity":1,"message":"317","line":15,"column":6,"nodeType":"268","messageId":"269","endLine":15,"endColumn":16},{"ruleId":"266","severity":1,"message":"318","line":15,"column":5,"nodeType":"268","messageId":"269","endLine":15,"endColumn":17},{"ruleId":"266","severity":1,"message":"341","line":17,"column":10,"nodeType":"268","messageId":"269","endLine":17,"endColumn":18},{"ruleId":"266","severity":1,"message":"342","line":17,"column":20,"nodeType":"268","messageId":"269","endLine":17,"endColumn":24},{"ruleId":"266","severity":1,"message":"343","line":17,"column":26,"nodeType":"268","messageId":"269","endLine":17,"endColumn":33},{"ruleId":"266","severity":1,"message":"344","line":17,"column":35,"nodeType":"268","messageId":"269","endLine":17,"endColumn":40},{"ruleId":"266","severity":1,"message":"345","line":20,"column":5,"nodeType":"268","messageId":"269","endLine":20,"endColumn":18},{"ruleId":"266","severity":1,"message":"346","line":21,"column":5,"nodeType":"268","messageId":"269","endLine":21,"endColumn":18},{"ruleId":"266","severity":1,"message":"314","line":34,"column":6,"nodeType":"268","messageId":"269","endLine":34,"endColumn":16},{"ruleId":"266","severity":1,"message":"315","line":35,"column":6,"nodeType":"268","messageId":"269","endLine":35,"endColumn":19},{"ruleId":"266","severity":1,"message":"347","line":36,"column":6,"nodeType":"268","messageId":"269","endLine":36,"endColumn":19},{"ruleId":"266","severity":1,"message":"348","line":37,"column":6,"nodeType":"268","messageId":"269","endLine":37,"endColumn":16},{"ruleId":"266","severity":1,"message":"349","line":303,"column":14,"nodeType":"268","messageId":"269","endLine":303,"endColumn":24},{"ruleId":"266","severity":1,"message":"350","line":430,"column":14,"nodeType":"268","messageId":"269","endLine":430,"endColumn":20},{"ruleId":"351","severity":1,"message":"352","line":684,"column":24,"nodeType":"336","messageId":"353","endLine":684,"endColumn":32},{"ruleId":"295","severity":1,"message":"296","line":914,"column":1,"nodeType":"297","endLine":914,"endColumn":39},{"ruleId":"266","severity":1,"message":"354","line":13,"column":6,"nodeType":"268","messageId":"269","endLine":13,"endColumn":13},{"ruleId":"266","severity":1,"message":"348","line":15,"column":6,"nodeType":"268","messageId":"269","endLine":15,"endColumn":16},{"ruleId":"337","severity":1,"message":"355","line":402,"column":63,"nodeType":"339","messageId":"356","endLine":402,"endColumn":65},{"ruleId":"337","severity":1,"message":"338","line":490,"column":47,"nodeType":"339","messageId":"340","endLine":490,"endColumn":49},{"ruleId":"327","severity":1,"message":"328","line":496,"column":29,"nodeType":"357","messageId":"330","endLine":496,"endColumn":35},{"ruleId":"327","severity":1,"message":"328","line":522,"column":29,"nodeType":"357","messageId":"330","endLine":522,"endColumn":35},{"ruleId":"327","severity":1,"message":"328","line":528,"column":29,"nodeType":"357","messageId":"330","endLine":528,"endColumn":35},{"ruleId":"266","severity":1,"message":"358","line":14,"column":9,"nodeType":"268","messageId":"269","endLine":14,"endColumn":13},{"ruleId":"266","severity":1,"message":"319","line":15,"column":9,"nodeType":"268","messageId":"269","endLine":15,"endColumn":15},{"ruleId":"266","severity":1,"message":"359","line":16,"column":9,"nodeType":"268","messageId":"269","endLine":16,"endColumn":18},{"ruleId":"266","severity":1,"message":"360","line":17,"column":9,"nodeType":"268","messageId":"269","endLine":17,"endColumn":13},{"ruleId":"266","severity":1,"message":"320","line":18,"column":9,"nodeType":"268","messageId":"269","endLine":18,"endColumn":14},{"ruleId":"266","severity":1,"message":"292","line":18,"column":16,"nodeType":"268","messageId":"269","endLine":18,"endColumn":20},{"ruleId":"266","severity":1,"message":"321","line":21,"column":6,"nodeType":"268","messageId":"269","endLine":21,"endColumn":13},{"ruleId":"266","severity":1,"message":"322","line":22,"column":6,"nodeType":"268","messageId":"269","endLine":22,"endColumn":13},{"ruleId":"266","severity":1,"message":"323","line":23,"column":6,"nodeType":"268","messageId":"269","endLine":23,"endColumn":10},{"ruleId":"266","severity":1,"message":"324","line":24,"column":6,"nodeType":"268","messageId":"269","endLine":24,"endColumn":10},{"ruleId":"266","severity":1,"message":"325","line":25,"column":6,"nodeType":"268","messageId":"269","endLine":25,"endColumn":12},{"ruleId":"337","severity":1,"message":"338","line":62,"column":33,"nodeType":"339","messageId":"340","endLine":62,"endColumn":35},{"ruleId":"301","severity":1,"message":"302","line":63,"column":51,"nodeType":"303","messageId":"304","endLine":63,"endColumn":53},{"ruleId":"337","severity":1,"message":"338","line":147,"column":47,"nodeType":"339","messageId":"340","endLine":147,"endColumn":49},{"ruleId":"301","severity":1,"message":"302","line":148,"column":51,"nodeType":"303","messageId":"304","endLine":148,"endColumn":53},{"ruleId":"295","severity":1,"message":"296","line":192,"column":1,"nodeType":"297","endLine":192,"endColumn":52},{"ruleId":"266","severity":1,"message":"344","line":10,"column":47,"nodeType":"268","messageId":"269","endLine":10,"endColumn":52},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"@typescript-eslint/no-unused-vars","'ArticleV' is defined but never used.","Identifier","unusedVar","'Redactor' is defined but never used.","no-unused-vars","'Form' is defined but never used.","'Checkbox' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'notification' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ReactDOM' is defined but never used.","'Component' is defined but never used.","'Input' is defined but never used.","'CheckList' is defined but never used.","'EditorCore' is defined but never used.","'throws' is defined but never used.","'Option' is assigned a value but never used.","'request' is assigned a value but never used.","'paths' is defined but never used.","'Text' is assigned a value but never used.","'randomValues' is assigned a value but never used.","'enterLoading' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Card' is defined but never used.","'axios' is defined but never used.","'getUser' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'resourceUsage' is defined but never used.","'userScoped' is assigned a value but never used.","'UsbOutlined' is defined but never used.","'AreaChartOutlined' is defined but never used.","'Infographic' is defined but never used.","'Task' is defined but never used.","'getCompanies' is defined but never used.","'deleteCompany' is defined but never used.","'deleteUser' is defined but never used.","'getArticle' is defined but never used.","'deleteArticle' is defined but never used.","'updateCompany' is defined but never used.","'addCompany' is defined but never used.","'PlusOutlined' is defined but never used.","'Search' is assigned a value but never used.","'Title' is assigned a value but never used.","'company' is defined but never used.","'article' is defined but never used.","'role' is defined but never used.","'task' is defined but never used.","'emploe' is defined but never used.","'t' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'message' is defined but never used.","'Space' is defined but never used.","'CheckOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","'updateArticle' is defined but never used.","'addArticle' is defined but never used.","'isDragging' is assigned a value but never used.","'isOver' is assigned a value but never used.","no-self-assign","'gridel.x' is assigned to itself.","selfAssignment","'addUser' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","BreakStatement","'Step' is assigned a value but never used.","'Paragraph' is assigned a value but never used.","'Meta' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]