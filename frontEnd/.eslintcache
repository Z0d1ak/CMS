[{"G:\\GIT\\CMS\\frontEnd\\src\\index.tsx":"1","G:\\GIT\\CMS\\frontEnd\\src\\reportWebVitals.ts":"2","G:\\GIT\\CMS\\frontEnd\\src\\App.tsx":"3","G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\mainPart\\mainPart.tsx":"4","G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx":"5","G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx":"6","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\employee\\employee.tsx":"7","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\article\\article.tsx":"8","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\infographics\\infographics.tsx":"9","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\company\\company.tsx":"10","G:\\GIT\\CMS\\frontEnd\\src\\login\\login.tsx":"11","G:\\GIT\\CMS\\frontEnd\\src\\settings\\settings.tsx":"12","G:\\GIT\\CMS\\frontEnd\\src\\profile\\profile.tsx":"13","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\role\\role.tsx":"14","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx":"15","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx":"16","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx":"17","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx":"18","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx":"19","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx":"20","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx":"21","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx":"22","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx":"23","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx":"24","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx":"25","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx":"26","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\task\\task.tsx":"27","G:\\GIT\\CMS\\frontEnd\\src\\redactor\\redactor.tsx":"28"},{"size":565,"mtime":1616364852000,"results":"29","hashOfConfig":"30"},{"size":440,"mtime":1616364852000,"results":"31","hashOfConfig":"30"},{"size":1160,"mtime":1616505314000,"results":"32","hashOfConfig":"30"},{"size":2666,"mtime":1616364852000,"results":"33","hashOfConfig":"30"},{"size":3240,"mtime":1616364852000,"results":"34","hashOfConfig":"30"},{"size":2053,"mtime":1616364852000,"results":"35","hashOfConfig":"30"},{"size":15328,"mtime":1616505314000,"results":"36","hashOfConfig":"30"},{"size":12706,"mtime":1616364852000,"results":"37","hashOfConfig":"30"},{"size":284,"mtime":1616364852000,"results":"38","hashOfConfig":"30"},{"size":13231,"mtime":1616364852000,"results":"39","hashOfConfig":"30"},{"size":5468,"mtime":1616364852000,"results":"40","hashOfConfig":"30"},{"size":2435,"mtime":1616364852000,"results":"41","hashOfConfig":"30"},{"size":7776,"mtime":1616364852000,"results":"42","hashOfConfig":"30"},{"size":11215,"mtime":1616364852000,"results":"43","hashOfConfig":"30"},{"size":2357,"mtime":1616364852000,"results":"44","hashOfConfig":"30"},{"size":1531,"mtime":1616364852000,"results":"45","hashOfConfig":"30"},{"size":4922,"mtime":1616364852000,"results":"46","hashOfConfig":"30"},{"size":809,"mtime":1616364852000,"results":"47","hashOfConfig":"30"},{"size":2104,"mtime":1616364852000,"results":"48","hashOfConfig":"30"},{"size":2412,"mtime":1616364852000,"results":"49","hashOfConfig":"30"},{"size":3597,"mtime":1616364852000,"results":"50","hashOfConfig":"30"},{"size":15484,"mtime":1616364852000,"results":"51","hashOfConfig":"30"},{"size":1174,"mtime":1616364852000,"results":"52","hashOfConfig":"30"},{"size":25175,"mtime":1616505314000,"results":"53","hashOfConfig":"30"},{"size":6488,"mtime":1616364852000,"results":"54","hashOfConfig":"30"},{"size":5160,"mtime":1616364852000,"results":"55","hashOfConfig":"30"},{"size":23594,"mtime":1616364852000,"results":"56","hashOfConfig":"30"},{"size":28591,"mtime":1616504848000,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1sejz7x",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"60"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"60"},"G:\\GIT\\CMS\\frontEnd\\src\\index.tsx",[],["135","136"],"G:\\GIT\\CMS\\frontEnd\\src\\reportWebVitals.ts",[],"G:\\GIT\\CMS\\frontEnd\\src\\App.tsx",["137"],"G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\mainPart\\mainPart.tsx",[],"G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx",["138"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './leftMenu.css';\r\nimport {Layout, Menu} from 'antd';\r\nimport {\r\n    UsbOutlined,\r\n    SnippetsOutlined,\r\n    IdcardOutlined,\r\n    AreaChartOutlined,\r\n    BankOutlined,\r\n    FunctionOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport {\r\n    Link,\r\n    Route\r\n  } from \"react-router-dom\";\r\n\r\n\r\nimport Employees from \"../../contentOptions/employee/employee\"\r\nimport Company from \"../../contentOptions/company/company\"\r\nimport Article from \"../../contentOptions/article/article\"\r\nimport Infographic from \"../../contentOptions/infographics/infographics\"\r\nimport Task from \"../../contentOptions/task/task\"\r\nimport Role from '../../contentOptions/role/role';\r\n\r\n\r\n\r\n\r\n/**\r\n * Интерфейс для построения меню.\r\n * @param text Текст-пояснение к иконке\r\n * @param link Ссылка в рамках React Router.\r\n * @param icon Иконка.\r\n * @param component Генерируемый по нажатию компонент в поле Content в Layout.\r\n */\r\ninterface menuOpt {\r\n    text:string;\r\n    link:string;\r\n    icon:JSX.Element;\r\n    component:JSX.Element;\r\n}\r\n\r\n/**\r\n * Массив опций меню\r\n */\r\nconst leftMenuContent: Array<menuOpt> = [ \r\n    {text:\"В работе\",link:\"/home/inwork\", icon:<UsbOutlined/>,component: <Task/>},\r\n    {text:\"Статьи\",link:\"/home/alltexts\", icon:<SnippetsOutlined />,component:< Article/>},\r\n    {text:\"Компании\",link:\"/home/company\", icon:<BankOutlined />,component: <Company/>},\r\n    {text:\"Роли\",link:\"/home/role\", icon:<FunctionOutlined />,component:<Role/>},\r\n    {text:\"Сотрудники\",link:\"/home/emplo\", icon:<IdcardOutlined />,component:<Employees/>},\r\n    {text:\"Инфографика\",link:\"/home/info\", icon:<AreaChartOutlined />,component:<Infographic/>}\r\n];  \r\n\r\n\r\n/**\r\n * Сбор всех ссылок для React-router, для родительского компонента\r\n */\r\nexport function getLinksLeftMenu() {\r\n    return (\r\n        leftMenuContent.map((r, i) => {\r\n            return (\r\n                <Route path={r.link}  key={\"ll\"+i} >\r\n                    {r.component}\r\n                </Route>\r\n            )\r\n        })\r\n    );\r\n};\r\n\r\n\r\n/**\r\n * Генерирует компонент меню на основе масива\r\n */\r\nfunction generateMenu() {\r\n    return (<Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['2']}>\r\n        {leftMenuContent.map((r, i) => {\r\n            return (\r\n                <Menu.Item key={i+\"lm\"} icon={r.icon}>\r\n                    <Link to={r.link}>{r.text}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })}\r\n    </Menu>);\r\n};\r\n\r\n/**\r\n * Компонент левого меню.\r\n * @param collapsed Состояние меню (расшиернное/суженное)\r\n */\r\nexport class LeftMenu extends React.Component<{collapsed:boolean},{}> {\r\n    render() {\r\n        return (\r\n                <Layout.Sider trigger={null} collapsible collapsed={this.props.collapsed}>\r\n                    <div className=\"logo\" />\r\n                    {generateMenu()}\r\n                </Layout.Sider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default {getLinksLeftMenu,LeftMenu}; \r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx",["139"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './avatarMenu.css';\r\nimport { Menu} from 'antd';\r\nimport {\r\n    Link,\r\n    Route\r\n  } from \"react-router-dom\";\r\n  import {Dropdown} from 'antd';\r\nimport {Avatar} from 'antd';\r\nimport {\r\n    UserOutlined\r\n} from '@ant-design/icons';\r\n\r\n/**\r\n * Интерфейс для построения меню.\r\n * @param text Текст-пояснение опции\r\n * @param link Ссылка в рамках React Router.\r\n */\r\ninterface menuOpt {\r\n    text:string;\r\n    link:string;\r\n}\r\n\r\n/**\r\n * Массив опций меню\r\n */\r\nconst avatarMenuContent: Array<menuOpt> = [ \r\n    {text:\"Профиль\",link:\"/profile\"},\r\n    {text:\"Настройки\",link:\"/settings\"},\r\n    {text:\"Выход\",link:\"/login\"},\r\n];  \r\n\r\n\r\n/**\r\n * Сбор всех ссылок для React-router, для родительского компонента\r\n */\r\nexport function getLinksAvatarMenu() {\r\n    return (\r\n        avatarMenuContent.map((r, i) => {\r\n            return (\r\n                <Route path={r.link} key={\"al\"+i}>\r\n\r\n                </Route>\r\n            )\r\n        })\r\n    );\r\n};\r\n\r\n\r\n/**\r\n * Генерирует компонент меню на основе масива\r\n */\r\nfunction generateMenu() {\r\n    return (\r\n        avatarMenuContent.map((r, i) => {\r\n            return (\r\n                <Menu.Item key={i+\"am\"}>\r\n                    <Link to={r.link}>{r.text}</Link>\r\n                </Menu.Item>\r\n            )\r\n        }\r\n    ));\r\n};\r\n\r\n\r\n/**\r\n * Компонент меню при значке аватара.\r\n */\r\nexport class AvatarMenu extends React.Component<{},{}> {\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <Dropdown overlay={\r\n                <Menu>\r\n                   {generateMenu()}\r\n                </Menu>\r\n            } placement=\"bottomLeft\">\r\n                <Avatar className=\"userBox\" size={40} icon={<UserOutlined />}/>\r\n            </Dropdown>\r\n             );\r\n    }\r\n}\r\n\r\nexport default {getLinksAvatarMenu,AvatarMenu}; \r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\employee\\employee.tsx",["140","141","142","143"],"import React from 'react';\r\nimport './employee.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Row, Col,notification} from 'antd';\r\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\r\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\r\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\r\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\r\n\r\ntype getUser=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\ntype deleteUser=paths[\"/api/User/{id}\"][\"delete\"][\"parameters\"][\"path\"]\r\ntype updateUser=paths[\"/api/User\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\ntype addUser=paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\n/**\r\n * Класс компонента компаний\r\n */\r\nexport class Company extends React.Component<{},{}> {\r\n\r\n  \r\n\r\n    state={\r\n        dataType:\"employee\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/User\",\r\n        NameStartsWith: \"\",\r\n        EmailStartsWith:\"\",\r\n        FirstNameStartsWith: \"\",\r\n        LastNameStartsWith:\"\",\r\n\r\n        SortingColumn: \"FirstName\",\r\n        SortingColumnOptions:[\"FirstName\",\"LastName\",\"Email\"],\r\n\r\n        SortDirection: \"Ascending\",\r\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\r\n\r\n        Roles:\"All\",\r\n        RolesOptions:[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"],\r\n\r\n        QuickSearch: \"\",\r\n        PageLimit: 10,\r\n        PageNumber: 1,\r\n\r\n        SearchBy:\"All\",\r\n\r\n        optionName:[\"SearchBy\",\"Roles\"],\r\n        optionList:[[\"FirstName\",\"LastName\",\"Email\",\"All\"],[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\",\"All\"]],\r\n        text:[\"Искать по\",\"Входит в \"],\r\n\r\n        count: 0,\r\n        items: [\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"1\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"2\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"3\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n            {\r\n                id: \"\",\r\n                email: \"\",\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                roles: []\r\n            },\r\n        ],\r\n        loading:false\r\n    }\r\n\r\n\r\n\r\n\r\n    isNull=(val:string):boolean=>{\r\n        return val===\"\"||val===\"All\"||val===null;\r\n    }\r\n\r\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\r\n        if (callback !== undefined) \r\n        this.setState({[type]:val},callback)  \r\n        else this.setState({[type]:val})    \r\n    }\r\n\r\n    delete=(val:string)=>{\r\n       // console.log(this.state.items[val]);\r\n        axios.delete(\r\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Удаление прошло успешно',\r\n                description:\r\n                  'Сотрудник с id:'+val+\" был удален\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для удаления сотрудника\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Пользователь с id:\"+ val+\" не найден\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    create=(val:addUser)=>{\r\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            \r\n            this.update();\r\n            notification.success({\r\n                message: 'Создание прошло успешно',\r\n                description:\r\n                  'Сотрудник с id:'+val.id+\" был успешно создан\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для создания сотрудника\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateData=(val:updateUser)=>{\r\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные сотрудника с id:'+val.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных сотрудника\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Сотрудника с id:'+val.id+\" не найден\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    \r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=\"?\";\r\n        request+=\"&PageLimit=\"+this.state.PageLimit;\r\n        request+=\"&PageNumber=\"+this.state.PageNumber;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&EmailStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&LastNameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&FirstNameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\r\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\r\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\r\n        request+=this.isNull(this.state.Roles)?\"\":\"&Role=\"+this.state.Roles;\r\n        axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n\r\n            this.setState({count:res.data.count})\r\n            this.setState({items:res.data.items})\r\n            this.setState({loading:false});\r\n        })\r\n        .catch(err => { \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для получения данных\",\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      }); \r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n \r\n\r\n    \r\n    setCountItems=(val:number)=>{\r\n        this.setState({count:val})\r\n    }\r\n\r\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\r\n        if (page===0){\r\n            this.setState({PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            this.setState({PageNumber:page},()=>this.update());\r\n        }\r\n    }\r\n    \r\n    onMaxItemsChange=(current: number, size: number)=>{\r\n        //console.log(current);\r\n        if (current===0){\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <FilterEntity\r\n                dataType={this.state.dataType}\r\n                updateCallback={this.update}\r\n                changeValueCallback={this.changeValue}\r\n                SortDirection={this.state.SortDirection}\r\n                SortDirectionOptions={this.state.SortDirectionOptions}\r\n                SortingColumn={this.state.SortingColumn}\r\n                SortingColumnOptions={this.state.SortingColumnOptions}\r\n                option={[this.state.SearchBy,this.state.Roles]}\r\n                optionName={this.state.optionName}\r\n                optionList={this.state.optionList}\r\n                text={this.state.text}\r\n                />\r\n                <AddEntity\r\n                createCallback={this.create}\r\n                dataType={this.state.dataType}\r\n                /> \r\n                <DataEntity \r\n                dataType={this.state.dataType}\r\n                loading={this.state.loading}    \r\n                updateDataCallback={this.updateData} \r\n                deleteCallback={this.delete} \r\n                updateCallback={this.update} \r\n                changeValueCallback={this.changeValue} \r\n                items={this.state.items}/>  \r\n                <PaginationEntity \r\n                countItems={this.state.count}\r\n                onPageChange={this.onPageChange}\r\n                onMaxItemsChange={this.onMaxItemsChange}/> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n        \r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Company;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\article\\article.tsx",["144","145","146","147","148"],"import React from 'react';\r\nimport './article.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Row, Col, notification} from 'antd';\r\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\r\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\r\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\r\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\r\n\r\ntype getArticle=paths[\"/api/Article\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\ntype deleteArticle=paths[\"/api/Article/{id}\"][\"delete\"][\"parameters\"][\"path\"]\r\ntype updateArticle=paths[\"/api/Article\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\ntype addArticle=paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\n/**\r\n * Класс компонента компаний\r\n */\r\nexport class Article extends React.Component<{},{}> {\r\n\r\n  \r\n\r\n    state={\r\n        dataType:\"article\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/Article\",\r\n        NameStartsWith: \"\",\r\n\r\n        SortingColumn: \"Title\",\r\n        SortingColumnOptions:[\"DeadLine\",\"Title\",\"CreationDate\",\"State\",\"TaskType\"],\r\n\r\n        SortDirection: \"Ascending\",\r\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\r\n\r\n        QuickSearch: \"\",\r\n        PageLimit: 10,\r\n        PageNumber: 1,\r\n\r\n        SearchBy:\"All\",\r\n\r\n        optionName:[\"SearchBy\"],\r\n        optionList:[[\"Name\",\"All\",\"Assigne\",\"Author\"]],\r\n        text:[\"Искать по\"],\r\n\r\n        count: 0,\r\n        items: [\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n        ],\r\n        loading:false\r\n    }\r\n\r\n    isNull=(val:string):boolean=>{\r\n        return val===\"\";\r\n    }\r\n\r\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\r\n        if (callback !== undefined) \r\n        this.setState({[type]:val},callback)  \r\n        else this.setState({[type]:val})    \r\n    }\r\n\r\n    delete=(val:string)=>{\r\n        axios.delete(\r\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Удаление прошло успешно',\r\n                description:\r\n                  'Компания с id:'+val+\" была удалена\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для удаления статьи\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Статья с id:\"+ val+\" не найдена\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    create=(val:addArticle)=>{\r\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Создание прошло успешно',\r\n                description:\r\n                  'Статья с id:'+val.id+\" была успешно создана\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            console.log(err); \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для создания статьи\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateData=(val:updateArticle)=>{\r\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные статьи с id:'+val.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        console.log(err); \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных статьи\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Статья с id:'+val.id+\" не найдена\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=\"?\";\r\n        request+=\"&PageLimit=\"+this.state.PageLimit;\r\n        request+=\"&PageNumber=\"+this.state.PageNumber;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\r\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\r\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\r\n        /*axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({count:res.data.count})\r\n            this.setState({items:res.data.items})\r\n            this.setState({loading:false});\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    console.log(\"401\"); \r\n                    break;\r\n                }\r\n                default:{\r\n                    console.log(\"Undefined error\"); \r\n                    break;\r\n                }\r\n            }\r\n        })*/\r\n        this.setState({count:10})\r\n        this.setState({items:[\r\n            {\r\n                \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                \"initiator\": {\r\n                  \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                  \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                  \"email\": \"user@example.com\",\r\n                  \"firstName\": \"string\",\r\n                  \"lastName\": \"string\",\r\n                  \"roles\": [\r\n                    \"SuperAdmin\"\r\n                  ]\r\n                },\r\n                \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                \"state\": \"Project\",\r\n                \"title\": \"string\",\r\n                \"content\": \"string\",\r\n                \"tasks\": [\r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  }\r\n                ]\r\n              }\r\n\r\n\r\n\r\n        ]})\r\n        this.setState({loading:false});\r\n    }\r\n\r\n \r\n\r\n    \r\n    setCountItems=(val:number)=>{\r\n        this.setState({count:val})\r\n    }\r\n\r\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\r\n        if (page===0){\r\n            this.setState({PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            this.setState({PageNumber:page},()=>this.update());\r\n        }\r\n    }\r\n    \r\n    onMaxItemsChange=(current: number, size: number)=>{\r\n        //console.log(current);\r\n        if (current===0){\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <FilterEntity\r\n                dataType={this.state.dataType}\r\n                updateCallback={this.update}\r\n                changeValueCallback={this.changeValue}\r\n                SortDirection={this.state.SortDirection}\r\n                SortDirectionOptions={this.state.SortDirectionOptions}\r\n                SortingColumn={this.state.SortingColumn}\r\n                SortingColumnOptions={this.state.SortingColumnOptions}\r\n                option={[this.state.SearchBy]}\r\n                optionName={this.state.optionName}\r\n                optionList={this.state.optionList}\r\n                text={this.state.text}\r\n                />\r\n                <AddEntity\r\n                dataType={this.state.dataType}\r\n                createCallback={this.create}\r\n                /> \r\n                <DataEntity \r\n                dataType={this.state.dataType}\r\n                loading={this.state.loading}    \r\n                updateDataCallback={this.updateData} \r\n                deleteCallback={this.delete} \r\n                updateCallback={this.update} \r\n                changeValueCallback={this.changeValue} \r\n                items={this.state.items}/>  \r\n                <PaginationEntity \r\n                countItems={this.state.count}\r\n                onPageChange={this.onPageChange}\r\n                onMaxItemsChange={this.onMaxItemsChange}/> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n        \r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Article;\r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\infographics\\infographics.tsx",[],"G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\company\\company.tsx",["149","150","151","152"],"import React from 'react';\r\nimport './company.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Row, Col,notification} from 'antd';\r\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\r\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\r\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\r\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\r\n\r\ntype getCompanies=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\ntype deleteCompany=paths[\"/api/Company/{id}\"][\"delete\"][\"parameters\"][\"path\"]\r\ntype updateCompany=paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\n/**\r\n * Класс компонента компаний\r\n */\r\nexport class Company extends React.Component<{},{}> {\r\n\r\n  \r\n\r\n    state={\r\n        dataType:\"company\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/Company\",\r\n        NameStartsWith: \"\",\r\n\r\n        SortingColumn: \"Name\",\r\n        SortingColumnOptions:[\"Name\"],\r\n\r\n        SortDirection: \"Ascending\",\r\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\r\n\r\n        QuickSearch: \"\",\r\n        PageLimit: 10,\r\n        PageNumber: 1,\r\n\r\n        SearchBy:\"All\",\r\n\r\n        optionName:[\"SearchBy\"],\r\n        optionList:[[\"Name\",\"All\"]],\r\n        text:[\"Искать по\"],\r\n\r\n        count: 0,\r\n        items: [\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n        ],\r\n        loading:false\r\n    }\r\n\r\n    isNull=(val:string):boolean=>{\r\n        return val===\"\";\r\n    }\r\n\r\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\r\n        if (callback !== undefined) \r\n        this.setState({[type]:val},callback)  \r\n        else this.setState({[type]:val})    \r\n    }\r\n\r\n    delete=(val:string)=>{\r\n        axios.delete(\r\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Удаление прошло успешно',\r\n                description:\r\n                  'Компания с id:'+val+\" была удалена\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для удаления компании\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Компания с id:\"+ val+\" не найдена\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    create=(val:addCompany)=>{\r\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Создание прошло успешно',\r\n                description:\r\n                  'Компания с id:'+val.company.id+\" была успешно создана\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для создания компании\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateData=(val:updateCompany)=>{\r\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные сотрудника с id:'+val.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных компании\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Компания с id:'+val.id+\" не найдена\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=\"?\";\r\n        request+=\"&PageLimit=\"+this.state.PageLimit;\r\n        request+=\"&PageNumber=\"+this.state.PageNumber;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\r\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\r\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\r\n        axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.setState({count:res.data.count})\r\n            this.setState({items:res.data.items})\r\n            this.setState({loading:false});\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      }); \r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n \r\n\r\n    \r\n    setCountItems=(val:number)=>{\r\n        this.setState({count:val})\r\n    }\r\n\r\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\r\n        if (page===0){\r\n            this.setState({PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            this.setState({PageNumber:page},()=>this.update());\r\n        }\r\n    }\r\n    \r\n    onMaxItemsChange=(current: number, size: number)=>{\r\n        //console.log(current);\r\n        if (current===0){\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <FilterEntity\r\n                dataType={this.state.dataType}\r\n                updateCallback={this.update}\r\n                changeValueCallback={this.changeValue}\r\n                SortDirection={this.state.SortDirection}\r\n                SortDirectionOptions={this.state.SortDirectionOptions}\r\n                SortingColumn={this.state.SortingColumn}\r\n                SortingColumnOptions={this.state.SortingColumnOptions}\r\n                option={[this.state.SearchBy]}\r\n                optionName={this.state.optionName}\r\n                optionList={this.state.optionList}\r\n                text={this.state.text}\r\n                />\r\n                <AddEntity\r\n                dataType={this.state.dataType}\r\n                createCallback={this.create}\r\n                /> \r\n                <DataEntity \r\n                dataType={this.state.dataType}\r\n                loading={this.state.loading}    \r\n                updateDataCallback={this.updateData} \r\n                deleteCallback={this.delete} \r\n                updateCallback={this.update} \r\n                changeValueCallback={this.changeValue} \r\n                items={this.state.items}/>  \r\n                <PaginationEntity \r\n                countItems={this.state.count}\r\n                onPageChange={this.onPageChange}\r\n                onMaxItemsChange={this.onMaxItemsChange}/> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n        \r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Company;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\login\\login.tsx",["153","154"],"import React from 'react';\r\nimport './login.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Form, Input, Button, Checkbox, Col, Row,notification} from 'antd';\r\nimport axios from 'axios'\r\nimport {paths,/*components,operations*/ } from \"../swaggerCode/swaggerCode\"\r\nimport  { useState } from 'react';\r\n  import {useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst pathBase:string =\"https://hse-cms.herokuapp.com\";\r\n\r\ntype authenticationData = paths[\"/api/Auth/login\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"];\r\n\r\ntype field=\r\n    {\r\n        name: string[];\r\n        value: string,\r\n    };\r\n\r\n  export class Login extends React.Component<{},{fields:field[]}> {\r\n      constructor(props:{}) {\r\n        super(props);\r\n        this.state = {\r\n            fields:[\r\n            {\r\n                name: ['username'],\r\n                value: 'admin@admin.com',\r\n            },\r\n            {\r\n                name: ['password'],\r\n                value: 'Master1234',\r\n            }\r\n            ]\r\n        };\r\n      }\r\n\r\n\r\n    setFields (newFields:any) {\r\n        this.setState({ fields:newFields });\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <LoginForm  fields={this.state.fields} onChangeFields={(newFields:field[]) => {this.setFields(newFields);}}/> \r\n        );\r\n    }\r\n  }\r\n\r\n \r\n\r\n\r\n    \r\n\r\n    const LoginForm = (props:{fields:field[],onChangeFields:(newFields:any)=>void })=> {\r\n\r\n\r\n        const [loadings, setLoadings] = useState(false);\r\n        const history = useHistory();\r\n\r\n        const onFinish = () => {\r\n            \r\n            let auth:authenticationData={email:props.fields[0].value,password:props.fields[1].value}\r\n            axios.post(pathBase+\"/api/Auth/login\",auth)\r\n            .then(res => {\r\n                console.log(res);\r\n                sessionStorage.setItem('AuthUserId', res.data.user.id);\r\n                sessionStorage.setItem('AuthUserSecurityToken', res.data.securityToken);\r\n                history.push(\"/home/inwork\");\r\n            })\r\n            .catch(err => {  \r\n                switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      }); \r\n                    break;\r\n                }\r\n            }\r\n                setLoadings(false);\r\n              })\r\n\r\n        };\r\n    \r\n        const onFinishFailed = () => {\r\n            console.log('Failed:', \"1\");\r\n        };\r\n\r\n        const enterLoading = (index:any) => {\r\n            \r\n          };\r\n\r\n\r\n        return (\r\n            <div className=\"loginForm\">\r\n\r\n            <Row>\r\n                <Col span={7}></Col>\r\n                <Col span={8}>\r\n              <Form {...layout}\r\n                  name=\"authentication\"\r\n                  initialValues={{\r\n                      remember: true,\r\n                  }}\r\n                  onFinish={onFinish}\r\n                  fields={props.fields}\r\n                  onFieldsChange={(_, allFields) => {\r\n                    props.onChangeFields(allFields);\r\n                  }}\r\n                  onFinishFailed={onFinishFailed}\r\n              >\r\n                  <Form.Item\r\n                      label=\"Логин\"\r\n                      name=\"username\"\r\n                      rules={[\r\n                          {\r\n                              required: true,\r\n                              type:'email',\r\n                              message: 'Пожалуйста введите логин!',\r\n                          },\r\n                      ]}\r\n                  >\r\n                      <Input disabled={loadings}></Input>\r\n                  </Form.Item>\r\n\r\n                  <Form.Item\r\n                      label=\"Пароль\"\r\n                      name=\"password\"\r\n                      rules={[\r\n                          {\r\n                              required: true,\r\n                              message: 'Пожалуйста введите пароль!',\r\n                          },\r\n                      ]}\r\n                  >\r\n                  <Input.Password  disabled={loadings}></Input.Password>\r\n                  </Form.Item>\r\n\r\n                  <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n                      <Checkbox>Запомнить меня</Checkbox>\r\n                  </Form.Item>\r\n\r\n                  <Form.Item {...tailLayout}>\r\n                  <Button type=\"primary\" loading={loadings}  onClick={()=>setLoadings(true)} className=\"buttonLogin\" htmlType=\"submit\">\r\n                    Войти\r\n                    </Button>\r\n                  </Form.Item>\r\n              </Form>\r\n            </Col>\r\n      <Col span={9}></Col>\r\n            </Row>\r\n            </div>\r\n        );\r\n      };\r\n\r\n  \r\n    \r\nexport default {Login};\r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\settings\\settings.tsx",["155","156","157","158","159","160","161","162"],"import React from 'react';\r\nimport './settings.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Layout,BackTop,Row,Col,Button} from 'antd';\r\nimport {\r\n    RollbackOutlined,\r\n    CloseOutlined,\r\n    PlusOutlined\r\n} from '@ant-design/icons';\r\nimport {\r\n    Link,\r\n    Route,\r\n    withRouter\r\n  } from \"react-router-dom\";\r\n\r\n  import {useHistory} from \"react-router-dom\";\r\n  import {Dropdown, Menu, message, Typography,Space} from \"antd\";\r\nconst { Paragraph } = Typography;\r\n  \r\n/**\r\n * Класс компонента настроек пользователя\r\n */\r\nexport class Settings extends React.Component<{},{}> {\r\n\r\n\r\n       render() {\r\n        \r\n        return(\r\n            \r\n            <Layout className=\"site-layout whole-layout\">\r\n            <Layout.Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n\r\n            </Layout.Header>\r\n            <Layout.Content\r\n                        className=\"site-layout-background\"\r\n                        style={{\r\n                            margin: '24px 16px',\r\n                            padding: 24,\r\n                        }}\r\n                    >\r\n                        <Row gutter={[0, 48]}>\r\n                            <Col span={1}></Col>\r\n                        </Row>\r\n                        <Row gutter={[0, 48]}>\r\n                            <Col span={1}></Col>\r\n                            \r\n                            <Link to=\"/home/inwork\">\r\n                        <Button icon={<RollbackOutlined style={{ fontSize: '20px'}}/>} onClick={() =>{ \r\n                            console.log(\"back\");\r\n                        }}>\r\n                        \r\n                        \r\n                        </Button>\r\n                        </Link>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={1}></Col>\r\n                            Здесь будет настройки сервиса\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={1}></Col>\r\n                            <RolesList data={[\"a\",\"b\",\"c\",\"d\"]}></RolesList>\r\n                        </Row>\r\n                        <BackTop>\r\n                            <div className=\"BackUp\">Вверх</div>\r\n                        </BackTop>\r\n                    </Layout.Content>\r\n            </Layout>\r\n            );\r\n\r\n    }\r\n}\r\n\r\nexport class RolesList extends React.Component<{data:string[]},{}> {\r\n\r\n    state=\r\n    {\r\n        data:this.props.data\r\n    }\r\n\r\n    deleteUl(id:number):string[] {\r\n        console.log(\"del\"+id);\r\n        let updateArray = [...this.state.data];\r\n        updateArray.splice(id, 1);\r\n        console.log(updateArray);\r\n        this.setState({data:updateArray});\r\n        return updateArray;\r\n    }\r\n\r\n    addUl(el:string):string[] {\r\n        console.log(\"add\"+el);\r\n        let updateArray = [...this.state.data];\r\n        updateArray.splice(this.state.data.length,0,el );\r\n        console.log(updateArray);\r\n        this.setState({data:updateArray});\r\n        return updateArray;\r\n    }\r\n\r\n    updateOptionsMenuCallBack():JSX.Element {\r\n        let optList:string[]=[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"]\r\n        return <Menu>\r\n            {optList.map((r, i) => {\r\n                if(this.state.data.indexOf( r ) == -1 )\r\n                return (\r\n                    \r\n                    <Menu.Item onClick={()=>this.addUl(r)}>\r\n                        {r}\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n        \r\n    }\r\n\r\n    render() {\r\n     \r\n     return(\r\n        <div>\r\n            {this.state.data.map((d, i) => {\r\n                return (\r\n                <Button  key={i+\"dl\"} className=\"deleteButton\" danger\r\n                                    type=\"dashed\"\r\n                                    onClick={()=>this.deleteUl(i)}\r\n                  >\r\n                        {d} <CloseOutlined />\r\n                </Button>\r\n                )\r\n            })}\r\n            <Dropdown overlay={this.updateOptionsMenuCallBack()}>\r\n            <Button\r\n                type=\"dashed\"\r\n                onClick={() => {}}\r\n                style={{ width: '100%' }}\r\n                >\r\n                Добавить роль <PlusOutlined />\r\n              </Button>\r\n            </Dropdown>\r\n        </div>\r\n     ); \r\n    }\r\n}\r\n\r\nexport default Settings;\r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\profile\\profile.tsx",["163","164","165","166","167","168","169","170","171","172","173","174"],"import React from 'react';\r\nimport './profile.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Layout,BackTop,Row,Col,Button} from 'antd';\r\nimport {\r\n    RollbackOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport {\r\n    Route,\r\n    withRouter\r\n  } from \"react-router-dom\";\r\n  import { paths } from '../swaggerCode/swaggerCode';\r\n  import { Divider } from 'antd';\r\n  import {useHistory} from \"react-router-dom\";\r\n  import axios from 'axios';\r\n  import { Avatar } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n // type userData=paths[\"/api/User/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n\r\n import {Dropdown, Menu, message, Typography,Space} from \"antd\";\r\n const { Title, Paragraph, Text} = Typography;\r\n\r\n\r\n  type userData = paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0];\r\n  \r\n  type companyData = paths[\"/api/Company/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"];\r\n\r\n/**\r\n * Класс компонента профиля пользователя\r\n */\r\nexport class Profile extends React.Component<{},{}> {\r\n    state={\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        userD:{\r\n            id: \"\",\r\n            companyId:\"\",\r\n            email: \"\",\r\n            firstName:\"\",\r\n            lastName: \"\",\r\n            roles: []\r\n        },\r\n        companyD : {\r\n            id: \"\",\r\n            name: \"\"\r\n        },\r\n        loading:true\r\n\r\n    }\r\n       render() {\r\n        return(       \r\n        <Layout className=\"site-layout whole-layout\">\r\n        <Layout.Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n\r\n        </Layout.Header>\r\n        <Layout.Content\r\n                    className=\"site-layout-background\"\r\n                    style={{\r\n                        margin: '24px 16px',\r\n                        padding: 24,\r\n                    }}\r\n                >\r\n                    <Row gutter={[0, 48]}>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row gutter={[0, 48]}>\r\n                        <Col span={1}></Col>\r\n                        <Link to=\"/home/inwork\">\r\n                        <Button icon={<RollbackOutlined style={{ fontSize: '20px'}}/>} onClick={() =>{ \r\n                            console.log(\"back\");\r\n                        }}>\r\n                        \r\n                        \r\n                        </Button>\r\n                        </Link>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={22}>\r\n                            <Title>Сотрудник</Title>\r\n                        </Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>Имя:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.firstName}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>Фамилия:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.lastName}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>email:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.email}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>Роли:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.roles[0]}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>ID:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.id}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>CompId:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.userD.companyId}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Divider />\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={22}>\r\n                            <Title>Компания</Title>\r\n                        </Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={1}></Col>\r\n                        <Col span={2}><Paragraph strong>Название:</Paragraph></Col>\r\n                        <Col span={20} ><Paragraph> {this.state.companyD.name}</Paragraph></Col>\r\n                        <Col span={1}></Col>\r\n                    </Row>\r\n                    <BackTop>\r\n                        <div className=\"BackUp\">Вверх</div>\r\n                    </BackTop>\r\n                </Layout.Content>\r\n        </Layout>\r\n            \r\n        );\r\n    }\r\n\r\n    \r\n    componentDidMount()\r\n    {\r\n\r\n            this.setState({loading:true});\r\n            let request:string=\"/\"+sessionStorage.getItem('AuthUserId');\r\n           \r\n            axios.get(\r\n                this.state.requestUrl+\"/api/User\"+request,\r\n                {\r\n                    headers: {\r\n                        \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                    }\r\n                }\r\n            )\r\n            .then(res => {\r\n                console.log(res.data);\r\n                this.setState({userD:res.data})\r\n                request=\"/\"+res.data.companyId;\r\n                axios.get(\r\n                    this.state.requestUrl+\"/api/Company\"+request,\r\n                    {\r\n                        headers: {\r\n                            \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                        }\r\n                    }\r\n                )\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    this.setState({companyD:res.data})\r\n                    this.setState({loading:false});\r\n                })\r\n                .catch(err => {  \r\n                    switch(err.response.status)\r\n                    {\r\n                        case 401:{\r\n                            console.log(\"401\"); \r\n                            break;\r\n                        }\r\n                        default:{\r\n                            console.log(\"Undefined error\"); \r\n                            break;\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {  \r\n                switch(err.response.status)\r\n                {\r\n                    case 401:{\r\n                        console.log(\"401\"); \r\n                        break;\r\n                    }\r\n                    default:{\r\n                        console.log(\"Undefined error\"); \r\n                        break;\r\n                    }\r\n                }\r\n            })\r\n           \r\n        }\r\n    \r\n}\r\n\r\nexport default Profile;\r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\role\\role.tsx",["175","176","177"],"import React from 'react';\r\nimport './role.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Row, Col,notification} from 'antd';\r\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\r\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\r\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\r\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\r\n\r\n// type getCompanies=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\n// type deleteCompany=paths[\"/api/Role/{id}\"][\"delete\"][\"parameters\"][\"path\"]\r\ntype updateRole=paths[\"/api/Role\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n// type addCompany=paths[\"/api/Role\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\n/**\r\n * Класс компонента компаний\r\n */\r\nexport class Role extends React.Component<{},{}> {\r\n\r\n  \r\n\r\n    state={\r\n        dataType:\"role\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/Role\",\r\n        NameStartsWith: \"\",\r\n\r\n        SortingColumn: \"Name\",\r\n        SortingColumnOptions:[\"Name\"],\r\n\r\n        SortDirection: \"Ascending\",\r\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\r\n\r\n        QuickSearch: \"\",\r\n        PageLimit: 10,\r\n        PageNumber: 1,\r\n\r\n        SearchBy:\"All\",\r\n\r\n        optionName:[\"SearchBy\"],\r\n        optionList:[[\"Name\",\"All\"]],\r\n        text:[\"Искать по\"],\r\n\r\n        count: 0,\r\n        items: [\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n            {\r\n                id: \"\",\r\n                name: \"\"\r\n            },\r\n        ],\r\n        loading:false\r\n    }\r\n\r\n    isNull=(val:string):boolean=>{\r\n        return val===\"\";\r\n    }\r\n\r\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\r\n        if (callback !== undefined) \r\n        this.setState({[type]:val},callback)  \r\n        else this.setState({[type]:val})    \r\n    }\r\n\r\n    delete=(val:string)=>{\r\n        axios.delete(\r\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Удаление прошло успешно',\r\n                description:\r\n                  'Роль с id:'+val+\" была удалена\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для удаления роли\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Роль с id:\"+ val+\" не найдена\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n   \r\n\r\n    updateData=(val:updateRole)=>{\r\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные роли с id:'+val.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных роли\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Роль с id:'+val.id+\" не найдена\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=\"?\";\r\n        request+=\"&PageLimit=\"+this.state.PageLimit;\r\n        request+=\"&PageNumber=\"+this.state.PageNumber;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\r\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\r\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\r\n        axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.setState({count:res.data.count})\r\n            this.setState({items:res.data.items})\r\n            this.setState({loading:false});\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      }); \r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n \r\n\r\n    \r\n    setCountItems=(val:number)=>{\r\n        this.setState({count:val})\r\n    }\r\n\r\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\r\n        if (page===0){\r\n            this.setState({PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            this.setState({PageNumber:page},()=>this.update());\r\n        }\r\n    }\r\n    \r\n    onMaxItemsChange=(current: number, size: number)=>{\r\n        //console.log(current);\r\n        if (current===0){\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <FilterEntity\r\n                dataType={this.state.dataType}\r\n                updateCallback={this.update}\r\n                changeValueCallback={this.changeValue}\r\n                SortDirection={this.state.SortDirection}\r\n                SortDirectionOptions={this.state.SortDirectionOptions}\r\n                SortingColumn={this.state.SortingColumn}\r\n                SortingColumnOptions={this.state.SortingColumnOptions}\r\n                option={[this.state.SearchBy]}\r\n                optionName={this.state.optionName}\r\n                optionList={this.state.optionList}\r\n                text={this.state.text}\r\n                />\r\n                <DataEntity \r\n                dataType={this.state.dataType}\r\n                loading={this.state.loading}    \r\n                updateDataCallback={this.updateData} \r\n                deleteCallback={this.delete} \r\n                updateCallback={this.update} \r\n                changeValueCallback={this.changeValue} \r\n                items={this.state.items}/>  \r\n                <PaginationEntity \r\n                countItems={this.state.count}\r\n                onPageChange={this.onPageChange}\r\n                onMaxItemsChange={this.onMaxItemsChange}/> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n        \r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Role;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx",["178"],"import React from 'react';\r\nimport './dataEntity.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Row, Col } from 'antd';\r\nimport {DataCard} from \"../dataSubEntities/dataCard/dataCard\";\r\nimport { paths } from '../../../../swaggerCode/swaggerCode';\r\ntype updateCompany=paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\nexport class DataEntity extends React.Component<{\r\n    items: any[],\r\n    loading:boolean,\r\n    dataType:string,\r\n    updateCallback:()=>void,\r\n    changeValueCallback:(val:any,type:string,callback:any)=>void,\r\n    updateDataCallback:(val:any)=>void,\r\n    deleteCallback:(val:string)=>void\r\n    },{}> {\r\n    \r\n    updateItem=(position: number, item:any)=>{\r\n        let buf=this.props.items;\r\n        buf[position]=item;\r\n        console.log(item);\r\n        this.props.changeValueCallback(buf,\"items\",this.props.updateDataCallback(item))\r\n    }\r\n\r\n    deleteItem=(position: number)=>{\r\n        let buf=this.props.items;\r\n        let objId:string=buf[position].id\r\n        buf.splice(position, 1);\r\n        this.props.changeValueCallback(buf,\"items\",this.props.deleteCallback(objId))\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n           <div>\r\n                {this.props.items.map((d, i) => {\r\n                    return (\r\n                        <Row key={\"Row\"+i}>\r\n                            <Col span={1}></Col>\r\n                            <Col span={22}>\r\n                                <DataCard \r\n                                    deleteItemCallback={this.deleteItem}\r\n                                    updateItemCallback={this.updateItem}\r\n                                    position={i}\r\n                                    data={d} \r\n                                    key={\"DC\"+i}\r\n                                    loading={this.props.loading}\r\n                                    dataType={this.props.dataType}\r\n                                    \r\n                                />\r\n                            </Col>\r\n                            <Col span={1}></Col>\r\n                        </Row>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DataEntity;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx",[],"G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx",[],"G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx",["179"],"import React from 'react';\r\nimport './addEntity.css';\r\nimport 'antd/dist/antd.css';\r\nimport {Row, Col } from 'antd';\r\nimport {AddBox} from \"../addSubEntities/addBox/addBox\"\r\nimport { paths } from '../../../../swaggerCode/swaggerCode';\r\n\r\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\nexport class AddEntity extends React.Component<{\r\n    createCallback:(val:any)=>void,\r\n},{}> {\r\n\r\n   \r\n    render() {\r\n        return (\r\n            <Row>\r\n            <Col span={1}></Col>\r\n                <Col span={22}>\r\n                <AddBox createCallback={this.props.createCallback}/>\r\n                </Col>\r\n                <Col span={1}></Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AddEntity;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx",["180"],"import React from 'react';\r\nimport './addBox.css';\r\nimport 'antd/dist/antd.css';\r\nimport { AddForm } from '../addForm/addForm';\r\nimport {Card, } from 'antd';\r\nimport {\r\n    UpOutlined,\r\n    CheckOutlined,\r\n    PlusOutlined\r\n} from '@ant-design/icons';\r\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\r\n\r\n\r\n\r\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\nexport class AddBox extends React.Component<{\r\n    createCallback:(val:any)=>void,\r\n    dataType:string,\r\n},{}> {\r\n\r\n    state = {\r\n        status:'hide'\r\n    };\r\n\r\n\r\n    changeStatusValue=(val:any,type:string)=>{\r\n        this.setState({[type]:val})    \r\n    }\r\n\r\n\r\n    submitSet = () => {\r\n            var event = new Event('submit', {\r\n                'bubbles'    : true, // Whether the event will bubble up through the DOM or not\r\n                'cancelable' : true  // Whether the event may be canceled or not\r\n            });\r\n            document.getElementById(\"AddForm\")?.dispatchEvent(event);\r\n            //this.changeStatusValue(\"hide\",\"status\")\r\n    };\r\n\r\n    options=():JSX.Element[]=>{\r\n        return (\r\n            [<CheckOutlined onClick={()=>{this.submitSet();}}></CheckOutlined>,<UpOutlined onClick={()=>{this.changeStatusValue(\"hide\",\"status\")}}/>]\r\n        )\r\n    }\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n                <Card className=\"addBox\" id=\"addboxId\"\r\n                    hoverable={true} \r\n                    onClick={()=>{\r\n                        if (this.state.status!==\"expand\")\r\n                        this.changeStatusValue(\"expand\",\"status\")}}\r\n                    actions={\r\n                        this.state.status===\"expand\"?this.options():[]\r\n                    }\r\n                >\r\n                    {this.state.status===\"hide\"?<PlusOutlined />:<AddForm\r\n                     createCallback={ this.props.createCallback}\r\n                     dataType={this.props.dataType}\r\n                     closeForm={this.changeStatusValue}\r\n                    />}\r\n                </Card>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default AddBox;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx",["181"],"import React from 'react';\r\nimport './chooseBox.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Menu, Dropdown, Button, Space,Typography} from 'antd';\r\n\r\n\r\n/**\r\n * Класс компонента выбора некой опции, для задания критерия поиска.\r\n * @param option Текущая выбранная опция.\r\n * @param optionName Наименование пересенной, которой соотвествуеют option, в родительском компоненте.\r\n * @param optionList Массив опций выпадающего меню.\r\n * @param text Текст перед компонентом, для визуального пояснения выбора.\r\n * @param updateCallback Колбек функции на обновление отображения страницы.\r\n * @param changeValueCallback Колбек функции на обновление значения переменой, которой соотвествуеют option, в родительском компоненте.\r\n */\r\nexport class ChooseBox extends React.Component<{\r\n    option:string,\r\n    optionName:string,\r\n    optionList:string[],\r\n    text:string,\r\n    updateCallback:()=>void,\r\n    changeValueCallback:(val:any,type:string,callback:()=>void)=>void\r\n},{}> {\r\n\r\n    \r\n    /**\r\n     * Функция генерирующая выпадающий список на основании props\r\n     */\r\n    optionGenerate=():JSX.Element=>{\r\n        return <Menu>\r\n         {this.props.optionList.map((u, i) => {\r\n                 if (u!==this.props.option) return (\r\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,this.props.optionName,this.props.updateCallback)} key={this.props.optionName+i}>\r\n                        <Typography.Paragraph>\r\n                        {u}\r\n                        </Typography.Paragraph>\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n    }\r\n  \r\n    render(){\r\n        return (\r\n                <Space size={5}>\r\n                    <Typography.Paragraph> {this.props.text}</Typography.Paragraph> \r\n                    <Dropdown overlay={this.optionGenerate} placement=\"bottomLeft\">\r\n                        <Button>{this.props.option}</Button>\r\n                    </Dropdown>\r\n                </Space>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChooseBox;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx",["182","183"],"import React from 'react';\r\nimport './sortBox.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Menu, Dropdown, Button, Space,Typography} from 'antd';\r\n\r\n\r\n/**\r\n * Класс компонента для установки критерия сортировки и ее напрвления.\r\n * @param SortDirection Текущая выбранная опция направления сортировки.\r\n * @param SortDirectionOptions Массив опций выпадающего меню направлений сортировки.\r\n * @param SortingColumn Текущая выбранная опция критериея сортировки.\r\n * @param SortingColumnOptions Массив опций выпадающего меню критериев сортировки.\r\n * @param updateCallback Колбек функции на обновление отображения страницы.\r\n * @param changeValueCallback Колбек функции на обновление значения переменой, в родительском компоненте.\r\n */\r\nexport class SortBox extends React.Component<{\r\n    SortDirection:string,\r\n    SortDirectionOptions:string[],\r\n    SortingColumn:string,\r\n    SortingColumnOptions:string[],\r\n    updateCallback:()=>void,\r\n    changeValueCallback:(val:any,type:string,callback:()=>void)=>void\r\n},{}> {\r\n\r\n     /**\r\n     * Функция генерирующая выпадающий список на основании props, для выбора направления сортировки.\r\n     */\r\n    SortDirectionGenerate=():JSX.Element=>{\r\n        return <Menu>\r\n         {this.props.SortDirectionOptions.map((u, i) => {\r\n                if (u!==this.props.SortDirection) return (\r\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,\"SortDirection\",this.props.updateCallback)} key={\"SortDirection\"+i}>\r\n                        <Typography.Paragraph>\r\n                        {u}\r\n                        </Typography.Paragraph>\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n    }\r\n\r\n\r\n    /**\r\n     * Функция генерирующая выпадающий список на основании props, для выбора критерия сортировки.\r\n     */\r\n    SortingColumnGenerate=():JSX.Element=>{\r\n        return <Menu>\r\n         {this.props.SortingColumnOptions.map((u, i) => {\r\n                 if (u!==this.props.SortingColumn) return (\r\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,\"SortingColumn\",this.props.updateCallback)} key={\"SortingColumn\"+i}>\r\n                        <Typography.Paragraph>\r\n                        {u}\r\n                        </Typography.Paragraph>\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n    }\r\n    \r\n  \r\n    render(){\r\n        return (\r\n                <Space size={5}>\r\n                    <Typography.Paragraph className=\"text\"> Сортировать</Typography.Paragraph> \r\n                    <Dropdown overlay={this.SortingColumnGenerate} placement=\"bottomLeft\">\r\n                        <Button>{this.props.SortingColumn}</Button>\r\n                    </Dropdown>\r\n                    <Typography.Paragraph className=\"text\">по</Typography.Paragraph>\r\n                    <Dropdown overlay={this.SortDirectionGenerate} placement=\"bottomLeft\">\r\n                        <Button>{this.props.SortDirection}</Button>\r\n                    </Dropdown>\r\n                </Space>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SortBox;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"import React from 'react';\r\nimport './addForm.css';\r\nimport 'antd/dist/antd.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\r\nimport { timingSafeEqual } from 'crypto';\r\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\r\n\r\nimport {MultiplyPicker,CMultiplyPicker} from '../../dataSubEntities/multiplyPicker/multiplyPicker';\r\nimport {\r\n    UpOutlined,\r\n    CheckOutlined,\r\n    PlusOutlined,\r\n    EllipsisOutlined,\r\n    SettingOutlined,\r\n    DeleteOutlined,\r\n    RollbackOutlined,\r\n    CloseOutlined\r\n\r\n} from '@ant-design/icons';\r\n\r\n\r\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\ntype addUser=paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\nconst { Paragraph } = Typography;\r\ntype option=\r\n{\r\n    label:string,\r\n    value:string\r\n}\r\n\r\ntype field=\r\n    {\r\n        name:string,\r\n        value:string,\r\n        type:string,\r\n        label:string,\r\n        options:option[],\r\n        chosedOptions:option[]        \r\n    }\r\n\r\n    const companyFields:field[]=[\r\n        {\r\n            name: 'companyTitle',\r\n            value: 'Данные компании',\r\n            type:'text',\r\n            label:'Данные компании',\r\n            options:[],\r\n            chosedOptions:[]\r\n        },\r\n    {\r\n        name: 'companyName',\r\n        value: 'ООО \"ЛОЛКЕК\"',\r\n        type:'input',\r\n        label:'Название:',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'adminTitle',\r\n        value: 'Данные админа',\r\n        type:'text',\r\n        label:'Данные админа',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'firstName',\r\n        value: 'Дмитрий',\r\n        type:'input',\r\n        label:'имя',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'lastName',\r\n        value: 'Дубина',\r\n        type:'input',\r\n        label:'фамилия',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'email',\r\n        value: 'dodubina.spam@gmail.com',\r\n        type:'input',\r\n        label:'email',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'password',\r\n        value: '71400444443',\r\n        type:'input',\r\n        label:'пароль',\r\n        options:[],\r\n        chosedOptions:[]\r\n    }\r\n    ]\r\n\r\n    const employeeFields:field[]=[\r\n    {\r\n        name: 'firstName',\r\n        value: 'Дмитрий',\r\n        type:'input',\r\n        label:'имя',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'lastName',\r\n        value: 'Дубина',\r\n        type:'input',\r\n        label:'фамилия',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'email',\r\n        value: 'dodubina.spam@gmail.com',\r\n        type:'input',\r\n        label:'email',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'password',\r\n        value: '71400444443',\r\n        type:'input',\r\n        label:'пароль',\r\n        options:[],\r\n        chosedOptions:[]\r\n    },\r\n    {\r\n        name: 'roles',\r\n        value: \r\n        '71400444443',\r\n        type:'multiplyPicker',\r\n        label:'роли',\r\n        options:[\r\n            {\r\n                label:\"SuperAdmin\",\r\n                value:\"SuperAdmin\"\r\n            },\r\n            {\r\n                label:\"CompanyAdmin\",\r\n                value:\"CompanyAdmin\"\r\n            },\r\n            {\r\n                label:\"ChiefRedactor\",\r\n                value:\"ChiefRedactor\"\r\n            },\r\n            {\r\n                label:\"Redactor\",\r\n                value:\"Redactor\"\r\n            },\r\n            {\r\n                label:\"Author\",\r\n                value:\"Author\"\r\n            },\r\n            {\r\n                label:\"Corrector\",\r\n                value:\"Corrector\"\r\n            }    \r\n        ],\r\n        chosedOptions:[\r\n        ]\r\n    }\r\n    ]\r\n\r\nexport class AddForm extends React.Component<{\r\n    createCallback:(val:any)=>void,\r\n    dataType:string\r\n},{fields:field[]}> {\r\n\r\n    constructor(props:{createCallback:(val:addCompany)=>void,\r\n        dataType:string}) {\r\n        super(props);\r\n        switch(this.props.dataType) { \r\n            case \"article\": { \r\n                this.state = {\r\n                    fields:companyFields\r\n            }\r\n                break;\r\n            }\r\n            case \"employee\": { \r\n                this.state = {\r\n                    fields:employeeFields\r\n            }\r\n            break; \r\n            } \r\n            case \"role\": { \r\n                this.state = {\r\n                    fields:companyFields\r\n            }\r\n                break;\r\n            }\r\n            case \"company\": { \r\n                this.state = {\r\n                    fields:companyFields\r\n            }\r\n                break;\r\n            }\r\n            case \"task\": { \r\n                this.state = {\r\n                    fields:companyFields\r\n            }\r\n                break;\r\n            }\r\n            default:  { \r\n                this.state = {\r\n                    fields:companyFields\r\n            }\r\n                break;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n       state = {\r\n        fields:[\r\n            {\r\n                name: 'companyTitle',\r\n                value: 'Данные компании',\r\n                type:'text',\r\n                label:'Данные компании',\r\n                options:[{\r\n                    label:\"\",\r\n                    value:\"\"\r\n                }],\r\n                chosedOptions:[\r\n                    {label:\"\",\r\n                    value:\"\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n        {\r\n            name: 'companyName',\r\n            value: 'ООО \"ЛОЛКЕК\"',\r\n            type:'input',\r\n            label:'Название:',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'adminTitle',\r\n            value: 'Данные админа',\r\n            type:'text',\r\n            label:'Данные админа',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'firstName',\r\n            value: 'Дмитрий',\r\n            type:'input',\r\n            label:'имя',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'lastName',\r\n            value: 'Дубина',\r\n            type:'input',\r\n            label:'фамилия',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'email',\r\n            value: 'dodubina.spam@gmail.com',\r\n            type:'input',\r\n            label:'email',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: 'password',\r\n            value: '71400444443',\r\n            type:'input',\r\n            label:'пароль',\r\n            options:[],\r\n            chosedOptions:[\r\n                {label:\"\",\r\n                value:\"\"\r\n                }\r\n            ]\r\n        }\r\n        ]\r\n    };\r\n\r\n\r\n    onFinish = () => {\r\n        //console.log(this.state.fields);\r\n        let buf;\r\n        switch(this.props.dataType) { \r\n            case \"article\": { \r\n                buf={}\r\n                break;\r\n            }\r\n            case \"employee\": { \r\n                let guis1:string=uuidv4();\r\n                let roles:string[]=[]\r\n                this.state.fields[4].chosedOptions.map((u, i) => {\r\n                roles.splice(roles.length,0,u.value);\r\n                })\r\n                //console.log(roles);\r\n                buf={\r\n                        id: \"\",\r\n                        email: this.state.fields[2].value,\r\n                        firstName:  this.state.fields[0].value,\r\n                        lastName: this.state.fields[1].value,\r\n                        password:  this.state.fields[3].value,\r\n                        roles: roles\r\n                };\r\n                \r\n                buf.id=guis1;\r\n                break; \r\n            } \r\n            case \"role\": { \r\n                buf={}\r\n                break;\r\n            }\r\n            case \"company\": { \r\n                let guis1:string=uuidv4();\r\n                let guis2:string=uuidv4();\r\n                buf={\r\n                    company: {\r\n                        id: \"\",\r\n                        name: this.state.fields[0].value,\r\n                    },\r\n                    admin: {\r\n                        id: \"\",\r\n                        email: this.state.fields[3].value,\r\n                        firstName:  this.state.fields[1].value,\r\n                        lastName: this.state.fields[2].value,\r\n                        password:  this.state.fields[4].value,\r\n                    }  \r\n                };\r\n                buf.admin.id=guis1;\r\n                buf.company.id=guis2;\r\n                break;\r\n            }\r\n            case \"task\": { \r\n                buf={}\r\n            \r\n                break;\r\n            }\r\n            default:  { \r\n\r\n                buf={}\r\n                break;\r\n            }\r\n        }\r\n    \r\n        \r\n        console.log(buf);\r\n        this.props.createCallback(\r\n            buf\r\n        )\r\n    };\r\n\r\n    onFinishFailed = () => {\r\n        console.log('Failed:', \"1\");\r\n    };\r\n\r\n\r\n    updateListCallBack = (val:option[]) => {\r\n        let buf=this.state.fields;\r\n        buf[4].chosedOptions=val;\r\n        this.setState({fields:buf});       \r\n    };\r\n\r\n   \r\n\r\n    formGenerator=():JSX.Element=>{\r\n        return (\r\n            <Form id=\"AddForm\" labelCol={{span:3} } wrapperCol={{span:20,offset:1}} fields={this.state.fields}\r\n            \r\n            onFinish={this.onFinish}\r\n            onFinishFailed={this.onFinishFailed}\r\n            onFieldsChange={(_, allFields) => {\r\n                let buf=this.state.fields;\r\n                buf[0].value=allFields[0].value;\r\n                buf[1].value=allFields[1].value;\r\n                buf[2].value=allFields[2].value;\r\n                buf[3].value=allFields[3].value;\r\n                buf[4].value=allFields[4].value;\r\n                this.setState({\r\n                   fields:buf\r\n                })\r\n              }}\r\n            >\r\n\r\n                \r\n                {this.state.fields.map((u, i) => {\r\n                    switch(u.type){\r\n                        case \"input\":{\r\n                            return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\r\n                                <Input/>\r\n                            </Form.Item>\r\n                            break;\r\n                        }\r\n                        // case \"singlePicker\":{\r\n                        //     return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\r\n                        //     <Select onSelect={(value:string)=>{\r\n                        //          let buf=this.state.fields;\r\n                        //          u.value=value;\r\n                        //          this.setValue(buf);\r\n                        //          console.log(buf);\r\n                        //     }}>\r\n                        //       {u.options.map((uo, j) => {\r\n                        //           if(u.value!==uo.value)\r\n                        //           return(\r\n                        //             <Select.Option  value={uo.value} onClick={()=>{\r\n                                       \r\n                        //             }}>{uo.label}</Select.Option>\r\n                        //           );\r\n                        //       })}\r\n                        //     </Select>\r\n                        //   </Form.Item>\r\n                        //     break;\r\n                        // }\r\n                         case \"multiplyPicker\":{\r\n                             return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\r\n                             <CMultiplyPicker  updListCallback={this.updateListCallBack} typeName=\"\" dataList={u.chosedOptions} optionList={u.options}/>\r\n                           </Form.Item>\r\n                             break;\r\n                        }\r\n                        case \"text\":{\r\n                            return <Paragraph>\r\n                                {u.value}\r\n                            </Paragraph>\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                    \r\n            })}\r\n            </Form>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.formGenerator()\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default AddForm;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx",[],"G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"import React from 'react';\r\nimport './dataCard.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\r\nimport {\r\n    UpOutlined,\r\n    CheckOutlined,\r\n    PlusOutlined,\r\n    EllipsisOutlined,\r\n    SettingOutlined,\r\n    DeleteOutlined\r\n\r\n} from '@ant-design/icons';\r\nimport Switch from 'react-bootstrap/esm/Switch';\r\nimport { spawn } from 'child_process';\r\nimport {DataRow,DataRowEditable,DataRowList,DataRowListEditable} from \"../dataRow/dataRow\";\r\nimport { Steps } from 'antd';\r\nimport { MultiplyPicker } from \"../multiplyPicker/multiplyPicker\";\r\nimport { ConsoleLogger } from 'typedoc/dist/lib/utils';\r\n\r\nconst { Step } = Steps;\r\nconst { Search } = Input;\r\nconst { Paragraph } = Typography;\r\nconst { Meta } = Card;\r\nconst { Title, Text} = Typography;\r\n\r\n\r\ntype company=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\ntype article=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\r\ntype role=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\ntype task=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\r\ntype emploe=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\n\r\nexport class DataCard extends React.Component<{\r\n        deleteItemCallback:(position: number)=>void,\r\n        updateItemCallback:(position: number,item:any)=>void,\r\n        position:number,\r\n        data: any,\r\n        dataType:string,\r\n        loading:boolean\r\n    },{}> {\r\n\r\n/*\r\n        constructor(props:{deleteItemCallback:(position: number)=>void,\r\n            updateItemCallback:(position: number,item:any)=>void,\r\n            position:number,\r\n            data: any,\r\n            dataType:string,\r\n            loading:boolean}) \r\n          {\r\n            super(props);\r\n            this.state = {status:'narrow',bufData:this.props.data};\r\n          }*/\r\n\r\n        state = {\r\n            status:'narrow',\r\n            bufData:this.props.data\r\n        };\r\n\r\n\r\n\r\n\r\n        updateDataFieldCallBack = (val:string,param:string) => {\r\n            let buf=this.state.bufData;\r\n\r\n            switch(param)\r\n            {\r\n                \r\n                case \"id\":\r\n                    buf.id=val;\r\n                    this.setState({bufData:buf});  \r\n                    break;\r\n                case \"name\":\r\n                    buf.name=val;\r\n                    this.setState({bufData:buf});  \r\n                    break;\r\n                case \"roles\":\r\n                    buf.roles=val;\r\n                    this.setState({bufData:buf});  \r\n                    break;\r\n                    case \"firstName\":\r\n                        buf.firstName=val;\r\n                        this.setState({bufData:buf});  \r\n                        break;\r\n                    case \"lastName\":\r\n                        buf.lastName=val;\r\n                        this.setState({bufData:buf});  \r\n                        break;\r\n                    case \"email\":\r\n                        buf.email=val;\r\n                        this.setState({bufData:buf});  \r\n                        break;\r\n\r\n            }\r\n        };\r\n\r\n        updateListCallBack = (val:string) => {\r\n            let buf=this.state.bufData;\r\n            buf.roles=val;\r\n            this.setState({bufData:buf});       \r\n        };\r\n    \r\n        expandCardChange = () => {\r\n            if(this.state.status==='narrow')\r\n                this.setState({ status: 'expand'});\r\n            else\r\n                this.setState({ status: 'narrow'});\r\n        };\r\n    \r\n        makeEditableCardChange = () => {\r\n            if(this.state.status==='expand')\r\n                this.setState({ status: 'editable'});\r\n            else\r\n            {\r\n                this.setState({ status: 'expand'});\r\n            }\r\n        };\r\n     \r\n        deleteCard = () => {\r\n            this.props.deleteItemCallback(this.props.position);\r\n        };\r\n    \r\n        updateCard = () => {\r\n            this.props.updateItemCallback(this.props.position, this.state.bufData);\r\n        };\r\n\r\n        isNull=(val:string):boolean=>{\r\n            console.log(val);\r\n            return val===\"\"||val===null;\r\n        }\r\n\r\n        Header= ():JSX.Element =>{\r\n            \r\n        switch(this.props.dataType) { \r\n            case \"article\": { \r\n                return(\r\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\r\n                        <Meta\r\n                            title={<div className=\"titleCard\">{this.props.data.title}</div>}\r\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\r\n                        />\r\n                        </Skeleton>\r\n                );\r\n            } \r\n            case \"employee\": { \r\n                return(\r\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\r\n                        <Meta\r\n                        avatar={<Avatar size={50}  src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\r\n                        title={<div className=\"titleCard\">{this.props.data.firstName}  {this.isNull(this.props.data.lastName)?\"\":this.props.data.lastName}</div>}\r\n                        description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\r\n                    />\r\n                        </Skeleton>\r\n                );\r\n            } \r\n            case \"role\": { \r\n                return(\r\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\r\n                        <Meta\r\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\r\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\r\n                        />\r\n                    </Skeleton>\r\n                );\r\n            } \r\n            case \"company\": { \r\n                return(\r\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\r\n                        <Meta\r\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\r\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\r\n                        />\r\n                    </Skeleton>\r\n                );\r\n            }\r\n            case \"task\": { \r\n                return(\r\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\r\n                        <Meta\r\n                            title={<div className=\"titleCard\">{this.props.data.description}</div>}\r\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.creationDate}</div>}\r\n                        />\r\n                    </Skeleton>\r\n                );\r\n            } \r\n            default: { \r\n                return(\r\n                    <div>No such type</div>\r\n                ) \r\n            } \r\n        }\r\n        }\r\n\r\n        DataRows= ():JSX.Element[] =>{\r\n            switch(this.props.dataType) { \r\n                case \"article\": { \r\n                    return(\r\n                        [\r\n                            <Divider />,\r\n                            <Paragraph strong>Инициатор статьи</Paragraph>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.initiator.firstName} titleStr=\"Имя : \"/>\r\n                                </Skeleton>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                            <DataRow dataStr={this.props.data.initiator.lastName} titleStr=\"Фамилия : \"/>\r\n                            </Skeleton>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                            <DataRow dataStr={this.props.data.initiator.email} titleStr=\"Email : \"/>\r\n                            </Skeleton>,\r\n                            <Divider />,\r\n                            <Paragraph strong>Статус статьи</Paragraph>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                                 </Skeleton>,\r\n                             <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                             <DataRow dataStr={this.props.data.creationDate} titleStr=\"Cоздано : \"/>\r\n                             </Skeleton> ,\r\n                             <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                 <Row>\r\n                                 <Col span={2}></Col>\r\n                                <Col span={20}>\r\n                                <Steps direction=\"horizontal\" current={2}>\r\n                                {this.props.data.tasks.map((d:any, i:number) => {\r\n                                return (\r\n                                    <Step key={i+\"tk\"} title={d.description} description={d.comment} />\r\n                                )\r\n                                })}\r\n                                </Steps>\r\n                                </Col>\r\n                                </Row>\r\n                            </Skeleton>\r\n                        ]  \r\n                    )\r\n                } \r\n                case \"employee\": { \r\n                    return(\r\n                        [\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\r\n                                 <DataRow dataStr={this.props.data.firstName} titleStr=\"Имя : \"/>\r\n                                 {this.isNull(this.props.data.lastName)?\"\":<DataRow dataStr={this.props.data.lastName} titleStr=\"Фамилия : \"/>}\r\n                                 <DataRow dataStr={this.props.data.email} titleStr=\"Почта : \"/>\r\n                            </Skeleton>,\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                 <DataRowList dataList={this.props.data.roles} titleStr=\"Роли : \"/>\r\n                            </Skeleton>\r\n                                 \r\n                        ]\r\n                    )\r\n                } \r\n                case \"role\": { \r\n                    return(\r\n                        [ \r\n                        <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.name} titleStr=\"Название : \"/>\r\n                                </Skeleton>,\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                                 </Skeleton>\r\n                        ]\r\n                    );\r\n                } \r\n                case \"company\": { \r\n                    return(\r\n                        [\r\n                             <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.name} titleStr=\"Название : \"/>\r\n                                </Skeleton>,\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                                 </Skeleton>\r\n                        ]\r\n                    );\r\n                }\r\n                case \"task\": { \r\n                    return(\r\n                        [\r\n                            <Divider />,\r\n                            <Paragraph strong>Задание</Paragraph>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\r\n                                <DataRow dataStr={this.props.data.description} titleStr=\"Формулировка : \"/>\r\n                                <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                                <DataRow dataStr={this.props.data.creationDate} titleStr=\"Дата создания : \"/>\r\n                                <DataRow dataStr={this.props.data.assignmentDate} titleStr=\"Дата поручения : \"/>\r\n                                </Skeleton>,\r\n                            <Divider />,\r\n                            <Paragraph strong>Инициатор</Paragraph>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.author.firstName} titleStr=\"Имя : \"/>\r\n                                </Skeleton>\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.author.lastName} titleStr=\"Фамилия : \"/>\r\n                                </Skeleton>\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.author.email} titleStr=\"Email : \"/>\r\n                                </Skeleton>\r\n                                </Skeleton>,\r\n                            <Divider />,\r\n                        ]\r\n                    );\r\n                } \r\n                default: { \r\n                    return (\r\n                        [<div>No such type</div>]\r\n                    ) \r\n                } \r\n            }\r\n        }\r\n    \r\n\r\n        /*\r\n {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n        */\r\n        DataRowsEditable=():JSX.Element[]=>{\r\n            switch(this.props.dataType) { \r\n                case \"article\": { \r\n                    return(\r\n                        [\r\n                            \r\n                             <Divider />,\r\n                             <Paragraph strong>Задачи</Paragraph>,\r\n                             <div>\r\n                                 {this.props.data.tasks.map((d:any, i:number) => {\r\n                                 return (\r\n                                     <Row>\r\n                                     <Col key={i+\"tk\"}>{d.description}</Col>\r\n                                     <Col key={i+\"tk\"}>{d.comment}</Col></Row>\r\n                                 )\r\n                                 })}\r\n                                 </div>,\r\n                                  <Divider />,\r\n                                 <Paragraph strong>Предпросмотр</Paragraph>,\r\n                                 <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                    <div className=\"prev\"></div>\r\n                                </Skeleton>,\r\n                                <Paragraph strong>Редактор</Paragraph>,\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                    <button className=\"red\">редактор</button>\r\n                               </Skeleton>\r\n                        ]  \r\n                    ) \r\n                } \r\n                case \"employee\": { \r\n                    return(\r\n                        [\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\r\n                                <DataRowEditable dataStr={this.state.bufData.firstName} titleStr=\"Имя : \" typeName=\"firstName\" editFieldCallback={this.updateDataFieldCallBack}/>\r\n                                <DataRowEditable dataStr={this.state.bufData.lastName||\"Нет данных\"} titleStr=\"Фамилия : \" typeName=\"lastName\" editFieldCallback={this.updateDataFieldCallBack}/>\r\n                                <DataRowEditable dataStr={this.state.bufData.email} titleStr=\"Почта : \" typeName=\"email\" editFieldCallback={this.updateDataFieldCallBack}/>\r\n        \r\n                                </Skeleton>,\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                \r\n                                <Row className=\"DataRow\">\r\n                                    <Col span={3} className='title'><Paragraph className='DataRowTitle'>{\"Роли: \"}</Paragraph></Col>\r\n                                    <Col span={4} className=\"DataRowList\">\r\n                                        \r\n                                    <MultiplyPicker dataList={this.state.bufData.roles} typeName=\"roles\" updListCallback={this.updateListCallBack}/>\r\n                                        \r\n                                    </Col>\r\n                                </Row>\r\n                                 </Skeleton>\r\n        \r\n        \r\n                        ]\r\n                    );\r\n                } \r\n                case \"role\": { \r\n                    return(\r\n                        [ \r\n                        <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack}/>\r\n                            </Skeleton>,\r\n                            <Divider />,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                            <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                            </Skeleton>\r\n                        ]\r\n        \r\n                    );\r\n                } \r\n                case \"company\": { \r\n                    return(\r\n                        [ \r\n                            <Divider />,\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                    <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack}/>\r\n                                </Skeleton>,\r\n                                <Divider />,\r\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\r\n                                </Skeleton>\r\n                            ]\r\n                    ); \r\n                }\r\n                case \"task\": { \r\n                    return(\r\n                        [ \r\n                            <Divider />,\r\n                            <Paragraph strong>Управление заданием</Paragraph>,\r\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                                <button className=\"red\">Завершить</button>\r\n                           </Skeleton>,\r\n                           <Paragraph strong>Редактор</Paragraph>,\r\n                           <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\r\n                               <button className=\"red\">редактор</button>\r\n                          </Skeleton>\r\n                            ]\r\n                    ); \r\n                } \r\n                default: { \r\n                    return (\r\n                        [<div>No such type</div>]\r\n                    )\r\n                } \r\n            }\r\n        }\r\n    \r\n        optionsNarrow=():JSX.Element[]=>{\r\n            return (\r\n                [<EllipsisOutlined onClick={()=>this.expandCardChange()}/>]\r\n            )\r\n        }\r\n    \r\n        optionsExpand=():JSX.Element[]=>{\r\n            return (\r\n                [<SettingOutlined onClick={()=>this.makeEditableCardChange()}/>,<UpOutlined onClick={()=>this.expandCardChange()}/>]\r\n            )\r\n        }\r\n    \r\n        optionsExpandEditable=():JSX.Element[]=>{\r\n            return (\r\n                [<Popconfirm placement=\"rightTop\" title={\"Вы точно хотите удалить этот объект?\"} onConfirm={()=>this.deleteCard()} okText=\"Yes\" cancelText=\"No\"><DeleteOutlined/></Popconfirm>,<CheckOutlined onClick={()=>{this.makeEditableCardChange();this.updateCard();}}/>]\r\n            )\r\n        }\r\n\r\n        componentDidUpdate(prevProps:any, prevState:any, snapshot:any)\r\n        {\r\n            if (this.props.loading === false&&prevProps.loading === true) {\r\n                this.setState({status:\"narrow\"})\r\n            }\r\n        }\r\n\r\n\r\n    \r\n        render() {\r\n            this.state.bufData=this.props.data;\r\n            return (\r\n                \r\n                <Card className=\"userCard wide\"\r\n                    hoverable={true}\r\n                    actions={\r\n                        this.state.status===\"narrow\"?this.optionsNarrow():this.state.status===\"expand\"?this.optionsExpand():this.optionsExpandEditable()\r\n                    }\r\n                >\r\n                    {this.Header()}\r\n                    \r\n                    {this.state.status===\"narrow\"?<div/>:\r\n                        this.state.status===\"expand\"?\r\n                        \r\n                        this.DataRows().map((d, i) => {\r\n                            return(React.cloneElement(d, { key: i+\"dr\" }));\r\n                        }):\r\n                        this.DataRowsEditable().map((d, i) => {\r\n                            return(React.cloneElement(d, { key: i+\"dre\" }));\r\n                        })\r\n                }\r\n                </Card>\r\n\r\n            );\r\n        }\r\n\r\n}\r\n\r\n\r\nexport default DataCard;\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx",["237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276"],"import React from 'react';\r\nimport './multiplyPicker.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\r\nimport {\r\n    UpOutlined,\r\n    CheckOutlined,\r\n    PlusOutlined,\r\n    EllipsisOutlined,\r\n    SettingOutlined,\r\n    DeleteOutlined,\r\n    RollbackOutlined,\r\n    CloseOutlined\r\n\r\n} from '@ant-design/icons';\r\nimport Switch from 'react-bootstrap/esm/Switch';\r\nimport { spawn } from 'child_process';\r\nimport {DataRow,DataRowEditable,DataRowList,DataRowListEditable} from \"../dataRow/dataRow\";\r\nimport { Steps } from 'antd';\r\n\r\nconst { Step } = Steps;\r\nconst { Search } = Input;\r\nconst { Paragraph } = Typography;\r\nconst { Meta } = Card;\r\nconst { Title, Text} = Typography;\r\n\r\n\r\ntype company=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\ntype article=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\r\ntype role=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\ntype task=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\r\ntype emploe=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\r\n\r\nexport class MultiplyPicker extends React.Component<{\r\n        updListCallback:(val:any) =>void,\r\n        typeName:string,\r\n        dataList:string[],\r\n    },{}> {\r\n\r\n        state={\r\n            bufList:this.props.dataList\r\n        }\r\n\r\n        deleteUl(id:number):string[] {\r\n            let updateArray = [...this.state.bufList];\r\n            updateArray.splice(id, 1);\r\n            this.setState({bufList:updateArray});\r\n            this.props.updListCallback(updateArray);\r\n            //console.log(this.state.bufList);\r\n            //console.log(this.props.dataList);\r\n            //console.log(updateArray);\r\n            return updateArray;\r\n        }\r\n    \r\n        addUl(el:string):string[] {\r\n            let updateArray = [...this.state.bufList];\r\n            updateArray.splice(this.state.bufList.length,0,el );\r\n            this.setState({bufList:updateArray});\r\n            this.props.updListCallback(updateArray);\r\n            //console.log(this.state.bufList);\r\n            //console.log(this.props.dataList);\r\n            //console.log(updateArray);\r\n            return updateArray;\r\n        }\r\n\r\n        updateOptionsMenuCallBack():JSX.Element {\r\n            let optList:string[]=[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"]\r\n            return <Menu>\r\n                {optList.map((r, i) => {\r\n                    if(this.state.bufList.indexOf( r ) == -1 )\r\n                    return (\r\n                        \r\n                        <Menu.Item key={i+\"mi\"} onClick={()=>this.addUl(r)}>\r\n                            {r}\r\n                        </Menu.Item>\r\n                    )\r\n                })}\r\n            </Menu>\r\n            \r\n        }\r\n\r\n        render() {\r\n            return (\r\n                \r\n                <div>\r\n                {this.props.dataList.map((d, i) => {\r\n                    return (\r\n                    <Button  key={i+\"dl\"} className=\"deleteButton\" danger\r\n                                        type=\"dashed\"\r\n                                        onClick={()=>this.deleteUl(i)}\r\n                      >\r\n                            {d} <CloseOutlined />\r\n                    </Button>\r\n                    )\r\n                })}\r\n                <Dropdown overlay={this.updateOptionsMenuCallBack()}>\r\n                <Button\r\n                    type=\"dashed\"\r\n                    onClick={() => {}}\r\n                    style={{ width: '100%' }}\r\n                    >\r\n                    Добавить роль <PlusOutlined />\r\n                  </Button>\r\n                </Dropdown>\r\n            </div>\r\n\r\n            );\r\n        }\r\n\r\n}\r\n\r\ntype option=\r\n{\r\n    label:string,\r\n    value:string\r\n}\r\n\r\nexport class CMultiplyPicker extends React.Component<{\r\n    updListCallback:(val:any) =>void,\r\n    typeName:string,\r\n    dataList:option[],\r\n    optionList:option[]\r\n},{}> {\r\n\r\n    state={\r\n        bufList:this.props.dataList\r\n    }\r\n\r\n    deleteUl(id:number):option[] {\r\n        let updateArray = [...this.state.bufList];\r\n        updateArray.splice(id, 1);\r\n        this.setState({bufList:updateArray});\r\n        this.props.updListCallback(updateArray);\r\n        //console.log(this.state.bufList);\r\n        //console.log(this.props.dataList);\r\n        //console.log(updateArray);\r\n        return updateArray;\r\n    }\r\n\r\n    addUl(el:option):option[] {\r\n        let updateArray = [...this.state.bufList];\r\n        updateArray.splice(this.state.bufList.length,0,el );\r\n        this.setState({bufList:updateArray});\r\n        this.props.updListCallback(updateArray);\r\n        //console.log(this.state.bufList);\r\n        //console.log(this.props.dataList);\r\n        //console.log(updateArray);\r\n        return updateArray;\r\n    }\r\n\r\n    updateOptionsMenuCallBack():JSX.Element {\r\n \r\n        return <Menu>\r\n            {this.props.optionList.map((r, i) => {\r\n                if(this.state.bufList.indexOf( r ) == -1 )\r\n                return (\r\n                    \r\n                    <Menu.Item key={i+\"mi\"} onClick={()=>this.addUl(r)}>\r\n                        {r.label}\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n            {this.props.dataList.map((d, i) => {\r\n                return (\r\n                <Button  key={i+\"dl\"} className=\"deleteButton\" danger\r\n                                    type=\"dashed\"\r\n                                    onClick={()=>this.deleteUl(i)}\r\n                  >\r\n                        {d.label} <CloseOutlined />\r\n                </Button>\r\n                )\r\n            })}\r\n            <Dropdown overlay={this.updateOptionsMenuCallBack()}>\r\n            <Button\r\n                type=\"dashed\"\r\n                onClick={() => {}}\r\n                style={{ width: '100%' }}\r\n                >\r\n                Добавить роль <PlusOutlined />\r\n              </Button>\r\n            </Dropdown>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default {CMultiplyPicker,MultiplyPicker};\r\n","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx",["277"],"import React from 'react';\r\nimport { Row, Col,Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './dataRow.css';\r\nimport {\r\n    CloseOutlined,\r\n    EditOutlined,\r\n    PlusOutlined\r\n} from '@ant-design/icons';\r\nimport {Dropdown, Menu, message, Typography,Space} from \"antd\";\r\nconst { Paragraph } = Typography;\r\n\r\n\r\nexport interface IDataRowE {\r\n    dataStr: string\r\n    titleStr: string\r\n    typeName:string\r\n    editFieldCallback: (val:string,param:string) => void;\r\n}\r\n\r\nexport interface IDataRowListE {\r\n    dataList: string[]\r\n    titleStr: string\r\n    typeName:string\r\n    editListCallback: (val:string[],param:string) => void;\r\n}\r\n\r\nexport interface IDataRow {\r\n    dataStr: string\r\n    titleStr: string\r\n}\r\n\r\nexport interface IDataRowList {\r\n    dataList: string[]\r\n    titleStr: string\r\n}\r\n\r\nexport function DataRowEditable({dataStr, titleStr,typeName,editFieldCallback}: IDataRowE) {\r\n    const [editableStr, setEditableStr] = React.useState(dataStr);\r\n    return (\r\n        <Row className=\"DataRow\">\r\n            <Col span={3} className='title' >\r\n                <Paragraph className='DataRowTitle'>{titleStr}</Paragraph>\r\n            </Col>\r\n            <Col span={19}>\r\n                <Paragraph className='DataRowData'editable={{\r\n                maxLength: 40,\r\n                icon: <EditOutlined />,\r\n                tooltip: 'Изменить',\r\n                onChange:(editableStr)=>{setEditableStr(editableStr);editFieldCallback(editableStr,typeName);},\r\n            }}>\r\n                    {editableStr}\r\n                </Paragraph>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function DataRow({dataStr, titleStr}: IDataRow) {\r\n    return (\r\n        <Row className=\"DataRow\">\r\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\r\n            <Col span={20} ><Paragraph className='DataRowData'>{dataStr}</Paragraph></Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function DataRowList({dataList, titleStr}: IDataRowList) {\r\n    return (\r\n        <Row className=\"DataRow\">\r\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\r\n            <Col span={4} className=\"DataRowList\">\r\n                \r\n                    {dataList.map((r, i) => {\r\n                        return (\r\n                            <Row key={i+\"rw\"}>\r\n                            <Col span={1}></Col>\r\n                        <Col span={22} className=\"optionText\">{r}</Col>\r\n                        <Col span={1}></Col>\r\n                        </Row> )\r\n                    })}\r\n                \r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\nexport function DataRowListEditable({dataList, titleStr,typeName,editListCallback}: IDataRowListE) {\r\n\r\n    function deleteUl(id:number,list:string[]):string[] {\r\n        let updateArray = [...list];\r\n        updateArray.splice(id, 1);\r\n        message.info(id);\r\n        editListCallback(updateArray,typeName);\r\n        return updateArray;\r\n    }\r\n\r\n    function addUl(el:string,list:string[]):string[] {\r\n        let updateArray = [...list];\r\n        updateArray.splice(list.length,0,el );\r\n        editListCallback(updateArray,typeName);\r\n        return updateArray;\r\n    }\r\n\r\n    function updateOptionsMenuCallBack():JSX.Element {\r\n        let optList:string[]=[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"]\r\n        return <Menu>\r\n            {optList.map((r, i) => {\r\n                return (\r\n                    <Menu.Item onClick={()=>editListCallback(addUl(r,dataList),typeName)}>\r\n                        {r}\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </Menu>\r\n    }\r\n\r\n\r\n    return (\r\n        <Row className=\"DataRow\">\r\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\r\n            <Col span={4} ><Paragraph className='DataRowList'>\r\n                <ul>\r\n                    {dataList.map((r, i) => {\r\n                        return (\r\n                            \r\n                                <Button className=\"deleteButton\" danger\r\n                                    type=\"dashed\"\r\n                                    onClick={()=>editListCallback(deleteUl(i,dataList),typeName)}\r\n                                    \r\n                                >\r\n                                     {r} <CloseOutlined />\r\n                                </Button>\r\n                           \r\n                            \r\n                        )\r\n                    })}\r\n                    \r\n                    <div>\r\n                    \r\n                        <Dropdown overlay={updateOptionsMenuCallBack()}>\r\n                            <Button\r\n                type=\"dashed\"\r\n                onClick={() => {}}\r\n                style={{ width: '100%' }}\r\n                >\r\n                Добавить роль <PlusOutlined />\r\n              </Button>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ul>\r\n            </Paragraph></Col>\r\n        </Row>\r\n\r\n    )\r\n}\r\n\r\nexport default DataRow;","G:\\GIT\\CMS\\frontEnd\\src\\base\\contentOptions\\task\\task.tsx",["278","279","280","281","282"],"import React from 'react';\r\nimport './task.css';\r\nimport 'antd/dist/antd.css';\r\nimport { paths } from '../../../swaggerCode/swaggerCode';\r\nimport axios from 'axios'\r\nimport {Row, Col, notification} from 'antd';\r\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\r\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\r\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\r\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\r\n\r\n\r\n\r\n/**\r\n * Класс компонента компаний\r\n */\r\nexport class Task extends React.Component<{},{}> {\r\n\r\n  \r\n\r\n    state={\r\n        dataType:\"task\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/Task\",\r\n        NameStartsWith: \"\",\r\n\r\n        SortingColumn: \"Title\",\r\n        SortingColumnOptions:[\"DeadLine\",\"Title\",\"CreationDate\",\"State\",\"TaskType\"],\r\n\r\n        SortDirection: \"Ascending\",\r\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\r\n\r\n        QuickSearch: \"\",\r\n        PageLimit: 10,\r\n        PageNumber: 1,\r\n\r\n        SearchBy:\"All\",\r\n\r\n        optionName:[\"SearchBy\"],\r\n        optionList:[[\"Name\",\"All\",\"Assigne\",\"Author\"]],\r\n        text:[\"Искать по\"],\r\n\r\n        count: 0,\r\n        items: [\r\n            {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              },\r\n              {\r\n                id: \"\",\r\n                type: 0,\r\n                performer: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                author: {\r\n                  id: \"\",\r\n                  companyId: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  roles: [\r\n                    \"\"\r\n                  ]\r\n                },\r\n                creationDate: \"\",\r\n                assignmentDate: \"\",\r\n                сompletionDate: \"\",\r\n                description: \"\",\r\n                comment: \"\"\r\n              }\r\n        \r\n       \r\n\r\n\r\n        ],\r\n        loading:false\r\n    }\r\n\r\n    isNull=(val:string):boolean=>{\r\n        return val===\"\";\r\n    }\r\n\r\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\r\n        if (callback !== undefined) \r\n        this.setState({[type]:val},callback)  \r\n        else this.setState({[type]:val})    \r\n    }\r\n\r\n    delete=(val:string)=>{\r\n        axios.delete(\r\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Удаление прошло успешно',\r\n                description:\r\n                  'Компания с id:'+val+\" была удалена\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для удаления статьи\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Статья с id:\"+ val+\" не найдена\"\r\n                      });\r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    create=(val:any)=>{\r\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            this.update();\r\n            notification.success({\r\n                message: 'Создание прошло успешно',\r\n                description:\r\n                  'Статья с id:'+val.id+\" была успешно создана\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n            console.log(err); \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Недостаточно прав для создания статьи\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateData=(val:any)=>{\r\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные статьи с id:'+val.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        console.log(err); \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных статьи\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Статья с id:'+val.id+\" не найдена\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=\"?\";\r\n        request+=\"&PageLimit=\"+this.state.PageLimit;\r\n        request+=\"&PageNumber=\"+this.state.PageNumber;\r\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\r\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\r\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\r\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\r\n        /*axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({count:res.data.count})\r\n            this.setState({items:res.data.items})\r\n            this.setState({loading:false});\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    console.log(\"401\"); \r\n                    break;\r\n                }\r\n                default:{\r\n                    console.log(\"Undefined error\"); \r\n                    break;\r\n                }\r\n            }\r\n        })*/\r\n        this.setState({count:3})\r\n        this.setState({items:[\r\n            \r\n             \r\n            \r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n                  {\r\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                    \"type\": 0,\r\n                    \"performer\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"author\": {\r\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n                      \"email\": \"user@example.com\",\r\n                      \"firstName\": \"string\",\r\n                      \"lastName\": \"string\",\r\n                      \"roles\": [\r\n                        \"SuperAdmin\"\r\n                      ]\r\n                    },\r\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\r\n                    \"description\": \"string\",\r\n                    \"comment\": \"string\"\r\n                  },\r\n\r\n                ]\r\n\r\n        })\r\n        this.setState({loading:false});\r\n    }\r\n\r\n \r\n\r\n    \r\n    setCountItems=(val:number)=>{\r\n        this.setState({count:val})\r\n    }\r\n\r\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\r\n        if (page===0){\r\n            this.setState({PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            this.setState({PageNumber:page},()=>this.update());\r\n        }\r\n    }\r\n    \r\n    onMaxItemsChange=(current: number, size: number)=>{\r\n        //console.log(current);\r\n        if (current===0){\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\r\n        }\r\n        else{\r\n            //console.log(current);\r\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <FilterEntity\r\n                dataType={this.state.dataType}\r\n                updateCallback={this.update}\r\n                changeValueCallback={this.changeValue}\r\n                SortDirection={this.state.SortDirection}\r\n                SortDirectionOptions={this.state.SortDirectionOptions}\r\n                SortingColumn={this.state.SortingColumn}\r\n                SortingColumnOptions={this.state.SortingColumnOptions}\r\n                option={[this.state.SearchBy]}\r\n                optionName={this.state.optionName}\r\n                optionList={this.state.optionList}\r\n                text={this.state.text}\r\n                />\r\n                <DataEntity \r\n                dataType={this.state.dataType}\r\n                loading={this.state.loading}    \r\n                updateDataCallback={this.updateData} \r\n                deleteCallback={this.delete} \r\n                updateCallback={this.update} \r\n                changeValueCallback={this.changeValue} \r\n                items={this.state.items}/>  \r\n                <PaginationEntity \r\n                countItems={this.state.count}\r\n                onPageChange={this.onPageChange}\r\n                onMaxItemsChange={this.onMaxItemsChange}/> \r\n            </div>\r\n            \r\n        );\r\n    }\r\n        \r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Task;\r\n\r\n","G:\\GIT\\CMS\\frontEnd\\src\\redactor\\redactor.tsx",["283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import React from 'react';\r\nimport './redactor.css';\r\nimport 'antd/dist/antd.css';\r\nimport { useDrag } from 'react-dnd'\r\nimport { useDrop } from 'react-dnd'\r\nimport {Form, Input, Button, Checkbox, Col, Row,notification,Card,Table,Divider,Typography,Image,Carousel} from 'antd';\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport { DndProvider} from \"react-dnd\";\r\nimport { useState } from 'react';\r\nimport { isThisTypeNode } from 'typescript';\r\nimport Grid from 'antd/lib/card/Grid';\r\nimport Item from 'antd/lib/list/Item';\r\nimport Paragraph from 'antd/lib/skeleton/Paragraph';\r\nimport DataEntity from \"../base/contentOptions/dataEntities/dataEntity/dataEntity\"\r\nimport{DataRowEditable} from \"../base/contentOptions/dataEntities/dataSubEntities/dataRow/dataRow\"\r\nimport {\r\n    DeleteOutlined,\r\n    CheckOutlined,\r\n    CloseOutlined,\r\n    CaretLeftOutlined,\r\n    CaretRightOutlined,\r\n    VerticalLeftOutlined,\r\n    VerticalRightOutlined,\r\n    EditOutlined \r\n} from '@ant-design/icons';\r\nimport axios from 'axios'\r\nimport { OmitProps } from 'antd/lib/transfer/ListBody';\r\nimport { paths } from '../swaggerCode/swaggerCode';\r\n\r\ntype getArticle=paths[\"/api/Article/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\r\ntype deleteArticle=paths[\"/api/Article/{id}\"][\"delete\"][\"parameters\"][\"path\"]\r\ntype updateArticle=paths[\"/api/Article\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\r\ntype addArticle=paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\r\n\r\n\r\n//Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiI1MWE4YjZmZC0wYWEwLTQ5MWUtOWMzNC1hZGRiZGZlNDgzMjQiLCJDb21wYW55SWQiOiJmZjA4Y2IzMS05YzBhLTQ1N2EtYTljNC0wNWYwNjZlMzAxYjUiLCJyb2xlIjoiQ29tcGFueUFkbWluIiwibmJmIjoxNjE2NDQ2NzYwLCJleHAiOjE2MTkwMzg3NjAsImlhdCI6MTYxNjQ0Njc2MH0.YbQtvyJpgWS6_V0k0dDtaEgJMut2v0JDT5TPeKEGWfzJ4c9U9C7DYmJjKmKqIw4J-hrldmyykeB4tB0AYm1xRw\r\n//Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOiJmMDdjM2E5My04MTU2LTRhZDAtOWY5ZC1iOTYyY2Q0MWI4ODEiLCJDb21wYW55SWQiOiJmZjA4Y2IzMS05YzBhLTQ1N2EtYTljNC0wNWYwNjZlMzAxYjUiLCJyb2xlIjoiQ2hpZWZSZWRhY3RvciIsIm5iZiI6MTYxNjQ0Njg4NywiZXhwIjoxNjE5MDM4ODg3LCJpYXQiOjE2MTY0NDY4ODd9.IU5baTAuSnm96nFmg81eTgNqjf1sH7wsdbxhF4mXP0KWYA9dK3F4mdHS_IwBPxcgNRnvnqfCexWVBqYirU9KJg\r\n\r\ntype cel={\r\n    x:number,\r\n    y:number,\r\n    width:number,\r\n    content:string|null,\r\n    cOpt:string[]|null,\r\n    cOptVal:string[]|null\r\n}\r\n\r\n\r\nexport class Redactor extends React.Component<{id:string},{    \r\n}> {\r\n\r\n    state={\r\n        dataType:\"Redactor\",\r\n        requestUrl:\"https://hse-cms.herokuapp.com\",\r\n        requestPath:\"/api/Article/\",\r\n        loading:false,\r\n        article:{\r\n            id:\"\",\r\n            tasks:[],\r\n            title:\"\",\r\n            content:'[[{\"x\":0,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":1,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":2,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":3,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":4,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":5,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":6,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":7,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":8,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":9,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":10,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":11,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":12,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":13,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":14,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":15,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":16,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":17,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":18,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":19,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":20,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":21,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":22,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null},{\"x\":23,\"y\":0,\"width\":1,\"content\":null,\"cOpt\":null,\"cOptVal\":null}]]'\r\n        },\r\n        grid:[]\r\n    }\r\n\r\n    updateCallback=(content:cel[][])=>{\r\n        this.setState({grid:content})\r\n    }\r\n    \r\n\r\n    updateData=(val:cel[][])=>{\r\n        let buf={\r\n            id: this.state.article.id,\r\n            title: this.state.article.title,\r\n            content: JSON.stringify(val)\r\n          }\r\n        axios.put(this.state.requestUrl+this.state.requestPath,buf,\r\n        {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n            }\r\n        })\r\n        .then(res => {\r\n            notification.success({\r\n                message: 'Данные успешно обновлены',\r\n                description:\r\n                  'Данные статьи с id:'+buf.id+\" были успешно обновлены\",\r\n              });\r\n        })\r\n        .catch(err => {  \r\n        console.log(err); \r\n        switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                        \"Ошибка авторизации\"\r\n                      });\r\n                    break;\r\n                }\r\n                case 403:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                        \"Недостаточно прав для изменения данных статьи\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 404:{\r\n                    notification.error({\r\n                        message: \"Ошибка\"+ err.response.status,\r\n                        description:\r\n                          'Статья с id:'+buf.id+\" не найдена\",\r\n                      });\r\n                    break;\r\n                }\r\n                case 409:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\r\n                      }); \r\n                    break;\r\n                }\r\n                default:{\r\n                    notification.error({\r\n                        message: 'Ошибка '+ err.response.status,\r\n                        description:\r\n                          \"Неопознанная ошибка\"\r\n                      });\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    update(){ \r\n        this.setState({loading:true});\r\n        let request:string=this.props.id;\r\n      \r\n        axios.get(\r\n            this.state.requestUrl+this.state.requestPath+request,\r\n            {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\r\n                }\r\n            }\r\n        )\r\n        .then(res => {\r\n            //console.log(res);\r\n            this.setState({article:res.data});\r\n            this.setState({grid:JSON.parse(res.data.content)})\r\n        })\r\n        .catch(err => {  \r\n            switch(err.response.status)\r\n            {\r\n                case 401:{\r\n                    console.log(\"401\"); \r\n                    break;\r\n                }\r\n                default:{\r\n                    console.log(\"Undefined error\"); \r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n \r\n\r\n    render() {\r\n        //console.log(JSON.parse(this.state.article));\r\n        //  return(\r\n        //      <ArticleV gridArticle={this.state.grid}/>        \r\n        //  );\r\n        return(\r\n            <DndProvider backend={HTML5Backend}>\r\n          \r\n        <Row>\r\n        \r\n            <Col span={24} >\r\n            <DataBlock articleData={this.state.article}/>\r\n            </Col>\r\n        \r\n        </Row>\r\n\r\n         <Row >\r\n            <Col span={1}></Col>\r\n            <Col span={16}>\r\n            <ArticleBlock  updateCallback={this.updateCallback} save={this.updateData} gridArticle={this.state.grid}/>\r\n            </Col>\r\n            <Col span={6}>\r\n            <OptionsBlock/>\r\n            </Col>\r\n            <Col span={1}></Col>\r\n        </Row>\r\n \r\n    \r\n        \r\n        </DndProvider>\r\n        );\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n}\r\n\r\n\r\n\r\n  \r\n\r\nexport class DataBlock extends React.Component<{articleData:any},{}> {\r\n\r\n    render() {\r\n        console.log(\"!!!!!\")\r\n        console.log(this.props.articleData)\r\n        return(\r\n           \r\n            <div className=\"dataPoolTop\">\r\n             <DataEntity \r\n                dataType={\"task\"}\r\n                loading={false}    \r\n                updateDataCallback={()=>{}} \r\n                deleteCallback={()=>{}} \r\n                updateCallback={()=>{}} \r\n                changeValueCallback={()=>{}} \r\n                items={this.props.articleData.tasks}/>  \r\n            </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport class TextBlock extends React.Component<{\r\n    styleTypes:string[]\r\n    styleValues:string[]\r\n},{}> {\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Typography.Paragraph className={\"grey\"} \r\n            style={{ [this.props.styleTypes[1]]: this.props.styleValues[1],\r\n            [this.props.styleTypes[2]]: this.props.styleValues[2]\r\n        }}>{this.props.styleValues[0]}</Typography.Paragraph>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class ImgBlock extends React.Component<{\r\n    styleTypes:string[],\r\n    styleValues:string[]\r\n},{}> {\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Image className={\"grey\"} \r\n            src={this.props.styleValues[0]}\r\n            style={{ [this.props.styleTypes[1]]: this.props.styleValues[1]+\"px\",\r\n            [this.props.styleTypes[2]]: this.props.styleValues[2]+\"px\"\r\n        }}></Image>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport class OptionsBlock extends React.Component<{},{}> {\r\n    render() {\r\n        return(\r\n            <Card className=\"partsPoolright\">\r\n               <BlockImg name={\"text\"}/>\r\n               <BlockImg name={\"img\"}/>\r\n               <BlockImg name={\"text\"}/>\r\n               <BlockImg name={\"img\"}/>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst ItemTypes = {\r\n    OPTION: 'option',\r\n}\r\n\r\n\r\nfunction BlockImg(props:{ name:string}) {\r\n    const [{ isDragging }, drag] = useDrag(() => ({\r\n        type: ItemTypes.OPTION,\r\n        collect: (monitor) => ({\r\n          isDragging: !!monitor.isDragging()\r\n        }),\r\n        item:{name:props.name}\r\n      }))\r\n\r\n    return(\r\n        <div ref={drag} className=\"contentStyle\">{props.name}</div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Instuments(props:{ \r\n    cOpt:string[],\r\n    cOptVal:string[],\r\n    delete:()=>void, \r\n    edit:()=>void,\r\n    mvR:()=>void,\r\n    mvL:()=>void,\r\n    aR:()=>void,\r\n    rR:()=>void,\r\n    aL:()=>void,\r\n    rL:()=>void,\r\n    changeOption:(newOptVal:string[])=>void\r\n}\r\n    ) {\r\n        const [visible, setVisible] = useState(false);\r\n\r\n    return(\r\n        <>\r\n        <DeleteOutlined className={\"deleteButton buttonStyle\"} onClick={props.delete}/>\r\n        <EditOutlined className={\"editButton buttonStyle\"} onClick={()=>setVisible(!visible)}/>\r\n        <CaretRightOutlined className={\"moveRightButton buttonStyle\"} onClick={props.mvR}/>\r\n\r\n        <CaretLeftOutlined className={\"moveLeftButton buttonStyle\"} onClick={props.mvL}/>\r\n\r\n        <VerticalLeftOutlined className={\"addRightButton buttonStyle\"} onClick={props.aR}/>\r\n        <VerticalRightOutlined className={\"reduceRightButton buttonStyle\" }onClick={props.rR}/>\r\n        <VerticalRightOutlined className={\"addLeftButton buttonStyle\"}onClick={props.aL}/>\r\n        <VerticalLeftOutlined className={\"reduceLeftButton buttonStyle\"}onClick={props.rL}/>\r\n        <Settings changeOption={props.changeOption} visible={visible} cOpt={props.cOpt} cOptVal={props.cOptVal}></Settings>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Settings(props:{visible:boolean ,\r\n    cOpt:string[],\r\n    cOptVal:string[],\r\n    changeOption:(newOptVal:string[])=>void\r\n}\r\n    ) {\r\n\r\n\r\n\r\n    return(\r\n        props.visible?\r\n        <Card className={\"settingsForm\"} onClick={()=>{/*console.log(props.cOpt)*/}}>\r\n            {props.cOptVal.map((r,i)=>{\r\n               return(<DataRowEditable dataStr={props.cOptVal[i]} titleStr={props.cOpt[i]+\":\"} typeName={\"\"+i} \r\n               editFieldCallback={(val: string, param: string)=>editFieldCallback(val,param,props.cOptVal,props.changeOption)}/>)\r\n            })}\r\n        </Card>:\r\n        <></>\r\n    );\r\n}\r\n\r\nfunction editFieldCallback(val: string, param: string, cOptVal:string[],changeOption:(newOptVal:string[])=>void){\r\n\r\n    let buf:string[]=cOptVal;\r\n    var i: number = +param;\r\n    buf[i]=val;\r\n    changeOption(buf);\r\n    \r\n}\r\n\r\nfunction Cell(props:{x:number,y:number,width:number,\r\n    content:string|null,\r\n    cOpt:string[]|null,\r\n    cOptVal:string[]|null,\r\n    edit:()=>void,\r\n    mvR:(x:number,y:number)=>void,\r\n    mvL:(x:number,y:number)=>void,\r\n    aR:(x:number,y:number)=>void,\r\n    rR:(x:number,y:number)=>void,\r\n    aL:(x:number,y:number)=>void,\r\n    rL:(x:number,y:number)=>void,\r\n    delete:(x:number,y:number)=>void, \r\n    insert:(x:number,y:number,item:string, cOpt:string[], cOptVal:string[])=>void, \r\n    changeOption:(x:number,y:number,newOptVal:string[])=>void\r\n}) {\r\n\r\n\r\n    const [{ isOver }, drop] = useDrop(\r\n        () => ({\r\n          accept: \"option\",\r\n          drop: (item:{name:string}) => {\r\n              //console.log(item)\r\n              switch(item.name) {\r\n                case 'text':\r\n                    props.insert(props.x,props.y,\"text\",[\"text\",\"font-size\",\"color\"],[\"text\",\"6px\",\"green\"])\r\n                    break;\r\n                case 'img':\r\n                    props.insert(props.x,props.y,\"img\",[\"img\",\"width\",\"height\"],[\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\",\"100px\",\"150px\"])\r\n                    break;\r\n                  default:\r\n                    break;\r\n              }\r\n              \r\n          },\r\n          collect: (monitor) => ({\r\n            isOver: !!monitor.isOver()\r\n          }),\r\n          hover:(item)=>{\r\n\r\n          }\r\n          \r\n        })\r\n      )\r\n\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    return(\r\n        \r\n        <Col span={props.width}>\r\n            <div  ref={drop} className=\"redactorCell\" onClick={()=>{if(props.content!=null)setVisible(!visible);}}><>\r\n            {(() => {\r\n          //console.log(props.content);\r\n          switch(props.content) {\r\n          case 'text':\r\n              return (<TextBlock  styleTypes={props.cOpt!} styleValues={props.cOptVal!}/>)\r\n          case 'img':\r\n              return(<ImgBlock  styleTypes={props.cOpt!} styleValues={props.cOptVal!}/>)\r\n            default:\r\n              return(<></>)\r\n          }\r\n        })()}\r\n            \r\n            \r\n            </>\r\n         </div>\r\n         {props.content!==null&&visible?<Instuments\r\n            edit={props.edit}\r\n            mvR={()=>{props.mvR(props.x,props.y)}}\r\n            mvL={()=>{props.mvL(props.x,props.y)}}\r\n            aR={()=>{props.aR(props.x,props.y)}}\r\n            rR={()=>{props.rR(props.x,props.y)}}\r\n            aL={()=>{props.aL(props.x,props.y)}}\r\n            rL={()=>{props.rL(props.x,props.y)}}\r\n            delete={()=>{props.delete(props.x,props.y)}}\r\n            cOpt={props.cOpt!}\r\n            cOptVal={props.cOptVal!}\r\n            changeOption={(newOptVal:string[])=>props.changeOption(props.x,props.y,newOptVal)}\r\n            />:<></>}\r\n        </Col>\r\n        \r\n    \r\n    );\r\n}\r\n\r\n\r\nexport class ArticleV extends React.Component<{gridArticle:cel[][]|null},{\r\n\r\n}> {\r\n\r\n    render() {\r\n            \r\n        return(\r\n            <div className=\"articleB\"  title=\"Макет саттьи\">\r\n            {this.props.gridArticle!.map((r,i)=>{\r\n            return(\r\n            <Row>\r\n                <Col span={1}></Col>\r\n                <Col span={22}>\r\n            <Row className={\"\"}>\r\n            {r.map((c,j)=>{\r\n               return(\r\n                <Col span={c.width}>\r\n                {(() => {\r\n              //console.log(props.content);\r\n              switch(c.content) {\r\n              case 'text':\r\n                  return (<TextBlock  styleTypes={c.cOpt!} styleValues={c.cOptVal!}/>)\r\n              case 'img':\r\n                  return(<ImgBlock  styleTypes={c.cOpt!} styleValues={c.cOptVal!}/>)\r\n                default:\r\n                  return(<></>)\r\n              }\r\n            })()}\r\n            </Col>\r\n\r\n               ); \r\n            })}\r\n            </Row>\r\n            </Col>\r\n            <Col span={1}></Col>\r\n             </Row>\r\n            );})}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    export class ArticleBlock extends React.Component<{updateCallback:(content:cel[][])=>void, gridArticle:cel[][]|null, save:(content:cel[][])=>void},{\r\n\r\n    }> {\r\n\r\n        changeOption=(x:number,y:number,newOptVal:string[])=>{\r\n            let buf:cel[][]=this.props.gridArticle!;\r\n            buf[y][x].cOptVal=newOptVal;\r\n            this.props.updateCallback(buf);\r\n        }\r\n\r\n\r\n        delete=(x:number,y:number)=>{\r\n            \r\n            let buf:cel[][]=this.props.gridArticle!;\r\n            let bufw=this.props.gridArticle![y][x].width;\r\n            buf[y].splice(x,1);\r\n            for(let i=0;i< bufw;i++)\r\n            {\r\n                let zel={\r\n                    x:x+i,\r\n                    y:y,\r\n                    width: 1,\r\n                    content: null,\r\n                    cOpt:null,\r\n                    cOptVal:null\r\n                }\r\n                buf[y].splice(x+i,0,zel);\r\n            }\r\n            for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                buf[y][j].x=j;\r\n                buf[y][j].y=y;\r\n            }\r\n            this.props.updateCallback(buf);\r\n        } \r\n        edit=()=>{\r\n            console.log(\"edit\");\r\n        }\r\n        mvR=(x:number,y:number)=>{\r\n            if(x+1<this.props.gridArticle![y].length){\r\n            let buf:cel[][]=this.props.gridArticle!;\r\n            let gridel1:cel=buf[y][x+1];\r\n            gridel1.x=x;\r\n            let gridel2:cel=buf[y][x];\r\n            gridel2.x=x+1;\r\n            buf[y][x]=gridel1;\r\n            buf[y][x+1]=gridel2;\r\n            for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                buf[y][j].x=j;\r\n                buf[y][j].y=y;\r\n            }\r\n            this.props.updateCallback(buf);\r\n            }\r\n        }\r\n        mvL=(x:number,y:number)=>{\r\n            if(x>0){\r\n                let buf:cel[][]=this.props.gridArticle!;\r\n                let gridel1:cel=buf[y][x-1];\r\n                gridel1.x=x;\r\n                let gridel2:cel=buf[y][x];\r\n                gridel2.x=x-1;\r\n                buf[y][x]=gridel1;\r\n                buf[y][x-1]=gridel2;\r\n                for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                    buf[y][j].x=j;\r\n                    buf[y][j].y=y;\r\n                }\r\n                this.props.updateCallback(buf);\r\n                }\r\n        }\r\n        aR=(x:number,y:number)=>{\r\n            if(x+1<this.props.gridArticle![y].length)\r\n            if(this.props.gridArticle![y][x+1].content==null){\r\n                let buf:cel[][]=this.props.gridArticle!;\r\n                let gridel:cel=buf[y][x];\r\n                gridel.width=gridel.width+1;\r\n                buf[y].splice(x,2,gridel);  \r\n                for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                    buf[y][j].x=j;\r\n                    buf[y][j].y=y;\r\n                }\r\n                this.props.updateCallback(buf);\r\n            }\r\n        }\r\n        rR=(x:number,y:number)=>{\r\n            if(this.props.gridArticle![y][x].width>1){\r\n                let buf:cel[][]=this.props.gridArticle!;\r\n                let gridel:cel=buf[y][x];\r\n                    gridel.width=gridel.width-1;\r\n                    gridel.x=gridel.x;\r\n                    let el:cel={\r\n                        x:x,\r\n                        y:y,\r\n                        width:1,\r\n                        content:null,\r\n                        cOpt:null,\r\n                        cOptVal:null\r\n                    }\r\n                    buf[y].splice(x,1,gridel,el);  \r\n                    for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                        buf[y][j].x=j;\r\n                        buf[y][j].y=y;\r\n                    }\r\n                    this.props.updateCallback(buf);\r\n                }\r\n        }\r\n        aL=(x:number,y:number)=>{\r\n            if(x>=1&&this.props.gridArticle![y][x-1].content==null){\r\n                let buf:cel[][]=this.props.gridArticle!;\r\n                let gridel:cel=buf[y][x];\r\n                gridel.width=gridel.width+1;\r\n                gridel.x=gridel.x-1;\r\n                buf[y].splice(x-1,2,gridel);  \r\n            for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                buf[y][j].x=j;\r\n                buf[y][j].y=y;\r\n            }\r\n            this.props.updateCallback(buf);\r\n        }\r\n        }\r\n        rL=(x:number,y:number)=>{\r\n            if(this.props.gridArticle![y][x].width>1){\r\n                let buf:cel[][]=this.props.gridArticle!;\r\n                let gridel:cel=buf[y][x];\r\n                    gridel.width=gridel.width-1;\r\n                    gridel.x=gridel.x+1;\r\n                    let el:cel={\r\n                        x:x,\r\n                        y:y,\r\n                        width:1,\r\n                        content:null ,\r\n                        cOpt:null,\r\n                        cOptVal:null \r\n                    }\r\n                    buf[y].splice(x,1,el,gridel);  \r\n                for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                    buf[y][j].x=j;\r\n                    buf[y][j].y=y;\r\n                }\r\n                this.props.updateCallback(buf);\r\n            }\r\n        }\r\n\r\n        addRow=()=>{\r\n            let buf:cel[][]=this.props.gridArticle!;\r\n            let gridRow:cel[] =[]\r\n            for (var j = 0; j < 24; j++) {\r\n                let el:cel={\r\n                    x:j,\r\n                    y:this.props.gridArticle!.length,\r\n                    width:1,\r\n                    content:null ,\r\n                    cOpt:null,\r\n                    cOptVal:null \r\n                }\r\n               gridRow.splice(j,0,el);\r\n            }\r\n            buf.splice(this.props.gridArticle!.length+1,0,gridRow);\r\n            this.props.updateCallback(buf);\r\n        }\r\n\r\n        deleteRow=(y:number)=>{\r\n             let buf:cel[][]=this.props.gridArticle!;\r\n             buf.splice(y,1);\r\n\r\n             for (let i=0;i<buf.length;i++)\r\n             {\r\n                for (let j=0;j<buf[i].length;j++)\r\n             {\r\n                 buf[i][j].y=i\r\n             } \r\n             }\r\n             this.props.updateCallback(buf);\r\n        }\r\n\r\n        insert=(x:number,y:number,item:string, cOpt:string[], cOptVal:string[])=>{\r\n            let buf:cel[][]=this.props.gridArticle!;\r\n            let bufel={\r\n                x:x,\r\n                y:y,\r\n                width: this.props.gridArticle![y][x].width,\r\n                content: item,\r\n                cOpt:cOpt,\r\n                cOptVal:cOptVal\r\n            }\r\n            buf[y][x]=bufel;\r\n            for (var j = 0; j <buf[y].length; j++) {\r\n            \r\n                buf[y][j].x=j;\r\n                buf[y][j].y=y;\r\n            }\r\n            this.props.updateCallback(buf);\r\n        }    \r\n\r\n\r\n        update=()=>{\r\n            console.log(JSON.stringify(this.props.gridArticle!))\r\n        }   \r\n        \r\n        send=()=>{\r\n            console.log(JSON.stringify(this.props.gridArticle!))\r\n        }\r\n        /*insertComponent=(x:number,y:number,width:number,component:JSX.Element)=>{\r\n            if(x+width>24) {x=24-width}\r\n            let buf:JSX.Element[][]=this.state.grid;\r\n            buf[y].splice(x,width,<Cell x={x} y={y} width={width} content={component} insertComponent={()=>{}} deleteComponent={this.deleteComponent}/>);\r\n            this.setState({grid:buf})\r\n        }*/\r\n\r\n\r\n\r\n\r\n        constructor(props:{rows:number, updateCallback:(content:cel[][])=>void, cels:number, gridArticle:cel[][]|null, save:(content:cel[][])=>void}) {\r\n            super(props);\r\n\r\n            if (this.props.gridArticle!==null){\r\n\r\n            }\r\n            else{\r\n                let buf:cel[][]=[]\r\n                for (var i = 0; i < this.props.gridArticle!.length; i++) {\r\n                    let gridRow:cel[] =[]\r\n                    for (var j = 0; j < 24; j++) {\r\n                        let el:cel={\r\n                            x:j,\r\n                            y:i,\r\n                            width:1,\r\n                            content:null ,\r\n                            cOpt:null,\r\n                            cOptVal:null \r\n                        }\r\n                       gridRow.splice(j,0,el);\r\n                    }\r\n                    buf.splice(i,0,gridRow);\r\n                    this.props.updateCallback(buf);\r\n                }\r\n                this.state={\r\n                    rows:buf.length,\r\n                    cels:24,\r\n                }\r\n            }\r\n           // this.state.grid[3][3].content=ComponentsBlock[6];\r\n            //this.state.grid[3][6].content=ComponentsBlock[6];\r\n           // console.log(this.state.grid)\r\n        }\r\n\r\n        /*\r\n        <Cell x={1} y={1} width={1} content={<>2</>}\r\n                    edit={this.edit}\r\n                    mvR={this.mvR}\r\n                    mvL={this.mvL}\r\n                    mvT={this.mvT}\r\n                    mvB={this.mvB}\r\n                    aR={this.aR}\r\n                    rR={this.rR}\r\n                    aL={this.aL}\r\n                    rL={this.rL}\r\n                    delete={this.delete}\r\n        */\r\n        \r\n        render() {\r\n            \r\n            return(\r\n                <Card className=\"articleBody\"  title=\"Макет статьи\">\r\n                {this.props.gridArticle!.map((r,i)=>{\r\n                return(\r\n                <Row>\r\n                    <Col span={1}></Col>\r\n                    <Col span={22}>\r\n                <Row className={\"redactorRow\"}>\r\n                {r.map((c,j)=>{\r\n                   return(\r\n                    <Cell x={this.props.gridArticle![i][j].x} y={this.props.gridArticle![i][j].y} width={this.props.gridArticle![i][j].width} \r\n                    content={this.props.gridArticle![i][j].content }\r\n                    cOpt={this.props.gridArticle![i][j].cOpt}\r\n                    cOptVal={this.props.gridArticle![i][j].cOptVal}\r\n                    edit={this.edit}\r\n                    mvR={this.mvR}\r\n                    mvL={this.mvL}\r\n                    aR={this.aR}\r\n                    rR={this.rR}\r\n                    aL={this.aL}\r\n                    rL={this.rL}\r\n                    delete={this.delete}\r\n                    insert={this.insert}\r\n                    changeOption={this.changeOption}\r\n                    />\r\n    \r\n                   ); \r\n                })}\r\n                <DeleteOutlined className={\"delRowButton\"} type=\"dashed\" onClick={()=>this.deleteRow(i)}/>\r\n                </Row>\r\n                </Col>\r\n                <Col span={1}></Col>\r\n                 </Row>\r\n                )\r\n             })}\r\n             {this.props.gridArticle!.length}: {24}\r\n             <Divider/>\r\n\r\n             <Row >\r\n                <Col span={1}></Col>\r\n\r\n                <Col span={22}>\r\n                <Button type=\"dashed\" onClick={()=>this.addRow()}>Add</Button>\r\n                <Button type=\"dashed\" onClick={()=>this.update()}>Update</Button>\r\n                <Button type=\"dashed\" onClick={()=>{console.log(JSON.stringify(this.props.gridArticle!));this.props.save(this.props.gridArticle!)}}>Save</Button>\r\n                </Col>\r\n                <Col span={1}></Col>\r\n             </Row>\r\n                </Card>\r\n            );\r\n        }\r\n\r\n      \r\n\r\n    }\r\n\r\nexport default Redactor;\r\n\r\n",{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","severity":1,"message":"307","line":13,"column":11,"nodeType":"308","messageId":"309","endLine":13,"endColumn":21},{"ruleId":"310","severity":1,"message":"311","line":103,"column":1,"nodeType":"312","endLine":103,"endColumn":44},{"ruleId":"310","severity":1,"message":"311","line":86,"column":1,"nodeType":"312","endLine":86,"endColumn":48},{"ruleId":"306","severity":1,"message":"313","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":12},{"ruleId":"306","severity":1,"message":"314","line":6,"column":14,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"315","line":12,"column":6,"nodeType":"308","messageId":"309","endLine":12,"endColumn":13},{"ruleId":"306","severity":1,"message":"316","line":13,"column":6,"nodeType":"308","messageId":"309","endLine":13,"endColumn":16},{"ruleId":"306","severity":1,"message":"313","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":12},{"ruleId":"306","severity":1,"message":"314","line":6,"column":14,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"317","line":12,"column":6,"nodeType":"308","messageId":"309","endLine":12,"endColumn":16},{"ruleId":"306","severity":1,"message":"318","line":13,"column":6,"nodeType":"308","messageId":"309","endLine":13,"endColumn":19},{"ruleId":"306","severity":1,"message":"319","line":269,"column":9,"nodeType":"308","messageId":"309","endLine":269,"endColumn":16},{"ruleId":"306","severity":1,"message":"313","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":12},{"ruleId":"306","severity":1,"message":"314","line":6,"column":14,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"320","line":12,"column":6,"nodeType":"308","messageId":"309","endLine":12,"endColumn":18},{"ruleId":"306","severity":1,"message":"321","line":13,"column":6,"nodeType":"308","messageId":"309","endLine":13,"endColumn":19},{"ruleId":"306","severity":1,"message":"322","line":116,"column":15,"nodeType":"308","messageId":"309","endLine":116,"endColumn":27},{"ruleId":"310","severity":1,"message":"311","line":185,"column":1,"nodeType":"312","endLine":185,"endColumn":24},{"ruleId":"306","severity":1,"message":"323","line":12,"column":5,"nodeType":"308","messageId":"309","endLine":12,"endColumn":10},{"ruleId":"306","severity":1,"message":"324","line":13,"column":5,"nodeType":"308","messageId":"309","endLine":13,"endColumn":15},{"ruleId":"306","severity":1,"message":"307","line":16,"column":11,"nodeType":"308","messageId":"309","endLine":16,"endColumn":21},{"ruleId":"306","severity":1,"message":"325","line":17,"column":27,"nodeType":"308","messageId":"309","endLine":17,"endColumn":34},{"ruleId":"306","severity":1,"message":"326","line":17,"column":47,"nodeType":"308","messageId":"309","endLine":17,"endColumn":52},{"ruleId":"306","severity":1,"message":"327","line":18,"column":9,"nodeType":"308","messageId":"309","endLine":18,"endColumn":18},{"ruleId":"328","severity":1,"message":"329","line":102,"column":33,"nodeType":"330","messageId":"331","endLine":102,"endColumn":35},{"ruleId":"332","severity":1,"message":"333","line":103,"column":49,"nodeType":"334","messageId":"335","endLine":103,"endColumn":51},{"ruleId":"306","severity":1,"message":"323","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":10},{"ruleId":"306","severity":1,"message":"324","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":15},{"ruleId":"306","severity":1,"message":"307","line":15,"column":11,"nodeType":"308","messageId":"309","endLine":15,"endColumn":21},{"ruleId":"306","severity":1,"message":"336","line":17,"column":12,"nodeType":"308","messageId":"309","endLine":17,"endColumn":18},{"ruleId":"306","severity":1,"message":"337","line":18,"column":10,"nodeType":"308","messageId":"309","endLine":18,"endColumn":22},{"ruleId":"306","severity":1,"message":"338","line":25,"column":10,"nodeType":"308","messageId":"309","endLine":25,"endColumn":18},{"ruleId":"306","severity":1,"message":"339","line":25,"column":20,"nodeType":"308","messageId":"309","endLine":25,"endColumn":24},{"ruleId":"306","severity":1,"message":"325","line":25,"column":26,"nodeType":"308","messageId":"309","endLine":25,"endColumn":33},{"ruleId":"306","severity":1,"message":"326","line":25,"column":46,"nodeType":"308","messageId":"309","endLine":25,"endColumn":51},{"ruleId":"306","severity":1,"message":"340","line":26,"column":28,"nodeType":"308","messageId":"309","endLine":26,"endColumn":32},{"ruleId":"306","severity":1,"message":"341","line":29,"column":8,"nodeType":"308","messageId":"309","endLine":29,"endColumn":16},{"ruleId":"306","severity":1,"message":"342","line":31,"column":8,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"306","severity":1,"message":"313","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":12},{"ruleId":"306","severity":1,"message":"314","line":6,"column":14,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"343","line":7,"column":8,"nodeType":"308","messageId":"309","endLine":7,"endColumn":17},{"ruleId":"306","severity":1,"message":"344","line":7,"column":6,"nodeType":"308","messageId":"309","endLine":7,"endColumn":19},{"ruleId":"306","severity":1,"message":"345","line":8,"column":6,"nodeType":"308","messageId":"309","endLine":8,"endColumn":16},{"ruleId":"306","severity":1,"message":"345","line":15,"column":6,"nodeType":"308","messageId":"309","endLine":15,"endColumn":16},{"ruleId":"328","severity":1,"message":"329","line":31,"column":44,"nodeType":"330","messageId":"331","endLine":31,"endColumn":46},{"ruleId":"328","severity":1,"message":"329","line":30,"column":54,"nodeType":"330","messageId":"331","endLine":30,"endColumn":56},{"ruleId":"328","severity":1,"message":"329","line":48,"column":54,"nodeType":"330","messageId":"331","endLine":48,"endColumn":56},{"ruleId":"306","severity":1,"message":"346","line":6,"column":10,"nodeType":"308","messageId":"309","endLine":6,"endColumn":25},{"ruleId":"306","severity":1,"message":"347","line":7,"column":9,"nodeType":"308","messageId":"309","endLine":7,"endColumn":17},{"ruleId":"306","severity":1,"message":"339","line":7,"column":19,"nodeType":"308","messageId":"309","endLine":7,"endColumn":23},{"ruleId":"306","severity":1,"message":"338","line":7,"column":25,"nodeType":"308","messageId":"309","endLine":7,"endColumn":33},{"ruleId":"306","severity":1,"message":"348","line":7,"column":35,"nodeType":"308","messageId":"309","endLine":7,"endColumn":41},{"ruleId":"306","severity":1,"message":"326","line":7,"column":43,"nodeType":"308","messageId":"309","endLine":7,"endColumn":48},{"ruleId":"306","severity":1,"message":"313","line":7,"column":66,"nodeType":"308","messageId":"309","endLine":7,"endColumn":69},{"ruleId":"306","severity":1,"message":"314","line":7,"column":71,"nodeType":"308","messageId":"309","endLine":7,"endColumn":74},{"ruleId":"306","severity":1,"message":"349","line":7,"column":75,"nodeType":"308","messageId":"309","endLine":7,"endColumn":79},{"ruleId":"306","severity":1,"message":"350","line":7,"column":85,"nodeType":"308","messageId":"309","endLine":7,"endColumn":93},{"ruleId":"306","severity":1,"message":"351","line":7,"column":94,"nodeType":"308","messageId":"309","endLine":7,"endColumn":100},{"ruleId":"306","severity":1,"message":"325","line":7,"column":101,"nodeType":"308","messageId":"309","endLine":7,"endColumn":108},{"ruleId":"306","severity":1,"message":"352","line":7,"column":109,"nodeType":"308","messageId":"309","endLine":7,"endColumn":116},{"ruleId":"306","severity":1,"message":"353","line":7,"column":117,"nodeType":"308","messageId":"309","endLine":7,"endColumn":127},{"ruleId":"306","severity":1,"message":"336","line":7,"column":128,"nodeType":"308","messageId":"309","endLine":7,"endColumn":134},{"ruleId":"306","severity":1,"message":"354","line":9,"column":9,"nodeType":"308","messageId":"309","endLine":9,"endColumn":23},{"ruleId":"306","severity":1,"message":"355","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":15},{"ruleId":"306","severity":1,"message":"356","line":12,"column":5,"nodeType":"308","messageId":"309","endLine":12,"endColumn":18},{"ruleId":"306","severity":1,"message":"357","line":13,"column":5,"nodeType":"308","messageId":"309","endLine":13,"endColumn":17},{"ruleId":"306","severity":1,"message":"358","line":14,"column":5,"nodeType":"308","messageId":"309","endLine":14,"endColumn":21},{"ruleId":"306","severity":1,"message":"359","line":15,"column":5,"nodeType":"308","messageId":"309","endLine":15,"endColumn":20},{"ruleId":"306","severity":1,"message":"360","line":16,"column":5,"nodeType":"308","messageId":"309","endLine":16,"endColumn":19},{"ruleId":"306","severity":1,"message":"361","line":17,"column":5,"nodeType":"308","messageId":"309","endLine":17,"endColumn":21},{"ruleId":"306","severity":1,"message":"362","line":18,"column":5,"nodeType":"308","messageId":"309","endLine":18,"endColumn":18},{"ruleId":"306","severity":1,"message":"363","line":24,"column":6,"nodeType":"308","messageId":"309","endLine":24,"endColumn":13},{"ruleId":"328","severity":1,"message":"364","line":327,"column":63,"nodeType":"330","messageId":"365","endLine":327,"endColumn":65},{"ruleId":"328","severity":1,"message":"329","line":419,"column":47,"nodeType":"330","messageId":"331","endLine":419,"endColumn":49},{"ruleId":"366","severity":1,"message":"367","line":425,"column":29,"nodeType":"368","messageId":"369","endLine":425,"endColumn":35},{"ruleId":"366","severity":1,"message":"367","line":451,"column":30,"nodeType":"368","messageId":"369","endLine":451,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":457,"column":29,"nodeType":"368","messageId":"369","endLine":457,"endColumn":35},{"ruleId":"306","severity":1,"message":"370","line":5,"column":8,"nodeType":"308","messageId":"309","endLine":5,"endColumn":13},{"ruleId":"306","severity":1,"message":"339","line":6,"column":19,"nodeType":"308","messageId":"309","endLine":6,"endColumn":23},{"ruleId":"306","severity":1,"message":"338","line":6,"column":25,"nodeType":"308","messageId":"309","endLine":6,"endColumn":33},{"ruleId":"306","severity":1,"message":"348","line":6,"column":35,"nodeType":"308","messageId":"309","endLine":6,"endColumn":41},{"ruleId":"306","severity":1,"message":"326","line":6,"column":43,"nodeType":"308","messageId":"309","endLine":6,"endColumn":48},{"ruleId":"306","severity":1,"message":"371","line":6,"column":80,"nodeType":"308","messageId":"309","endLine":6,"endColumn":84},{"ruleId":"306","severity":1,"message":"350","line":6,"column":85,"nodeType":"308","messageId":"309","endLine":6,"endColumn":93},{"ruleId":"306","severity":1,"message":"351","line":6,"column":94,"nodeType":"308","messageId":"309","endLine":6,"endColumn":100},{"ruleId":"306","severity":1,"message":"325","line":6,"column":101,"nodeType":"308","messageId":"309","endLine":6,"endColumn":108},{"ruleId":"306","severity":1,"message":"357","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":17},{"ruleId":"306","severity":1,"message":"372","line":16,"column":8,"nodeType":"308","messageId":"309","endLine":16,"endColumn":14},{"ruleId":"306","severity":1,"message":"373","line":17,"column":10,"nodeType":"308","messageId":"309","endLine":17,"endColumn":15},{"ruleId":"306","severity":1,"message":"374","line":18,"column":45,"nodeType":"308","messageId":"309","endLine":18,"endColumn":64},{"ruleId":"306","severity":1,"message":"375","line":21,"column":10,"nodeType":"308","messageId":"309","endLine":21,"endColumn":23},{"ruleId":"306","severity":1,"message":"376","line":24,"column":9,"nodeType":"308","messageId":"309","endLine":24,"endColumn":15},{"ruleId":"306","severity":1,"message":"377","line":27,"column":9,"nodeType":"308","messageId":"309","endLine":27,"endColumn":14},{"ruleId":"306","severity":1,"message":"340","line":27,"column":16,"nodeType":"308","messageId":"309","endLine":27,"endColumn":20},{"ruleId":"306","severity":1,"message":"378","line":30,"column":6,"nodeType":"308","messageId":"309","endLine":30,"endColumn":13},{"ruleId":"306","severity":1,"message":"379","line":31,"column":6,"nodeType":"308","messageId":"309","endLine":31,"endColumn":13},{"ruleId":"306","severity":1,"message":"380","line":32,"column":6,"nodeType":"308","messageId":"309","endLine":32,"endColumn":10},{"ruleId":"306","severity":1,"message":"381","line":33,"column":6,"nodeType":"308","messageId":"309","endLine":33,"endColumn":10},{"ruleId":"306","severity":1,"message":"382","line":34,"column":6,"nodeType":"308","messageId":"309","endLine":34,"endColumn":12},{"ruleId":"383","severity":1,"message":"384","line":486,"column":13,"nodeType":"385","endLine":486,"endColumn":23},{"ruleId":"306","severity":1,"message":"370","line":5,"column":8,"nodeType":"308","messageId":"309","endLine":5,"endColumn":13},{"ruleId":"306","severity":1,"message":"347","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"326","line":6,"column":43,"nodeType":"308","messageId":"309","endLine":6,"endColumn":48},{"ruleId":"306","severity":1,"message":"313","line":6,"column":66,"nodeType":"308","messageId":"309","endLine":6,"endColumn":69},{"ruleId":"306","severity":1,"message":"314","line":6,"column":71,"nodeType":"308","messageId":"309","endLine":6,"endColumn":74},{"ruleId":"306","severity":1,"message":"371","line":6,"column":80,"nodeType":"308","messageId":"309","endLine":6,"endColumn":84},{"ruleId":"306","severity":1,"message":"350","line":6,"column":85,"nodeType":"308","messageId":"309","endLine":6,"endColumn":93},{"ruleId":"306","severity":1,"message":"351","line":6,"column":94,"nodeType":"308","messageId":"309","endLine":6,"endColumn":100},{"ruleId":"306","severity":1,"message":"325","line":6,"column":101,"nodeType":"308","messageId":"309","endLine":6,"endColumn":108},{"ruleId":"306","severity":1,"message":"352","line":6,"column":109,"nodeType":"308","messageId":"309","endLine":6,"endColumn":116},{"ruleId":"306","severity":1,"message":"353","line":6,"column":117,"nodeType":"308","messageId":"309","endLine":6,"endColumn":127},{"ruleId":"306","severity":1,"message":"336","line":6,"column":128,"nodeType":"308","messageId":"309","endLine":6,"endColumn":134},{"ruleId":"306","severity":1,"message":"355","line":8,"column":5,"nodeType":"308","messageId":"309","endLine":8,"endColumn":15},{"ruleId":"306","severity":1,"message":"356","line":9,"column":5,"nodeType":"308","messageId":"309","endLine":9,"endColumn":18},{"ruleId":"306","severity":1,"message":"358","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":21},{"ruleId":"306","severity":1,"message":"359","line":12,"column":5,"nodeType":"308","messageId":"309","endLine":12,"endColumn":20},{"ruleId":"306","severity":1,"message":"360","line":13,"column":5,"nodeType":"308","messageId":"309","endLine":13,"endColumn":19},{"ruleId":"306","severity":1,"message":"361","line":14,"column":5,"nodeType":"308","messageId":"309","endLine":14,"endColumn":21},{"ruleId":"306","severity":1,"message":"372","line":18,"column":8,"nodeType":"308","messageId":"309","endLine":18,"endColumn":14},{"ruleId":"306","severity":1,"message":"373","line":19,"column":10,"nodeType":"308","messageId":"309","endLine":19,"endColumn":15},{"ruleId":"306","severity":1,"message":"386","line":20,"column":9,"nodeType":"308","messageId":"309","endLine":20,"endColumn":16},{"ruleId":"306","severity":1,"message":"387","line":20,"column":17,"nodeType":"308","messageId":"309","endLine":20,"endColumn":32},{"ruleId":"306","severity":1,"message":"388","line":20,"column":33,"nodeType":"308","messageId":"309","endLine":20,"endColumn":44},{"ruleId":"306","severity":1,"message":"374","line":20,"column":45,"nodeType":"308","messageId":"309","endLine":20,"endColumn":64},{"ruleId":"306","severity":1,"message":"389","line":23,"column":9,"nodeType":"308","messageId":"309","endLine":23,"endColumn":13},{"ruleId":"306","severity":1,"message":"376","line":24,"column":9,"nodeType":"308","messageId":"309","endLine":24,"endColumn":15},{"ruleId":"306","severity":1,"message":"327","line":25,"column":9,"nodeType":"308","messageId":"309","endLine":25,"endColumn":18},{"ruleId":"306","severity":1,"message":"390","line":26,"column":9,"nodeType":"308","messageId":"309","endLine":26,"endColumn":13},{"ruleId":"306","severity":1,"message":"377","line":27,"column":9,"nodeType":"308","messageId":"309","endLine":27,"endColumn":14},{"ruleId":"306","severity":1,"message":"340","line":27,"column":16,"nodeType":"308","messageId":"309","endLine":27,"endColumn":20},{"ruleId":"306","severity":1,"message":"378","line":30,"column":6,"nodeType":"308","messageId":"309","endLine":30,"endColumn":13},{"ruleId":"306","severity":1,"message":"379","line":31,"column":6,"nodeType":"308","messageId":"309","endLine":31,"endColumn":13},{"ruleId":"306","severity":1,"message":"380","line":32,"column":6,"nodeType":"308","messageId":"309","endLine":32,"endColumn":10},{"ruleId":"306","severity":1,"message":"381","line":33,"column":6,"nodeType":"308","messageId":"309","endLine":33,"endColumn":10},{"ruleId":"306","severity":1,"message":"382","line":34,"column":6,"nodeType":"308","messageId":"309","endLine":34,"endColumn":12},{"ruleId":"328","severity":1,"message":"329","line":71,"column":37,"nodeType":"330","messageId":"331","endLine":71,"endColumn":39},{"ruleId":"332","severity":1,"message":"333","line":72,"column":56,"nodeType":"334","messageId":"335","endLine":72,"endColumn":58},{"ruleId":"328","severity":1,"message":"329","line":156,"column":47,"nodeType":"330","messageId":"331","endLine":156,"endColumn":49},{"ruleId":"332","severity":1,"message":"333","line":157,"column":52,"nodeType":"334","messageId":"335","endLine":157,"endColumn":54},{"ruleId":"310","severity":1,"message":"311","line":201,"column":1,"nodeType":"312","endLine":201,"endColumn":49},{"ruleId":"306","severity":1,"message":"326","line":10,"column":45,"nodeType":"308","messageId":"309","endLine":10,"endColumn":50},{"ruleId":"306","severity":1,"message":"391","line":4,"column":10,"nodeType":"308","messageId":"309","endLine":4,"endColumn":15},{"ruleId":"306","severity":1,"message":"313","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":12},{"ruleId":"306","severity":1,"message":"314","line":6,"column":14,"nodeType":"308","messageId":"309","endLine":6,"endColumn":17},{"ruleId":"306","severity":1,"message":"343","line":7,"column":8,"nodeType":"308","messageId":"309","endLine":7,"endColumn":17},{"ruleId":"306","severity":1,"message":"319","line":519,"column":9,"nodeType":"308","messageId":"309","endLine":519,"endColumn":16},{"ruleId":"306","severity":1,"message":"371","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":13},{"ruleId":"306","severity":1,"message":"392","line":6,"column":15,"nodeType":"308","messageId":"309","endLine":6,"endColumn":20},{"ruleId":"306","severity":1,"message":"393","line":6,"column":30,"nodeType":"308","messageId":"309","endLine":6,"endColumn":38},{"ruleId":"306","severity":1,"message":"394","line":6,"column":67,"nodeType":"308","messageId":"309","endLine":6,"endColumn":72},{"ruleId":"306","severity":1,"message":"395","line":6,"column":98,"nodeType":"308","messageId":"309","endLine":6,"endColumn":106},{"ruleId":"306","severity":1,"message":"396","line":10,"column":10,"nodeType":"308","messageId":"309","endLine":10,"endColumn":24},{"ruleId":"306","severity":1,"message":"397","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":12},{"ruleId":"306","severity":1,"message":"398","line":12,"column":8,"nodeType":"308","messageId":"309","endLine":12,"endColumn":12},{"ruleId":"306","severity":1,"message":"399","line":13,"column":8,"nodeType":"308","messageId":"309","endLine":13,"endColumn":17},{"ruleId":"306","severity":1,"message":"356","line":18,"column":5,"nodeType":"308","messageId":"309","endLine":18,"endColumn":18},{"ruleId":"306","severity":1,"message":"362","line":19,"column":5,"nodeType":"308","messageId":"309","endLine":19,"endColumn":18},{"ruleId":"306","severity":1,"message":"400","line":27,"column":10,"nodeType":"308","messageId":"309","endLine":27,"endColumn":19},{"ruleId":"306","severity":1,"message":"317","line":30,"column":6,"nodeType":"308","messageId":"309","endLine":30,"endColumn":16},{"ruleId":"306","severity":1,"message":"318","line":31,"column":6,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"306","severity":1,"message":"401","line":32,"column":6,"nodeType":"308","messageId":"309","endLine":32,"endColumn":19},{"ruleId":"306","severity":1,"message":"402","line":33,"column":6,"nodeType":"308","messageId":"309","endLine":33,"endColumn":16},{"ruleId":"306","severity":1,"message":"403","line":298,"column":14,"nodeType":"308","messageId":"309","endLine":298,"endColumn":24},{"ruleId":"306","severity":1,"message":"404","line":402,"column":14,"nodeType":"308","messageId":"309","endLine":402,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":609,"column":30,"nodeType":"385","messageId":"407","endLine":609,"endColumn":38},"no-native-reassign",["408"],"no-negated-in-lhs",["409"],"@typescript-eslint/no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Row' is defined but never used.","'Col' is defined but never used.","'getUser' is defined but never used.","'deleteUser' is defined but never used.","'getArticle' is defined but never used.","'deleteArticle' is defined but never used.","'request' is assigned a value but never used.","'getCompanies' is defined but never used.","'deleteCompany' is defined but never used.","'enterLoading' is assigned a value but never used.","'Route' is defined but never used.","'withRouter' is defined but never used.","'message' is defined but never used.","'Space' is defined but never used.","'Paragraph' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Avatar' is defined but never used.","'UserOutlined' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'Text' is assigned a value but never used.","'userData' is defined but never used.","'companyData' is defined but never used.","'AddEntity' is defined but never used.","'updateCompany' is defined but never used.","'addCompany' is defined but never used.","'timingSafeEqual' is defined but never used.","'Skeleton' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'Cascader' is defined but never used.","'Select' is defined but never used.","'Divider' is defined but never used.","'Popconfirm' is defined but never used.","'MultiplyPicker' is defined but never used.","'UpOutlined' is defined but never used.","'CheckOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'EllipsisOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'RollbackOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","'addUser' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'axios' is defined but never used.","'Form' is defined but never used.","'Switch' is defined but never used.","'spawn' is defined but never used.","'DataRowListEditable' is defined but never used.","'ConsoleLogger' is defined but never used.","'Search' is assigned a value but never used.","'Title' is assigned a value but never used.","'company' is defined but never used.","'article' is defined but never used.","'role' is defined but never used.","'task' is defined but never used.","'emploe' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'DataRow' is defined but never used.","'DataRowEditable' is defined but never used.","'DataRowList' is defined but never used.","'Step' is assigned a value but never used.","'Meta' is assigned a value but never used.","'paths' is defined but never used.","'Input' is defined but never used.","'Checkbox' is defined but never used.","'Table' is defined but never used.","'Carousel' is defined but never used.","'isThisTypeNode' is defined but never used.","'Grid' is defined but never used.","'Item' is defined but never used.","'Paragraph' is defined but never used.","'OmitProps' is defined but never used.","'updateArticle' is defined but never used.","'addArticle' is defined but never used.","'isDragging' is assigned a value but never used.","'isOver' is assigned a value but never used.","no-self-assign","'gridel.x' is assigned to itself.","selfAssignment","no-global-assign","no-unsafe-negation"]