[{"D:\\diploma\\CMS\\frontEnd\\src\\index.tsx":"1","D:\\diploma\\CMS\\frontEnd\\src\\reportWebVitals.ts":"2","D:\\diploma\\CMS\\frontEnd\\src\\App.tsx":"3","D:\\diploma\\CMS\\frontEnd\\src\\profile\\profile.tsx":"4","D:\\diploma\\CMS\\frontEnd\\src\\login\\login.tsx":"5","D:\\diploma\\CMS\\frontEnd\\src\\settings\\settings.tsx":"6","D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\mainPart\\mainPart.tsx":"7","D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx":"8","D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx":"9","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\infographics\\infographics.tsx":"10","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\employee\\employee.tsx":"11","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\company\\company.tsx":"12","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\role\\role.tsx":"13","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\article\\article.tsx":"14","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\task\\task.tsx":"15","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx":"16","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx":"17","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx":"18","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx":"19","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx":"20","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx":"21","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx":"22","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx":"23","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx":"24","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx":"25","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx":"26","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx":"27","D:\\diploma\\CMS\\frontEnd\\src\\redactor\\redactor.tsx":"28"},{"size":545,"mtime":1616538762116,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1616538761801,"results":"31","hashOfConfig":"30"},{"size":1070,"mtime":1616538762113,"results":"32","hashOfConfig":"30"},{"size":7564,"mtime":1616538762001,"results":"33","hashOfConfig":"30"},{"size":5282,"mtime":1616538761997,"results":"34","hashOfConfig":"30"},{"size":2356,"mtime":1616538762080,"results":"35","hashOfConfig":"30"},{"size":2583,"mtime":1616538761994,"results":"36","hashOfConfig":"30"},{"size":3136,"mtime":1616538761990,"results":"37","hashOfConfig":"30"},{"size":1966,"mtime":1616538761987,"results":"38","hashOfConfig":"30"},{"size":271,"mtime":1616538761948,"results":"39","hashOfConfig":"30"},{"size":14495,"mtime":1616538761946,"results":"40","hashOfConfig":"30"},{"size":12843,"mtime":1616538761836,"results":"41","hashOfConfig":"30"},{"size":10875,"mtime":1616538761950,"results":"42","hashOfConfig":"30"},{"size":12328,"mtime":1616538761832,"results":"43","hashOfConfig":"30"},{"size":22874,"mtime":1616538761954,"results":"44","hashOfConfig":"30"},{"size":4805,"mtime":1616538761917,"results":"45","hashOfConfig":"30"},{"size":778,"mtime":1616538761840,"results":"46","hashOfConfig":"30"},{"size":1494,"mtime":1616538761932,"results":"47","hashOfConfig":"30"},{"size":2286,"mtime":1616538761852,"results":"48","hashOfConfig":"30"},{"size":24241,"mtime":1616538761881,"results":"49","hashOfConfig":"30"},{"size":2032,"mtime":1616538761845,"results":"50","hashOfConfig":"30"},{"size":2357,"mtime":1616538761921,"results":"51","hashOfConfig":"30"},{"size":3519,"mtime":1616538761928,"results":"52","hashOfConfig":"30"},{"size":1142,"mtime":1616538761925,"results":"53","hashOfConfig":"30"},{"size":14927,"mtime":1616538761849,"results":"54","hashOfConfig":"30"},{"size":6287,"mtime":1616538761903,"results":"55","hashOfConfig":"30"},{"size":5002,"mtime":1616538761900,"results":"56","hashOfConfig":"30"},{"size":17911,"mtime":1616538762050,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"91rds8",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"60"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"60"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"60"},"D:\\diploma\\CMS\\frontEnd\\src\\index.tsx",[],["136","137"],"D:\\diploma\\CMS\\frontEnd\\src\\reportWebVitals.ts",[],"D:\\diploma\\CMS\\frontEnd\\src\\App.tsx",["138"],"import React from 'react';\nimport './App.css';\nimport {Login} from \"./login/login\";\nimport {Settings} from \"./settings/settings\";\nimport {Profile} from \"./profile/profile\";\nimport MainPart from \"./base/mainInterface/mainPart/mainPart\"\nimport {Redactor} from \"./redactor/redactor\";\nimport {\n    Switch,\n    Route,\n  } from \"react-router-dom\";\n\n  import {useHistory} from \"react-router-dom\";\n\n  \nexport class App extends React.Component<{},{}> {\n\n  \n    render() {\n        return(\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/home/alltexts/:id\">\n            <MainPart></MainPart>\n          </Route>\n          <Route path=\"/home\">\n            <MainPart></MainPart>\n          </Route>\n          <Route path=\"/settings\">\n            <Settings></Settings>\n          </Route>\n          <Route path=\"/profile\">\n            <Profile></Profile>\n          </Route>\n          <Route path=\"/redactor\">\n            <Redactor></Redactor>\n          </Route>\n        </Switch>\n        );\n    }\n}\n\nexport default App;\n\n","D:\\diploma\\CMS\\frontEnd\\src\\profile\\profile.tsx",["139","140","141","142","143","144","145","146","147","148","149","150"],"import React from 'react';\nimport './profile.css';\nimport 'antd/dist/antd.css';\nimport {Layout,BackTop,Row,Col,Button} from 'antd';\nimport {\n    RollbackOutlined\n} from '@ant-design/icons';\n\nimport {\n    Route,\n    withRouter\n  } from \"react-router-dom\";\n  import { paths } from '../swaggerCode/swaggerCode';\n  import { Divider } from 'antd';\n  import {useHistory} from \"react-router-dom\";\n  import axios from 'axios';\n  import { Avatar } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport {\n    Link\n  } from \"react-router-dom\";\n\n // type userData=paths[\"/api/User/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n\n import {Dropdown, Menu, message, Typography,Space} from \"antd\";\n const { Title, Paragraph, Text} = Typography;\n\n\n  type userData = paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0];\n  \n  type companyData = paths[\"/api/Company/{id}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\n/**\n * Класс компонента профиля пользователя\n */\nexport class Profile extends React.Component<{},{}> {\n    state={\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        userD:{\n            id: \"\",\n            companyId:\"\",\n            email: \"\",\n            firstName:\"\",\n            lastName: \"\",\n            roles: []\n        },\n        companyD : {\n            id: \"\",\n            name: \"\"\n        },\n        loading:true\n\n    }\n       render() {\n        return(       \n        <Layout className=\"site-layout whole-layout\">\n        <Layout.Header className=\"site-layout-background\" style={{ padding: 0 }}>\n\n        </Layout.Header>\n        <Layout.Content\n                    className=\"site-layout-background\"\n                    style={{\n                        margin: '24px 16px',\n                        padding: 24,\n                    }}\n                >\n                    <Row gutter={[0, 48]}>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row gutter={[0, 48]}>\n                        <Col span={1}></Col>\n                        <Link to=\"/home/inwork\">\n                        <Button icon={<RollbackOutlined style={{ fontSize: '20px'}}/>} onClick={() =>{ \n                            console.log(\"back\");\n                        }}>\n                        \n                        \n                        </Button>\n                        </Link>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={22}>\n                            <Title>Сотрудник</Title>\n                        </Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>Имя:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.firstName}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>Фамилия:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.lastName}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>Email:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.email}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>Роли:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.roles[0]}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>ID:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.id}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>CompId:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.userD.companyId}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Divider />\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={22}>\n                            <Title>Компания</Title>\n                        </Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <Row>\n                        <Col span={1}></Col>\n                        <Col span={2}><Paragraph strong>Название:</Paragraph></Col>\n                        <Col span={20} ><Paragraph> {this.state.companyD.name}</Paragraph></Col>\n                        <Col span={1}></Col>\n                    </Row>\n                    <BackTop>\n                        <div className=\"BackUp\">Вверх</div>\n                    </BackTop>\n                </Layout.Content>\n        </Layout>\n            \n        );\n    }\n\n    \n    componentDidMount()\n    {\n\n            this.setState({loading:true});\n            let request:string=\"/\"+sessionStorage.getItem('AuthUserId');\n           \n            axios.get(\n                this.state.requestUrl+\"/api/User\"+request,\n                {\n                    headers: {\n                        \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                    }\n                }\n            )\n            .then(res => {\n                console.log(res.data);\n                this.setState({userD:res.data})\n                request=\"/\"+res.data.companyId;\n                axios.get(\n                    this.state.requestUrl+\"/api/Company\"+request,\n                    {\n                        headers: {\n                            \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                        }\n                    }\n                )\n                .then(res => {\n                    console.log(res.data);\n                    this.setState({companyD:res.data})\n                    this.setState({loading:false});\n                })\n                .catch(err => {  \n                    switch(err.response.status)\n                    {\n                        case 401:{\n                            console.log(\"401\"); \n                            break;\n                        }\n                        default:{\n                            console.log(\"Undefined error\"); \n                            break;\n                        }\n                    }\n                })\n            })\n            .catch(err => {  \n                switch(err.response.status)\n                {\n                    case 401:{\n                        console.log(\"401\"); \n                        break;\n                    }\n                    default:{\n                        console.log(\"Undefined error\"); \n                        break;\n                    }\n                }\n            })\n           \n        }\n    \n}\n\nexport default Profile;\n\n","D:\\diploma\\CMS\\frontEnd\\src\\login\\login.tsx",["151","152"],"import React from 'react';\nimport './login.css';\nimport 'antd/dist/antd.css';\nimport {Form, Input, Button, Checkbox, Col, Row,notification} from 'antd';\nimport axios from 'axios'\nimport {paths,/*components,operations*/ } from \"../swaggerCode/swaggerCode\"\nimport  { useState } from 'react';\n  import {useHistory} from \"react-router-dom\";\n\n\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nconst pathBase:string =\"https://hse-cms.herokuapp.com\";\n\ntype authenticationData = paths[\"/api/Auth/login\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"];\n\ntype field=\n    {\n        name: string[];\n        value: string,\n    };\n\n  export class Login extends React.Component<{},{fields:field[]}> {\n      constructor(props:{}) {\n        super(props);\n        this.state = {\n            fields:[\n            {\n                name: ['username'],\n                value: 'admin@admin.com',\n            },\n            {\n                name: ['password'],\n                value: 'Master1234',\n            }\n            ]\n        };\n      }\n\n\n    setFields (newFields:any) {\n        this.setState({ fields:newFields });\n    }\n\n    render() {\n        \n        return(\n            <LoginForm  fields={this.state.fields} onChangeFields={(newFields:field[]) => {this.setFields(newFields);}}/> \n        );\n    }\n  }\n\n \n\n\n    \n\n    const LoginForm = (props:{fields:field[],onChangeFields:(newFields:any)=>void })=> {\n\n\n        const [loadings, setLoadings] = useState(false);\n        const history = useHistory();\n\n        const onFinish = () => {\n            \n            let auth:authenticationData={email:props.fields[0].value,password:props.fields[1].value}\n            axios.post(pathBase+\"/api/Auth/login\",auth)\n            .then(res => {\n                console.log(res);\n                sessionStorage.setItem('AuthUserId', res.data.user.id);\n                sessionStorage.setItem('AuthUserSecurityToken', res.data.securityToken);\n                history.push(\"/home/inwork\");\n            })\n            .catch(err => {  \n                switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      }); \n                    break;\n                }\n            }\n                setLoadings(false);\n              })\n\n        };\n    \n        const onFinishFailed = () => {\n            console.log('Failed:', \"1\");\n        };\n\n        const enterLoading = (index:any) => {\n            \n          };\n\n\n        return (\n            <div className=\"loginForm\">\n\n            <Row>\n                <Col span={7}></Col>\n                <Col span={8}>\n              <Form {...layout}\n                  name=\"authentication\"\n                  initialValues={{\n                      remember: true,\n                  }}\n                  onFinish={onFinish}\n                  fields={props.fields}\n                  onFieldsChange={(_, allFields) => {\n                    props.onChangeFields(allFields);\n                  }}\n                  onFinishFailed={onFinishFailed}\n              >\n                  <Form.Item\n                      label=\"Логин\"\n                      name=\"username\"\n                      rules={[\n                          {\n                              required: true,\n                              type:'email',\n                              message: 'Пожалуйста введите логин!',\n                          },\n                      ]}\n                  >\n                      <Input disabled={loadings}></Input>\n                  </Form.Item>\n\n                  <Form.Item\n                      label=\"Пароль\"\n                      name=\"password\"\n                      rules={[\n                          {\n                              required: true,\n                              message: 'Пожалуйста введите пароль!',\n                          },\n                      ]}\n                  >\n                  <Input.Password  disabled={loadings}></Input.Password>\n                  </Form.Item>\n\n                  <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                      <Checkbox>Запомнить меня</Checkbox>\n                  </Form.Item>\n\n                  <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" loading={loadings}  onClick={()=>setLoadings(true)} className=\"buttonLogin\" htmlType=\"submit\">\n                    Войти\n                    </Button>\n                  </Form.Item>\n              </Form>\n            </Col>\n      <Col span={9}></Col>\n            </Row>\n            </div>\n        );\n      };\n\n  \n    \nexport default {Login};\n\n","D:\\diploma\\CMS\\frontEnd\\src\\settings\\settings.tsx",["153","154","155","156","157","158","159","160","161","162"],"import React from 'react';\nimport './settings.css';\nimport 'antd/dist/antd.css';\nimport {Layout,BackTop,Row,Col,Button} from 'antd';\nimport {\n    RollbackOutlined,\n    CloseOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport {\n    Link,\n    Route,\n    withRouter\n  } from \"react-router-dom\";\n\n  import {useHistory} from \"react-router-dom\";\n  import {Dropdown, Menu, message, Typography,Space} from \"antd\";\nconst { Paragraph } = Typography;\n  \n/**\n * Класс компонента настроек пользователя\n */\nexport class Settings extends React.Component<{},{}> {\n\n\n       render() {\n        \n        return(\n            \n            <Layout className=\"site-layout whole-layout\">\n            <Layout.Header className=\"site-layout-background\" style={{ padding: 0 }}>\n\n            </Layout.Header>\n            <Layout.Content\n                        className=\"site-layout-background\"\n                        style={{\n                            margin: '24px 16px',\n                            padding: 24,\n                        }}\n                    >\n                        <Row gutter={[0, 48]}>\n                            <Col span={1}></Col>\n                        </Row>\n                        <Row gutter={[0, 48]}>\n                            <Col span={1}></Col>\n                            \n                            <Link to=\"/home/inwork\">\n                        <Button icon={<RollbackOutlined style={{ fontSize: '20px'}}/>} onClick={() =>{ \n                            console.log(\"back\");\n                        }}>\n                        \n                        \n                        </Button>\n                        </Link>\n                        </Row>\n                        <Row>\n                            <Col span={1}></Col>\n                            Здесь будет настройки сервиса\n                        </Row>\n                        <Row>\n                            <Col span={1}></Col>\n                           \n                           \n\n                           \n                        </Row>\n                        <BackTop>\n                            <div className=\"BackUp\">Вверх</div>\n                        </BackTop>\n                    </Layout.Content>\n            </Layout>\n            );\n\n    }\n}\n\n\nexport default Settings;\n\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\mainPart\\mainPart.tsx",[],"D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\leftMenu\\leftMenu.tsx",["163"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport './leftMenu.css';\nimport {Layout, Menu} from 'antd';\nimport {\n    UsbOutlined,\n    SnippetsOutlined,\n    IdcardOutlined,\n    AreaChartOutlined,\n    BankOutlined,\n    FunctionOutlined\n} from '@ant-design/icons';\n\nimport {\n    Link,\n    Route\n  } from \"react-router-dom\";\n\n\nimport Employees from \"../../contentOptions/employee/employee\"\nimport Company from \"../../contentOptions/company/company\"\nimport Article from \"../../contentOptions/article/article\"\nimport Infographic from \"../../contentOptions/infographics/infographics\"\nimport Task from \"../../contentOptions/task/task\"\nimport Role from '../../contentOptions/role/role';\n\n\n\n\n/**\n * Интерфейс для построения меню.\n * @param text Текст-пояснение к иконке\n * @param link Ссылка в рамках React Router.\n * @param icon Иконка.\n * @param component Генерируемый по нажатию компонент в поле Content в Layout.\n */\ninterface menuOpt {\n    text:string;\n    link:string;\n    icon:JSX.Element;\n    component:JSX.Element;\n}\n\n/**\n * Массив опций меню\n */\nconst leftMenuContent: Array<menuOpt> = [ \n    {text:\"В работе\",link:\"/home/inwork\", icon:<UsbOutlined/>,component: <Task/>},\n    {text:\"Статьи\",link:\"/home/alltexts\", icon:<SnippetsOutlined />,component:< Article/>},\n    {text:\"Компании\",link:\"/home/company\", icon:<BankOutlined />,component: <Company/>},\n    {text:\"Роли\",link:\"/home/role\", icon:<FunctionOutlined />,component:<Role/>},\n    {text:\"Сотрудники\",link:\"/home/emplo\", icon:<IdcardOutlined />,component:<Employees/>},\n    {text:\"Инфографика\",link:\"/home/info\", icon:<AreaChartOutlined />,component:<Infographic/>}\n];  \n\n\n/**\n * Сбор всех ссылок для React-router, для родительского компонента\n */\nexport function getLinksLeftMenu() {\n    return (\n        leftMenuContent.map((r, i) => {\n            return (\n                <Route path={r.link}  key={\"ll\"+i} >\n                    {r.component}\n                </Route>\n            )\n        })\n    );\n};\n\n\n/**\n * Генерирует компонент меню на основе масива\n */\nfunction generateMenu() {\n    return (<Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['2']}>\n        {leftMenuContent.map((r, i) => {\n            return (\n                <Menu.Item key={i+\"lm\"} icon={r.icon}>\n                    <Link to={r.link}>{r.text}</Link>\n                </Menu.Item>\n            )\n        })}\n    </Menu>);\n};\n\n/**\n * Компонент левого меню.\n * @param collapsed Состояние меню (расшиернное/суженное)\n */\nexport class LeftMenu extends React.Component<{collapsed:boolean},{}> {\n    render() {\n        return (\n                <Layout.Sider trigger={null} collapsible collapsed={this.props.collapsed}>\n                    <div className=\"logo\" />\n                    {generateMenu()}\n                </Layout.Sider>\n        );\n    }\n}\n\nexport default {getLinksLeftMenu,LeftMenu}; \n\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\mainInterface\\avatarMenu\\avatarMenu.tsx",["164"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport './avatarMenu.css';\nimport { Menu} from 'antd';\nimport {\n    Link,\n    Route\n  } from \"react-router-dom\";\n  import {Dropdown} from 'antd';\nimport {Avatar} from 'antd';\nimport {\n    UserOutlined\n} from '@ant-design/icons';\n\n/**\n * Интерфейс для построения меню.\n * @param text Текст-пояснение опции\n * @param link Ссылка в рамках React Router.\n */\ninterface menuOpt {\n    text:string;\n    link:string;\n}\n\n/**\n * Массив опций меню\n */\nconst avatarMenuContent: Array<menuOpt> = [ \n    {text:\"Профиль\",link:\"/profile\"},\n    {text:\"Настройки\",link:\"/settings\"},\n    {text:\"Выход\",link:\"/login\"},\n];  \n\n\n/**\n * Сбор всех ссылок для React-router, для родительского компонента\n */\nexport function getLinksAvatarMenu() {\n    return (\n        avatarMenuContent.map((r, i) => {\n            return (\n                <Route path={r.link} key={\"al\"+i}>\n\n                </Route>\n            )\n        })\n    );\n};\n\n\n/**\n * Генерирует компонент меню на основе масива\n */\nfunction generateMenu() {\n    return (\n        avatarMenuContent.map((r, i) => {\n            return (\n                <Menu.Item key={i+\"am\"}>\n                    <Link to={r.link}>{r.text}</Link>\n                </Menu.Item>\n            )\n        }\n    ));\n};\n\n\n/**\n * Компонент меню при значке аватара.\n */\nexport class AvatarMenu extends React.Component<{},{}> {\n\n    render() {\n        return (\n            \n            <Dropdown overlay={\n                <Menu>\n                   {generateMenu()}\n                </Menu>\n            } placement=\"bottomLeft\">\n                <Avatar className=\"userBox\" size={40} icon={<UserOutlined />}/>\n            </Dropdown>\n             );\n    }\n}\n\nexport default {getLinksAvatarMenu,AvatarMenu}; \n\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\infographics\\infographics.tsx",[],"D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\employee\\employee.tsx",["165","166","167","168"],"import React from 'react';\nimport './employee.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Row, Col,notification} from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\ntype getUser=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteUser=paths[\"/api/User/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateUser=paths[\"/api/User\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addUser=paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Company extends React.Component<{},{}> {\n\n  \n\n    state={\n        dataType:\"employee\",\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        requestPath:\"/api/User\",\n        NameStartsWith: \"\",\n        EmailStartsWith:\"\",\n        FirstNameStartsWith: \"\",\n        LastNameStartsWith:\"\",\n\n        SortingColumn: \"FirstName\",\n        SortingColumnOptions:[\"FirstName\",\"LastName\",\"Email\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\n\n        Roles:\"All\",\n        RolesOptions:[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy:\"All\",\n\n        optionName:[\"SearchBy\",\"Roles\"],\n        optionList:[[\"FirstName\",\"LastName\",\"Email\",\"All\"],[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\",\"All\"]],\n        text:[\"Искать по\",\"Входит в \"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"1\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"2\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"3\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n            {\n                id: \"\",\n                email: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                roles: []\n            },\n        ],\n        loading:false\n    }\n\n\n\n\n    isNull=(val:string):boolean=>{\n        return val===\"\"||val===\"All\"||val===null;\n    }\n\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\n        if (callback !== undefined) \n        this.setState({[type]:val},callback)  \n        else this.setState({[type]:val})    \n    }\n\n    delete=(val:string)=>{\n       // console.log(this.state.items[val]);\n        axios.delete(\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Удаление прошло успешно',\n                description:\n                  'Сотрудник с id:'+val+\" был удален\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для удаления сотрудника\"\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Пользователь с id:\"+ val+\" не найден\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    create=(val:addUser)=>{\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            \n            this.update();\n            notification.success({\n                message: 'Создание прошло успешно',\n                description:\n                  'Сотрудник с id:'+val.id+\" был успешно создан\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для создания сотрудника\"\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    updateData=(val:updateUser)=>{\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            notification.success({\n                message: 'Данные успешно обновлены',\n                description:\n                  'Данные сотрудника с id:'+val.id+\" были успешно обновлены\",\n              });\n        })\n        .catch(err => {  \n        switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                        \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для изменения данных сотрудника\",\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                          'Сотрудника с id:'+val.id+\" не найден\",\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n        \n    }\n\n    \n    update(){ \n        this.setState({loading:true});\n        let request:string=\"?\";\n        request+=\"&PageLimit=\"+this.state.PageLimit;\n        request+=\"&PageNumber=\"+this.state.PageNumber;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&EmailStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&LastNameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&FirstNameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\n        request+=this.isNull(this.state.Roles)?\"\":\"&Role=\"+this.state.Roles;\n        axios.get(\n            this.state.requestUrl+this.state.requestPath+request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n\n            this.setState({count:res.data.count})\n            this.setState({items:res.data.items})\n            this.setState({loading:false});\n        })\n        .catch(err => { \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для получения данных\",\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      }); \n                    break;\n                }\n            }\n        })\n    }\n\n \n\n    \n    setCountItems=(val:number)=>{\n        this.setState({count:val})\n    }\n\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\n        if (page===0){\n            this.setState({PageNumber:1},()=>this.update());\n        }\n        else{\n            this.setState({PageNumber:page},()=>this.update());\n        }\n    }\n    \n    onMaxItemsChange=(current: number, size: number)=>{\n        //console.log(current);\n        if (current===0){\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\n        }\n        else{\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\n        }\n        \n    }\n\n    \n    render(){\n        return(\n            <div>\n                <FilterEntity\n                dataType={this.state.dataType}\n                updateCallback={this.update}\n                changeValueCallback={this.changeValue}\n                SortDirection={this.state.SortDirection}\n                SortDirectionOptions={this.state.SortDirectionOptions}\n                SortingColumn={this.state.SortingColumn}\n                SortingColumnOptions={this.state.SortingColumnOptions}\n                option={[this.state.SearchBy,this.state.Roles]}\n                optionName={this.state.optionName}\n                optionList={this.state.optionList}\n                text={this.state.text}\n                />\n                <AddEntity\n                createCallback={this.create}\n                dataType={this.state.dataType}\n                /> \n                <DataEntity \n                dataType={this.state.dataType}\n                loading={this.state.loading}    \n                updateDataCallback={this.updateData} \n                deleteCallback={this.delete} \n                updateCallback={this.update} \n                changeValueCallback={this.changeValue} \n                items={this.state.items}/>  \n                <PaginationEntity \n                countItems={this.state.count}\n                onPageChange={this.onPageChange}\n                onMaxItemsChange={this.onMaxItemsChange}/> \n            </div>\n            \n        );\n    }\n        \n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Company;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\company\\company.tsx",["169","170","171","172"],"import React from 'react';\nimport './company.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Row, Col,notification} from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\ntype getCompanies=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteCompany=paths[\"/api/Company/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateCompany=paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Company extends React.Component<{},{}> {\n\n  \n\n    state={\n        dataType:\"company\",\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        requestPath:\"/api/Company\",\n        NameStartsWith: \"\",\n\n        SortingColumn: \"Name\",\n        SortingColumnOptions:[\"Name\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy:\"All\",\n\n        optionName:[\"SearchBy\"],\n        optionList:[[\"Name\",\"All\"]],\n        text:[\"Искать по\"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n        ],\n        loading:false\n    }\n\n    isNull=(val:string):boolean=>{\n        return val===\"\";\n    }\n\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\n        if (callback !== undefined) \n        this.setState({[type]:val},callback)  \n        else this.setState({[type]:val})    \n    }\n\n    delete=(val:string)=>{\n        axios.delete(\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Удаление прошло успешно',\n                description:\n                  'Компания с id:'+val+\" была удалена\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для удаления компании\"\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Компания с id:\"+ val+\" не найдена\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    create=(val:addCompany)=>{\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Создание прошло успешно',\n                description:\n                  'Компания с id:'+val.company.id+\" была успешно создана\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для создания компании\"\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    updateData=(val:updateCompany)=>{\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            notification.success({\n                message: 'Данные успешно обновлены',\n                description:\n                  'Данные сотрудника с id:'+val.id+\" были успешно обновлены\",\n              });\n        })\n        .catch(err => {  \n        switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                        \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для изменения данных компании\",\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                          'Компания с id:'+val.id+\" не найдена\",\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n        \n    }\n\n    update(){ \n        this.setState({loading:true});\n        let request:string=\"?\";\n        request+=\"&PageLimit=\"+this.state.PageLimit;\n        request+=\"&PageNumber=\"+this.state.PageNumber;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\n        axios.get(\n            this.state.requestUrl+this.state.requestPath+request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.setState({count:res.data.count})\n            this.setState({items:res.data.items})\n            this.setState({loading:false});\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для получения данных\",\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      }); \n                    break;\n                }\n            }\n        })\n    }\n\n \n\n    \n    setCountItems=(val:number)=>{\n        this.setState({count:val})\n    }\n\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\n        if (page===0){\n            this.setState({PageNumber:1},()=>this.update());\n        }\n        else{\n            this.setState({PageNumber:page},()=>this.update());\n        }\n    }\n    \n    onMaxItemsChange=(current: number, size: number)=>{\n        //console.log(current);\n        if (current===0){\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\n        }\n        else{\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\n        }\n        \n    }\n\n    \n    render(){\n        return(\n            <div>\n                <FilterEntity\n                dataType={this.state.dataType}\n                updateCallback={this.update}\n                changeValueCallback={this.changeValue}\n                SortDirection={this.state.SortDirection}\n                SortDirectionOptions={this.state.SortDirectionOptions}\n                SortingColumn={this.state.SortingColumn}\n                SortingColumnOptions={this.state.SortingColumnOptions}\n                option={[this.state.SearchBy]}\n                optionName={this.state.optionName}\n                optionList={this.state.optionList}\n                text={this.state.text}\n                />\n                <AddEntity\n                dataType={this.state.dataType}\n                createCallback={this.create}\n                /> \n                <DataEntity \n                dataType={this.state.dataType}\n                loading={this.state.loading}    \n                updateDataCallback={this.updateData} \n                deleteCallback={this.delete} \n                updateCallback={this.update} \n                changeValueCallback={this.changeValue} \n                items={this.state.items}/>  \n                <PaginationEntity \n                countItems={this.state.count}\n                onPageChange={this.onPageChange}\n                onMaxItemsChange={this.onMaxItemsChange}/> \n            </div>\n            \n        );\n    }\n        \n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Company;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\role\\role.tsx",["173","174","175"],"import React from 'react';\nimport './role.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Row, Col,notification} from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\n// type getCompanies=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n// type deleteCompany=paths[\"/api/Role/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateRole=paths[\"/api/Role\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\n// type addCompany=paths[\"/api/Role\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Role extends React.Component<{},{}> {\n\n  \n\n    state={\n        dataType:\"role\",\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        requestPath:\"/api/Role\",\n        NameStartsWith: \"\",\n\n        SortingColumn: \"Name\",\n        SortingColumnOptions:[\"Name\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy:\"All\",\n\n        optionName:[\"SearchBy\"],\n        optionList:[[\"Name\",\"All\"]],\n        text:[\"Искать по\"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n        ],\n        loading:false\n    }\n\n    isNull=(val:string):boolean=>{\n        return val===\"\";\n    }\n\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\n        if (callback !== undefined) \n        this.setState({[type]:val},callback)  \n        else this.setState({[type]:val})    \n    }\n\n    delete=(val:string)=>{\n        axios.delete(\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Удаление прошло успешно',\n                description:\n                  'Роль с id:'+val+\" была удалена\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для удаления роли\"\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Роль с id:\"+ val+\" не найдена\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n   \n\n    updateData=(val:updateRole)=>{\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            notification.success({\n                message: 'Данные успешно обновлены',\n                description:\n                  'Данные роли с id:'+val.id+\" были успешно обновлены\",\n              });\n        })\n        .catch(err => {  \n        switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                        \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для изменения данных роли\",\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                          'Роль с id:'+val.id+\" не найдена\",\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n        \n    }\n\n    update(){ \n        this.setState({loading:true});\n        let request:string=\"?\";\n        request+=\"&PageLimit=\"+this.state.PageLimit;\n        request+=\"&PageNumber=\"+this.state.PageNumber;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\n        axios.get(\n            this.state.requestUrl+this.state.requestPath+request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.setState({count:res.data.count})\n            this.setState({items:res.data.items})\n            this.setState({loading:false});\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для получения данных\",\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      }); \n                    break;\n                }\n            }\n        })\n    }\n\n \n\n    \n    setCountItems=(val:number)=>{\n        this.setState({count:val})\n    }\n\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\n        if (page===0){\n            this.setState({PageNumber:1},()=>this.update());\n        }\n        else{\n            this.setState({PageNumber:page},()=>this.update());\n        }\n    }\n    \n    onMaxItemsChange=(current: number, size: number)=>{\n        //console.log(current);\n        if (current===0){\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\n        }\n        else{\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\n        }\n        \n    }\n\n    \n    render(){\n        return(\n            <div>\n                <FilterEntity\n                dataType={this.state.dataType}\n                updateCallback={this.update}\n                changeValueCallback={this.changeValue}\n                SortDirection={this.state.SortDirection}\n                SortDirectionOptions={this.state.SortDirectionOptions}\n                SortingColumn={this.state.SortingColumn}\n                SortingColumnOptions={this.state.SortingColumnOptions}\n                option={[this.state.SearchBy]}\n                optionName={this.state.optionName}\n                optionList={this.state.optionList}\n                text={this.state.text}\n                />\n                <DataEntity \n                dataType={this.state.dataType}\n                loading={this.state.loading}    \n                updateDataCallback={this.updateData} \n                deleteCallback={this.delete} \n                updateCallback={this.update} \n                changeValueCallback={this.changeValue} \n                items={this.state.items}/>  \n                <PaginationEntity \n                countItems={this.state.count}\n                onPageChange={this.onPageChange}\n                onMaxItemsChange={this.onMaxItemsChange}/> \n            </div>\n            \n        );\n    }\n        \n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Role;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\article\\article.tsx",["176","177","178","179"],"import React from 'react';\nimport './article.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Row, Col, notification} from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\ntype getArticle=paths[\"/api/Article\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\ntype deleteArticle=paths[\"/api/Article/{id}\"][\"delete\"][\"parameters\"][\"path\"]\ntype updateArticle=paths[\"/api/Article\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addArticle=paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\n/**\n * Класс компонента компаний\n */\nexport class Article extends React.Component<{},{}> {\n\n  \n\n    state={\n        dataType:\"article\",\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        requestPath:\"/api/Article\",\n        NameStartsWith: \"\",\n\n        SortingColumn: \"Title\",\n        SortingColumnOptions:[\"DeadLine\",\"Title\",\"CreationDate\",\"State\",\"TaskType\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy:\"All\",\n\n        optionName:[\"SearchBy\"],\n        optionList:[[\"Name\",\"All\",\"Assigne\",\"Author\"]],\n        text:[\"Искать по\"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n            {\n                id: \"\",\n                name: \"\"\n            },\n        ],\n        loading:false\n    }\n\n    isNull=(val:string):boolean=>{\n        return val===\"\";\n    }\n\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\n        if (callback !== undefined) \n        this.setState({[type]:val},callback)  \n        else this.setState({[type]:val})    \n    }\n\n    delete=(val:string)=>{\n        axios.delete(\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Удаление прошло успешно',\n                description:\n                  'Компания с id:'+val+\" была удалена\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для удаления статьи\"\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Статья с id:\"+ val+\" не найдена\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    create=(val:addArticle)=>{\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Создание прошло успешно',\n                description:\n                  'Статья с id:'+val.id+\" была успешно создана\",\n              });\n        })\n        .catch(err => {  \n            console.log(err); \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для создания статьи\"\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          err.response.body\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    updateData=(val:updateArticle)=>{\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            notification.success({\n                message: 'Данные успешно обновлены',\n                description:\n                  'Данные статьи с id:'+val.id+\" были успешно обновлены\",\n              });\n        })\n        .catch(err => {  \n        console.log(err); \n        switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                        \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для изменения данных статьи\",\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                          'Статья с id:'+val.id+\" не найдена\",\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n        \n    }\n\n    update(){ \n        this.setState({loading:true});\n        let request:string=\"?\";\n        request+=\"&PageLimit=\"+this.state.PageLimit;\n        request+=\"&PageNumber=\"+this.state.PageNumber;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\n        axios.get(\n            this.state.requestUrl+this.state.requestPath+request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            console.log(res);\n            this.setState({count:res.data.count})\n            this.setState({items:res.data.items})\n            this.setState({loading:false});\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    console.log(\"401\"); \n                    break;\n                }\n                default:{\n                    console.log(\"Undefined error\"); \n                    break;\n                }\n            }\n        })\n    }\n\n \n\n    \n    setCountItems=(val:number)=>{\n        this.setState({count:val})\n    }\n\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\n        if (page===0){\n            this.setState({PageNumber:1},()=>this.update());\n        }\n        else{\n            this.setState({PageNumber:page},()=>this.update());\n        }\n    }\n    \n    onMaxItemsChange=(current: number, size: number)=>{\n        //console.log(current);\n        if (current===0){\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\n        }\n        else{\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\n        }\n        \n    }\n\n    \n    render(){\n        return(\n            <div>\n                <FilterEntity\n                    dataType={this.state.dataType}\n                    updateCallback={this.update}\n                    changeValueCallback={this.changeValue}\n                    SortDirection={this.state.SortDirection}\n                    SortDirectionOptions={this.state.SortDirectionOptions}\n                    SortingColumn={this.state.SortingColumn}\n                    SortingColumnOptions={this.state.SortingColumnOptions}\n                    option={[this.state.SearchBy]}\n                    optionName={this.state.optionName}\n                    optionList={this.state.optionList}\n                    text={this.state.text}\n                />\n                <AddEntity\n                    dataType={this.state.dataType}\n                    createCallback={this.create}\n                /> \n                <DataEntity \n                    dataType={this.state.dataType}\n                    loading={this.state.loading}    \n                    updateDataCallback={this.updateData} \n                    deleteCallback={this.delete} \n                    updateCallback={this.update} \n                    changeValueCallback={this.changeValue} \n                    items={this.state.items}\n                />  \n                <PaginationEntity \n                    countItems={this.state.count}\n                    onPageChange={this.onPageChange}\n                    onMaxItemsChange={this.onMaxItemsChange}\n                /> \n            </div>\n            \n        );\n    }\n        \n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\nexport default Article;\n\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\task\\task.tsx",["180","181","182","183","184"],"import React from 'react';\nimport './task.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Row, Col, notification} from 'antd';\nimport AddEntity from \"../dataEntities/addEntity/addEntity\"\nimport DataEntity from \"../dataEntities/dataEntity/dataEntity\"\nimport FilterEntity from \"../dataEntities/filterEntity/filterEntity\"\nimport PaginationEntity from \"../dataEntities/paginationEntity/paginationEntity\"\n\n\n\n/**\n * Класс компонента компаний\n */\nexport class Task extends React.Component<{},{}> {\n\n  \n\n    state={\n        dataType:\"task\",\n        requestUrl:\"https://hse-cms.herokuapp.com\",\n        requestPath:\"/api/Task\",\n        NameStartsWith: \"\",\n\n        SortingColumn: \"Title\",\n        SortingColumnOptions:[\"DeadLine\",\"Title\",\"CreationDate\",\"State\",\"TaskType\"],\n\n        SortDirection: \"Ascending\",\n        SortDirectionOptions:[\"Ascending\",\"Descending\"],\n\n        QuickSearch: \"\",\n        PageLimit: 10,\n        PageNumber: 1,\n\n        SearchBy:\"All\",\n\n        optionName:[\"SearchBy\"],\n        optionList:[[\"Name\",\"All\",\"Assigne\",\"Author\"]],\n        text:[\"Искать по\"],\n\n        count: 0,\n        items: [\n            {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              },\n              {\n                id: \"\",\n                type: 0,\n                performer: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                author: {\n                  id: \"\",\n                  companyId: \"\",\n                  email: \"\",\n                  firstName: \"\",\n                  lastName: \"\",\n                  roles: [\n                    \"\"\n                  ]\n                },\n                creationDate: \"\",\n                assignmentDate: \"\",\n                сompletionDate: \"\",\n                description: \"\",\n                comment: \"\"\n              }\n        \n       \n\n\n        ],\n        loading:false\n    }\n\n    isNull=(val:string):boolean=>{\n        return val===\"\";\n    }\n\n    changeValue=(val:any,type:string,callback?:()=>void)=>{\n        if (callback !== undefined) \n        this.setState({[type]:val},callback)  \n        else this.setState({[type]:val})    \n    }\n\n    delete=(val:string)=>{\n        axios.delete(\n            this.state.requestUrl+this.state.requestPath+\"/\"+val,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Удаление прошло успешно',\n                description:\n                  'Компания с id:'+val+\" была удалена\",\n              });\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для удаления статьи\"\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Статья с id:\"+ val+\" не найдена\"\n                      });\n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    create=(val:any)=>{\n        axios.post(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            this.update();\n            notification.success({\n                message: 'Создание прошло успешно',\n                description:\n                  'Статья с id:'+val.id+\" была успешно создана\",\n              });\n        })\n        .catch(err => {  \n            console.log(err); \n            switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Недостаточно прав для создания статьи\"\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n    }\n\n    updateData=(val:any)=>{\n        axios.put(this.state.requestUrl+this.state.requestPath,val,\n        {\n            headers: {\n                \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n            }\n        })\n        .then(res => {\n            notification.success({\n                message: 'Данные успешно обновлены',\n                description:\n                  'Данные статьи с id:'+val.id+\" были успешно обновлены\",\n              });\n        })\n        .catch(err => {  \n        console.log(err); \n        switch(err.response.status)\n            {\n                case 401:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                        \"Ошибка авторизации\"\n                      });\n                    break;\n                }\n                case 403:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                        \"Недостаточно прав для изменения данных статьи\",\n                      });\n                    break;\n                }\n                case 404:{\n                    notification.error({\n                        message: \"Ошибка\"+ err.response.status,\n                        description:\n                          'Статья с id:'+val.id+\" не найдена\",\n                      });\n                    break;\n                }\n                case 409:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Конфликт данных, убедитесь что данные корректны и не дублируют существующие\"\n                      }); \n                    break;\n                }\n                default:{\n                    notification.error({\n                        message: 'Ошибка '+ err.response.status,\n                        description:\n                          \"Неопознанная ошибка\"\n                      });\n                    break;\n                }\n            }\n        })\n        \n    }\n\n    update(){ \n        this.setState({loading:true});\n        let request:string=\"?\";\n        request+=\"&PageLimit=\"+this.state.PageLimit;\n        request+=\"&PageNumber=\"+this.state.PageNumber;\n        request+=this.isNull(this.state.NameStartsWith)?\"\":\"&NameStartsWith=\"+this.state.NameStartsWith;\n        request+=this.isNull(this.state.SortingColumn)?\"\":\"&SortingColumn=\"+this.state.SortingColumn;\n        request+=this.isNull(this.state.SortDirection)?\"\":\"&SortDirection=\"+this.state.SortDirection;\n        request+=this.isNull(this.state.QuickSearch)?\"\":\"&QuickSearch=\"+this.state.QuickSearch;\n        /*axios.get(\n            this.state.requestUrl+this.state.requestPath+request,\n            {\n                headers: {\n                    \"Authorization\": \"Bearer \"+sessionStorage.getItem(\"AuthUserSecurityToken\")\n                }\n            }\n        )\n        .then(res => {\n            console.log(res);\n            this.setState({count:res.data.count})\n            this.setState({items:res.data.items})\n            this.setState({loading:false});\n        })\n        .catch(err => {  \n            switch(err.response.status)\n            {\n                case 401:{\n                    console.log(\"401\"); \n                    break;\n                }\n                default:{\n                    console.log(\"Undefined error\"); \n                    break;\n                }\n            }\n        })*/\n        this.setState({count:3})\n        this.setState({items:[\n            \n             \n            \n                  {\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                    \"type\": 0,\n                    \"performer\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"author\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"description\": \"string\",\n                    \"comment\": \"string\"\n                  },\n                  {\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                    \"type\": 0,\n                    \"performer\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"author\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"description\": \"string\",\n                    \"comment\": \"string\"\n                  },\n                  {\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                    \"type\": 0,\n                    \"performer\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"author\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"description\": \"string\",\n                    \"comment\": \"string\"\n                  },\n\n                ]\n\n        })\n        this.setState({loading:false});\n    }\n\n \n\n    \n    setCountItems=(val:number)=>{\n        this.setState({count:val})\n    }\n\n    onPageChange=(page:number, pageSize?: number | undefined)=>{\n        if (page===0){\n            this.setState({PageNumber:1},()=>this.update());\n        }\n        else{\n            this.setState({PageNumber:page},()=>this.update());\n        }\n    }\n    \n    onMaxItemsChange=(current: number, size: number)=>{\n        //console.log(current);\n        if (current===0){\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:1},()=>this.update());\n        }\n        else{\n            //console.log(current);\n            this.setState({PageLimit:size,PageNumber:current},()=>this.update());\n        }\n        \n    }\n\n    \n    render(){\n        return(\n            <div>\n                <FilterEntity\n                dataType={this.state.dataType}\n                updateCallback={this.update}\n                changeValueCallback={this.changeValue}\n                SortDirection={this.state.SortDirection}\n                SortDirectionOptions={this.state.SortDirectionOptions}\n                SortingColumn={this.state.SortingColumn}\n                SortingColumnOptions={this.state.SortingColumnOptions}\n                option={[this.state.SearchBy]}\n                optionName={this.state.optionName}\n                optionList={this.state.optionList}\n                text={this.state.text}\n                />\n                <DataEntity \n                dataType={this.state.dataType}\n                loading={this.state.loading}    \n                updateDataCallback={this.updateData} \n                deleteCallback={this.delete} \n                updateCallback={this.update} \n                changeValueCallback={this.changeValue} \n                items={this.state.items}/>  \n                <PaginationEntity \n                countItems={this.state.count}\n                onPageChange={this.onPageChange}\n                onMaxItemsChange={this.onMaxItemsChange}/> \n            </div>\n            \n        );\n    }\n        \n    componentDidMount() {\n        this.update();\n    }\n\n}\n\n\n\n\n\nexport default Task;\n\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterEntity\\filterEntity.tsx",[],"D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addEntity\\addEntity.tsx",["185"],"import React from 'react';\nimport './addEntity.css';\nimport 'antd/dist/antd.css';\nimport {Row, Col } from 'antd';\nimport {AddBox} from \"../addSubEntities/addBox/addBox\"\nimport { paths } from '../../../../swaggerCode/swaggerCode';\n\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class AddEntity extends React.Component<{\n    dataType:string,\n    createCallback:(val:any)=>void,\n},{}> {\n\n   \n    render() {\n        return (\n            <Row>\n            <Col span={1}></Col>\n                <Col span={22}>\n                <AddBox createCallback={this.props.createCallback} dataType={this.props.dataType}/>\n                </Col>\n                <Col span={1}></Col>\n            </Row>\n        );\n    }\n\n}\n\nexport default AddEntity;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\paginationEntity\\paginationEntity.tsx",[],"D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataEntity\\dataEntity.tsx",["186"],"import React from 'react';\nimport './dataEntity.css';\nimport 'antd/dist/antd.css';\nimport {Row, Col } from 'antd';\nimport {DataCard} from \"../dataSubEntities/dataCard/dataCard\";\nimport { paths } from '../../../../swaggerCode/swaggerCode';\nimport { Empty } from 'antd';\ntype updateCompany=paths[\"/api/Company\"][\"put\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class DataEntity extends React.Component<{\n    items: any[],\n    loading:boolean,\n    dataType:string,\n    updateCallback:()=>void,\n    changeValueCallback:(val:any,type:string,callback:any)=>void,\n    updateDataCallback:(val:any)=>void,\n    deleteCallback:(val:string)=>void\n    },{}> {\n    \n    updateItem=(position: number, item:any)=>{\n        let buf=this.props.items;\n        buf[position]=item;\n        console.log(item);\n        this.props.changeValueCallback(buf,\"items\",this.props.updateDataCallback(item))\n    }\n\n    deleteItem=(position: number)=>{\n        let buf=this.props.items;\n        let objId:string=buf[position].id\n        buf.splice(position, 1);\n        this.props.changeValueCallback(buf,\"items\",this.props.deleteCallback(objId))\n    }\n\n    render(){\n\n        return(\n           <div>\n               \n               \n                {\n                this.props.items.length!==0?\n                this.props.items.map((d, i) => {\n                    return (\n                        <Row key={\"Row\"+i}>\n                            <Col span={1}></Col>\n                            <Col span={22}>\n                                <DataCard \n                                    deleteItemCallback={this.deleteItem}\n                                    updateItemCallback={this.updateItem}\n                                    position={i}\n                                    data={d} \n                                    key={\"DC\"+i}\n                                    loading={this.props.loading}\n                                    dataType={this.props.dataType}\n                                    \n                                />\n                            </Col>\n                            <Col span={1}></Col>\n                        </Row>\n                    )\n                })\n                :<Empty />\n            }\n            </div>\n        );\n    }\n}\n\n\nexport default DataEntity;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataCard\\dataCard.tsx",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React from 'react';\nimport './dataCard.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined,\n    EllipsisOutlined,\n    SettingOutlined,\n    DeleteOutlined\n\n} from '@ant-design/icons';\nimport Switch from 'react-bootstrap/esm/Switch';\nimport { spawn } from 'child_process';\nimport {DataRow,DataRowEditable,DataRowList,DataRowListEditable} from \"../dataRow/dataRow\";\nimport { Steps } from 'antd';\nimport { MultiplyPicker } from \"../multiplyPicker/multiplyPicker\";\nimport { ConsoleLogger } from 'typedoc/dist/lib/utils';\n\nconst { Step } = Steps;\nconst { Search } = Input;\nconst { Paragraph } = Typography;\nconst { Meta } = Card;\nconst { Title, Text} = Typography;\n\n\ntype company=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype article=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\ntype role=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype task=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\ntype emploe=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\n\nexport class DataCard extends React.Component<{\n        deleteItemCallback:(position: number)=>void,\n        updateItemCallback:(position: number,item:any)=>void,\n        position:number,\n        data: any,\n        dataType:string,\n        loading:boolean\n    },{}> {\n\n/*\n        constructor(props:{deleteItemCallback:(position: number)=>void,\n            updateItemCallback:(position: number,item:any)=>void,\n            position:number,\n            data: any,\n            dataType:string,\n            loading:boolean}) \n          {\n            super(props);\n            this.state = {status:'narrow',bufData:this.props.data};\n          }*/\n\n        state = {\n            status:'narrow',\n            bufData:this.props.data\n        };\n\n\n\n\n        updateDataFieldCallBack = (val:string,param:string) => {\n            let buf=this.state.bufData;\n\n            switch(param)\n            {\n                \n                case \"id\":\n                    buf.id=val;\n                    this.setState({bufData:buf});  \n                    break;\n                case \"name\":\n                    buf.name=val;\n                    this.setState({bufData:buf});  \n                    break;\n                case \"roles\":\n                    buf.roles=val;\n                    this.setState({bufData:buf});  \n                    break;\n                    case \"firstName\":\n                        buf.firstName=val;\n                        this.setState({bufData:buf});  \n                        break;\n                    case \"lastName\":\n                        buf.lastName=val;\n                        this.setState({bufData:buf});  \n                        break;\n                    case \"email\":\n                        buf.email=val;\n                        this.setState({bufData:buf});  \n                        break;\n\n            }\n        };\n\n        updateListCallBack = (val:string) => {\n            let buf=this.state.bufData;\n            buf.roles=val;\n            this.setState({bufData:buf});       \n        };\n    \n        expandCardChange = () => {\n            if(this.state.status==='narrow')\n                this.setState({ status: 'expand'});\n            else\n                this.setState({ status: 'narrow'});\n        };\n    \n        makeEditableCardChange = () => {\n            if(this.state.status==='expand')\n                this.setState({ status: 'editable'});\n            else\n            {\n                this.setState({ status: 'expand'});\n            }\n        };\n     \n        deleteCard = () => {\n            this.props.deleteItemCallback(this.props.position);\n        };\n    \n        updateCard = () => {\n            this.props.updateItemCallback(this.props.position, this.state.bufData);\n        };\n\n        isNull=(val:string):boolean=>{\n            console.log(val);\n            return val===\"\"||val===null;\n        }\n\n        Header= ():JSX.Element =>{\n            \n        switch(this.props.dataType) { \n            case \"article\": { \n                return(\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.title}</div>}\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\n                        />\n                        </Skeleton>\n                );\n            } \n            case \"employee\": { \n                return(\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\n                        <Meta\n                        avatar={<Avatar size={50}  src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n                        title={<div className=\"titleCard\">{this.props.data.firstName}  {this.isNull(this.props.data.lastName)?\"\":this.props.data.lastName}</div>}\n                        description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\n                    />\n                        </Skeleton>\n                );\n            } \n            case \"role\": { \n                return(\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\n                        />\n                    </Skeleton>\n                );\n            } \n            case \"company\": { \n                return(\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.name}</div>}\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.id}</div>}\n                        />\n                    </Skeleton>\n                );\n            }\n            case \"task\": { \n                return(\n                    <Skeleton title={{width:\"30%\"}} active loading={this.props.loading} paragraph={{ rows: 1,width:\"50%\"}}>\n                        <Meta\n                            title={<div className=\"titleCard\">{this.props.data.description}</div>}\n                            description={<div className=\"titleDescriptionCard\">{this.props.data.creationDate}</div>}\n                        />\n                    </Skeleton>\n                );\n            } \n            default: { \n                return(\n                    <div>No such type</div>\n                ) \n            } \n        }\n        }\n\n        DataRows= ():JSX.Element[] =>{\n            switch(this.props.dataType) { \n                case \"article\": { \n                    return(\n                        [\n                            <Divider />,\n                            <Paragraph strong>Инициатор статьи</Paragraph>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.initiator.firstName} titleStr=\"Имя : \"/>\n                                </Skeleton>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                            <DataRow dataStr={this.props.data.initiator.lastName} titleStr=\"Фамилия : \"/>\n                            </Skeleton>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                            <DataRow dataStr={this.props.data.initiator.email} titleStr=\"Email : \"/>\n                            </Skeleton>,\n                            <Divider />,\n                            <Paragraph strong>Статус статьи</Paragraph>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                                 </Skeleton>,\n                             <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                             <DataRow dataStr={this.props.data.creationDate} titleStr=\"Cоздано : \"/>\n                             </Skeleton> ,\n                             <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                 <Row>\n                                 <Col span={2}></Col>\n                                <Col span={20}>\n                                <Steps direction=\"horizontal\" current={2}>\n                                {this.props.data.tasks.map((d:any, i:number) => {\n                                return (\n                                    <Step key={i+\"tk\"} title={d.description} description={d.comment} />\n                                )\n                                })}\n                                </Steps>\n                                </Col>\n                                </Row>\n                            </Skeleton>\n                        ]  \n                    )\n                } \n                case \"employee\": { \n                    return(\n                        [\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\n                                 <DataRow dataStr={this.props.data.firstName} titleStr=\"Имя : \"/>\n                                 {this.isNull(this.props.data.lastName)?\"\":<DataRow dataStr={this.props.data.lastName} titleStr=\"Фамилия : \"/>}\n                                 <DataRow dataStr={this.props.data.email} titleStr=\"Почта : \"/>\n                            </Skeleton>,\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                 <DataRowList dataList={this.props.data.roles} titleStr=\"Роли : \"/>\n                            </Skeleton>\n                                 \n                        ]\n                    )\n                } \n                case \"role\": { \n                    return(\n                        [ \n                        <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.name} titleStr=\"Название : \"/>\n                                </Skeleton>,\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                                 </Skeleton>\n                        ]\n                    );\n                } \n                case \"company\": { \n                    return(\n                        [\n                             <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.name} titleStr=\"Название : \"/>\n                                </Skeleton>,\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                 <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                                 </Skeleton>\n                        ]\n                    );\n                }\n                case \"task\": { \n                    return(\n                        [\n                            <Divider />,\n                            <Paragraph strong>Задание</Paragraph>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\n                                <DataRow dataStr={this.props.data.description} titleStr=\"Формулировка : \"/>\n                                <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                                <DataRow dataStr={this.props.data.creationDate} titleStr=\"Дата создания : \"/>\n                                <DataRow dataStr={this.props.data.assignmentDate} titleStr=\"Дата поручения : \"/>\n                                </Skeleton>,\n                            <Divider />,\n                            <Paragraph strong>Инициатор</Paragraph>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.author.firstName} titleStr=\"Имя : \"/>\n                                </Skeleton>\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.author.lastName} titleStr=\"Фамилия : \"/>\n                                </Skeleton>\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.author.email} titleStr=\"Email : \"/>\n                                </Skeleton>\n                                </Skeleton>,\n                            <Divider />,\n                        ]\n                    );\n                } \n                default: { \n                    return (\n                        [<div>No such type</div>]\n                    ) \n                } \n            }\n        }\n    \n\n        /*\n {\n                    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                    \"type\": 0,\n                    \"performer\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"author\": {\n                      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"companyId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n                      \"email\": \"user@example.com\",\n                      \"firstName\": \"string\",\n                      \"lastName\": \"string\",\n                      \"roles\": [\n                        \"SuperAdmin\"\n                      ]\n                    },\n                    \"creationDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"assignmentDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"сompletionDate\": \"2021-03-11T22:18:00.743Z\",\n                    \"description\": \"string\",\n                    \"comment\": \"string\"\n                  },\n        */\n        DataRowsEditable=():JSX.Element[]=>{\n            switch(this.props.dataType) { \n                case \"article\": { \n                    return(\n                        [\n                            \n                             <Divider />,\n                             <Paragraph strong>Задачи</Paragraph>,\n                             <div>\n                                 {this.props.data.tasks.map((d:any, i:number) => {\n                                 return (\n                                     <Row>\n                                     <Col key={i+\"tk\"}>{d.description}</Col>\n                                     <Col key={i+\"tk\"}>{d.comment}</Col></Row>\n                                 )\n                                 })}\n                                 </div>,\n                                  <Divider />,\n                                 <Paragraph strong>Предпросмотр</Paragraph>,\n                                 <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                    <div className=\"prev\"></div>\n                                </Skeleton>,\n                                <Paragraph strong>Редактор</Paragraph>,\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                    <button className=\"red\">редактор</button>\n                               </Skeleton>\n                        ]  \n                    ) \n                } \n                case \"employee\": { \n                    return(\n                        [\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 3}}>\n                                <DataRowEditable dataStr={this.state.bufData.firstName} titleStr=\"Имя : \" typeName=\"firstName\" editFieldCallback={this.updateDataFieldCallBack}/>\n                                <DataRowEditable dataStr={this.state.bufData.lastName||\"Нет данных\"} titleStr=\"Фамилия : \" typeName=\"lastName\" editFieldCallback={this.updateDataFieldCallBack}/>\n                                <DataRowEditable dataStr={this.state.bufData.email} titleStr=\"Почта : \" typeName=\"email\" editFieldCallback={this.updateDataFieldCallBack}/>\n        \n                                </Skeleton>,\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                \n                                <Row className=\"DataRow\">\n                                    <Col span={3} className='title'><Paragraph className='DataRowTitle'>{\"Роли: \"}</Paragraph></Col>\n                                    <Col span={4} className=\"DataRowList\">\n                                        \n                                    <MultiplyPicker dataList={this.state.bufData.roles} typeName=\"roles\" updListCallback={this.updateListCallBack}/>\n                                        \n                                    </Col>\n                                </Row>\n                                 </Skeleton>\n        \n        \n                        ]\n                    );\n                } \n                case \"role\": { \n                    return(\n                        [ \n                        <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack}/>\n                            </Skeleton>,\n                            <Divider />,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                            <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                            </Skeleton>\n                        ]\n        \n                    );\n                } \n                case \"company\": { \n                    return(\n                        [ \n                            <Divider />,\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                    <DataRowEditable dataStr={this.props.data.name} titleStr=\"Название : \" typeName=\"name\" editFieldCallback={this.updateDataFieldCallBack}/>\n                                </Skeleton>,\n                                <Divider />,\n                                <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <DataRow dataStr={this.props.data.id} titleStr=\"id : \"/>\n                                </Skeleton>\n                            ]\n                    ); \n                }\n                case \"task\": { \n                    return(\n                        [ \n                            <Divider />,\n                            <Paragraph strong>Управление заданием</Paragraph>,\n                            <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                                <button className=\"red\">Завершить</button>\n                           </Skeleton>,\n                           <Paragraph strong>Редактор</Paragraph>,\n                           <Skeleton  title={{width:\"100%\"}} active loading={this.props.loading} paragraph={{ rows: 0}}>\n                               <button className=\"red\">редактор</button>\n                          </Skeleton>\n                            ]\n                    ); \n                } \n                default: { \n                    return (\n                        [<div>No such type</div>]\n                    )\n                } \n            }\n        }\n    \n        optionsNarrow=():JSX.Element[]=>{\n            return (\n                [<EllipsisOutlined onClick={()=>this.expandCardChange()}/>]\n            )\n        }\n    \n        optionsExpand=():JSX.Element[]=>{\n            return (\n                [<SettingOutlined onClick={()=>this.makeEditableCardChange()}/>,<UpOutlined onClick={()=>this.expandCardChange()}/>]\n            )\n        }\n    \n        optionsExpandEditable=():JSX.Element[]=>{\n            return (\n                [<Popconfirm placement=\"rightTop\" title={\"Вы точно хотите удалить этот объект?\"} onConfirm={()=>this.deleteCard()} okText=\"Yes\" cancelText=\"No\"><DeleteOutlined/></Popconfirm>,<CheckOutlined onClick={()=>{this.makeEditableCardChange();this.updateCard();}}/>]\n            )\n        }\n\n        componentDidUpdate(prevProps:any, prevState:any, snapshot:any)\n        {\n            if (this.props.loading === false&&prevProps.loading === true) {\n                this.setState({status:\"narrow\"})\n            }\n        }\n\n\n    \n        render() {\n            this.state.bufData=this.props.data;\n            return (\n                \n                <Card className=\"userCard wide\"\n                    hoverable={true}\n                    extra={<a href={window.location.href + \"/\" +this.props.data.id}>More</a>}\n                    actions={\n                        this.state.status===\"narrow\"?this.optionsNarrow():this.state.status===\"expand\"?this.optionsExpand():this.optionsExpandEditable()\n                    }\n                >\n                    {this.Header()}\n                    \n                    {this.state.status===\"narrow\"?<div/>:\n                        this.state.status===\"expand\"?\n                        \n                        this.DataRows().map((d, i) => {\n                            return(React.cloneElement(d, { key: i+\"dr\" }));\n                        }):\n                        this.DataRowsEditable().map((d, i) => {\n                            return(React.cloneElement(d, { key: i+\"dre\" }));\n                        })\n                }\n                </Card>\n\n            );\n        }\n\n}\n\n\nexport default DataCard;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addBox\\addBox.tsx",["210"],"import React from 'react';\nimport './addBox.css';\nimport 'antd/dist/antd.css';\nimport { AddForm } from '../addForm/addForm';\nimport {Card, } from 'antd';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\n\n\n\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nexport class AddBox extends React.Component<{\n    createCallback:(val:any)=>void,\n    dataType:string,\n},{}> {\n\n    state = {\n        status:'hide'\n    };\n\n\n    changeStatusValue=(val:any,type:string)=>{\n        this.setState({[type]:val})    \n    }\n\n\n    submitSet = () => {\n            var event = new Event('submit', {\n                'bubbles'    : true, // Whether the event will bubble up through the DOM or not\n                'cancelable' : true  // Whether the event may be canceled or not\n            });\n            document.getElementById(\"AddForm\")?.dispatchEvent(event);\n            //this.changeStatusValue(\"hide\",\"status\")\n    };\n\n    options=():JSX.Element[]=>{\n        return (\n            [<CheckOutlined onClick={()=>{this.submitSet();}}></CheckOutlined>,<UpOutlined onClick={()=>{this.changeStatusValue(\"hide\",\"status\")}}/>]\n        )\n    }\n    \n\n\n    render() {\n        return (\n                <Card className=\"addBox\" id=\"addboxId\"\n                    hoverable={true} \n                    onClick={()=>{\n                        if (this.state.status!==\"expand\")\n                        this.changeStatusValue(\"expand\",\"status\")}}\n                    actions={\n                        this.state.status===\"expand\"?this.options():[]\n                    }\n                >\n                    {this.state.status===\"hide\"?<PlusOutlined />:<AddForm\n                     createCallback={ this.props.createCallback}\n                     dataType={this.props.dataType}\n                     closeForm={this.changeStatusValue}\n                    />}\n                </Card>\n        );\n    }\n\n}\n\nexport default AddBox;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\chooseBox\\chooseBox.tsx",["211"],"import React from 'react';\nimport './chooseBox.css';\nimport 'antd/dist/antd.css';\nimport { Menu, Dropdown, Button, Space,Typography} from 'antd';\n\n\n/**\n * Класс компонента выбора некой опции, для задания критерия поиска.\n * @param option Текущая выбранная опция.\n * @param optionName Наименование пересенной, которой соотвествуеют option, в родительском компоненте.\n * @param optionList Массив опций выпадающего меню.\n * @param text Текст перед компонентом, для визуального пояснения выбора.\n * @param updateCallback Колбек функции на обновление отображения страницы.\n * @param changeValueCallback Колбек функции на обновление значения переменой, которой соотвествуеют option, в родительском компоненте.\n */\nexport class ChooseBox extends React.Component<{\n    option:string,\n    optionName:string,\n    optionList:string[],\n    text:string,\n    updateCallback:()=>void,\n    changeValueCallback:(val:any,type:string,callback:()=>void)=>void\n},{}> {\n\n    \n    /**\n     * Функция генерирующая выпадающий список на основании props\n     */\n    optionGenerate=():JSX.Element=>{\n        return <Menu>\n         {this.props.optionList.map((u, i) => {\n                 if (u!==this.props.option) return (\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,this.props.optionName,this.props.updateCallback)} key={this.props.optionName+i}>\n                        <Typography.Paragraph>\n                        {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n  \n    render(){\n        return (\n                <Space size={5}>\n                    <Typography.Paragraph> {this.props.text}</Typography.Paragraph> \n                    <Dropdown overlay={this.optionGenerate} placement=\"bottomLeft\">\n                        <Button>{this.props.option}</Button>\n                    </Dropdown>\n                </Space>\n        );\n    }\n}\n\nexport default ChooseBox;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\sortBox\\sortBox.tsx",["212","213"],"import React from 'react';\nimport './sortBox.css';\nimport 'antd/dist/antd.css';\nimport { Menu, Dropdown, Button, Space,Typography} from 'antd';\n\n\n/**\n * Класс компонента для установки критерия сортировки и ее напрвления.\n * @param SortDirection Текущая выбранная опция направления сортировки.\n * @param SortDirectionOptions Массив опций выпадающего меню направлений сортировки.\n * @param SortingColumn Текущая выбранная опция критериея сортировки.\n * @param SortingColumnOptions Массив опций выпадающего меню критериев сортировки.\n * @param updateCallback Колбек функции на обновление отображения страницы.\n * @param changeValueCallback Колбек функции на обновление значения переменой, в родительском компоненте.\n */\nexport class SortBox extends React.Component<{\n    SortDirection:string,\n    SortDirectionOptions:string[],\n    SortingColumn:string,\n    SortingColumnOptions:string[],\n    updateCallback:()=>void,\n    changeValueCallback:(val:any,type:string,callback:()=>void)=>void\n},{}> {\n\n     /**\n     * Функция генерирующая выпадающий список на основании props, для выбора направления сортировки.\n     */\n    SortDirectionGenerate=():JSX.Element=>{\n        return <Menu>\n         {this.props.SortDirectionOptions.map((u, i) => {\n                if (u!==this.props.SortDirection) return (\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,\"SortDirection\",this.props.updateCallback)} key={\"SortDirection\"+i}>\n                        <Typography.Paragraph>\n                        {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n\n    /**\n     * Функция генерирующая выпадающий список на основании props, для выбора критерия сортировки.\n     */\n    SortingColumnGenerate=():JSX.Element=>{\n        return <Menu>\n         {this.props.SortingColumnOptions.map((u, i) => {\n                 if (u!==this.props.SortingColumn) return (\n                    <Menu.Item onClick={()=>this.props.changeValueCallback(u,\"SortingColumn\",this.props.updateCallback)} key={\"SortingColumn\"+i}>\n                        <Typography.Paragraph>\n                        {u}\n                        </Typography.Paragraph>\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n    \n  \n    render(){\n        return (\n                <Space size={5}>\n                    <Typography.Paragraph className=\"text\"> Сортировать</Typography.Paragraph> \n                    <Dropdown overlay={this.SortingColumnGenerate} placement=\"bottomLeft\">\n                        <Button>{this.props.SortingColumn}</Button>\n                    </Dropdown>\n                    <Typography.Paragraph className=\"text\">по</Typography.Paragraph>\n                    <Dropdown overlay={this.SortDirectionGenerate} placement=\"bottomLeft\">\n                        <Button>{this.props.SortDirection}</Button>\n                    </Dropdown>\n                </Space>\n        );\n    }\n}\n\n\nexport default SortBox;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\filterSubEntities\\searchBox\\searchBox.tsx",[],"D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\addSubEntities\\addForm\\addForm.tsx",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"import React from 'react';\nimport './addForm.css';\nimport 'antd/dist/antd.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport { timingSafeEqual } from 'crypto';\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\n\nimport {MultiplyPicker,CMultiplyPicker} from '../../dataSubEntities/multiplyPicker/multiplyPicker';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined,\n    EllipsisOutlined,\n    SettingOutlined,\n    DeleteOutlined,\n    RollbackOutlined,\n    CloseOutlined\n\n} from '@ant-design/icons';\n\n\ntype addCompany=paths[\"/api/Company\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\ntype addUser=paths[\"/api/User\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\ntype addArticle=paths[\"/api/Article\"][\"post\"][\"requestBody\"][\"content\"][\"text/json\"]\n\n\nconst { Paragraph } = Typography;\ntype option=\n{\n    label:string,\n    value:string\n}\n\ntype field=\n    {\n        name:string,\n        value:string,\n        type:string,\n        label:string,\n        options:option[],\n        chosedOptions:option[]        \n    }\n\n    const articleFields:field[]=[\n         {\n            name: 'articleTitle',\n            value: 'Добавление статьи',\n            type:'text',\n            label:'Данные статьи',\n            options:[],\n            chosedOptions:[]\n        },\n        {\n            name: 'articleName',\n            value: 'Итория о...',\n            type:'input',\n            label:'Заголовок статьи',\n            options:[],\n            chosedOptions:[]\n        }\n    ]\n\n    const companyFields:field[]=[\n        {\n            name: 'companyTitle',\n            value: 'Данные компании',\n            type:'text',\n            label:'Данные компании',\n            options:[],\n            chosedOptions:[]\n        },\n    {\n        name: 'companyName',\n        value: 'ООО \"ЛОЛКЕК\"',\n        type:'input',\n        label:'Название:',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'adminTitle',\n        value: 'Данные админа',\n        type:'text',\n        label:'Данные админа',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'firstName',\n        value: 'Дмитрий',\n        type:'input',\n        label:'Имя',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'lastName',\n        value: 'Дубина',\n        type:'input',\n        label:'Фамилия',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'email',\n        value: 'dodubina.spam@gmail.com',\n        type:'input',\n        label:'Email',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'password',\n        value: '71400444443',\n        type:'input',\n        label:'Пароль',\n        options:[],\n        chosedOptions:[]\n    }\n    ]\n\n    const employeeFields:field[]=[\n    {\n        name: 'firstName',\n        value: 'Дмитрий',\n        type:'input',\n        label:'Имя',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'lastName',\n        value: 'Дубина',\n        type:'input',\n        label:'Фамилия',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'email',\n        value: 'dodubina.spam@gmail.com',\n        type:'input',\n        label:'Email',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'password',\n        value: '71400444443',\n        type:'input',\n        label:'Пароль',\n        options:[],\n        chosedOptions:[]\n    },\n    {\n        name: 'roles',\n        value: \n        '71400444443',\n        type:'multiplyPicker',\n        label:'Роли',\n        options:[\n            {\n                label:\"SuperAdmin\",\n                value:\"SuperAdmin\"\n            },\n            {\n                label:\"CompanyAdmin\",\n                value:\"CompanyAdmin\"\n            },\n            {\n                label:\"ChiefRedactor\",\n                value:\"ChiefRedactor\"\n            },\n            {\n                label:\"Redactor\",\n                value:\"Redactor\"\n            },\n            {\n                label:\"Author\",\n                value:\"Author\"\n            },\n            {\n                label:\"Corrector\",\n                value:\"Corrector\"\n            }    \n        ],\n        chosedOptions:[\n        ]\n    }\n    ]\n\nexport class AddForm extends React.Component<{\n    createCallback:(val:any)=>void,\n    dataType:string,\n    closeForm:(val1:string,val2:string)=>void\n},{fields:field[]}> {\n\n    constructor(props:{createCallback:(val:addCompany)=>void,\n        dataType:string, closeForm:(val1:string,val2:string)=>void}) {\n        super(props);\n        switch(this.props.dataType) { \n            case \"article\": { \n                this.state = {\n                    fields:articleFields\n            }\n                break;\n            }\n            case \"employee\": { \n                this.state = {\n                    fields:employeeFields\n            }\n            break; \n            } \n            case \"role\": { \n                this.state = {\n                    fields:companyFields\n            }\n                break;\n            }\n            case \"company\": { \n                this.state = {\n                    fields:companyFields\n            }\n                break;\n            }\n            case \"task\": { \n                this.state = {\n                    fields:companyFields\n            }\n                break;\n            }\n            default:  { \n                this.state = {\n                    fields:companyFields\n            }\n                break;\n            }\n        }\n        \n    }\n    \n\n       state = {\n        fields:[\n            {\n                name: 'companyTitle',\n                value: 'Данные компании',\n                type:'text',\n                label:'Данные компании',\n                options:[{\n                    label:\"\",\n                    value:\"\"\n                }],\n                chosedOptions:[\n                    {label:\"\",\n                    value:\"\"\n                    }\n                ]\n                \n            },\n        {\n            name: 'companyName',\n            value: 'ООО \"ЛОЛКЕК\"',\n            type:'input',\n            label:'Название:',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n        {\n            name: 'adminTitle',\n            value: 'Данные админа',\n            type:'text',\n            label:'Данные админа',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n        {\n            name: 'firstName',\n            value: 'Дмитрий',\n            type:'input',\n            label:'имя',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n        {\n            name: 'lastName',\n            value: 'Дубина',\n            type:'input',\n            label:'фамилия',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n        {\n            name: 'email',\n            value: 'dodubina.spam@gmail.com',\n            type:'input',\n            label:'email',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n        {\n            name: 'password',\n            value: '71400444443',\n            type:'input',\n            label:'пароль',\n            options:[],\n            chosedOptions:[\n                {label:\"\",\n                value:\"\"\n                }\n            ]\n        },\n                    {\n                name: 'articleName',\n                value: 'Данные статьи',\n                type:'input',\n                label:'Данные статьи',\n                options:[{\n                    label:\"\",\n                    value:\"\"\n                }],\n                chosedOptions:[\n                    {label:\"\",\n                    value:\"\"\n                    }\n                ]\n                \n            },\n             {\n                name: 'articleTitle',\n                value: 'Данные статьи',\n                type:'text',\n                label:'Данные статьи',\n                options:[{\n                    label:\"\",\n                    value:\"\"\n                }],\n                chosedOptions:[\n                    {label:\"\",\n                    value:\"\"\n                    }\n                ]\n                \n            },\n                         {\n                name: 'articleName',\n                value: 'Данные статьи',\n                type:'input',\n                label:'Статьи',\n                options:[{\n                    label:\"\",\n                    value:\"\"\n                }],\n                chosedOptions:[\n                    {label:\"\",\n                    value:\"\"\n                    }\n                ]\n                \n            }\n        ]\n    };\n\n\n    onFinish = () => {\n        //console.log(this.state.fields);\n        let buf;\n        switch(this.props.dataType) { \n            case \"article\": { \n                let guis1:string=uuidv4();\n                buf={\n                    id: guis1,\n                    title: this.state.fields[1].value,\n                    content: \"{}\",\n                }\n                break;\n            }\n            case \"employee\": { \n                let guis1:string=uuidv4();\n                let roles:string[]=[]\n                this.state.fields[4].chosedOptions.map((u, i) => {\n                roles.splice(roles.length,0,u.value);\n                })\n                //console.log(roles);\n                buf={\n                        id: \"\",\n                        email: this.state.fields[2].value,\n                        firstName:  this.state.fields[0].value,\n                        lastName: this.state.fields[1].value,\n                        password:  this.state.fields[3].value,\n                        roles: roles\n                };\n                \n                buf.id=guis1;\n                break; \n            } \n            case \"role\": { \n                buf={}\n                break;\n            }\n            case \"company\": { \n                let guis1:string=uuidv4();\n                let guis2:string=uuidv4();\n                buf={\n                    company: {\n                        id: \"\",\n                        name: this.state.fields[0].value,\n                    },\n                    admin: {\n                        id: \"\",\n                        email: this.state.fields[3].value,\n                        firstName:  this.state.fields[1].value,\n                        lastName: this.state.fields[2].value,\n                        password:  this.state.fields[4].value,\n                    }  \n                };\n                buf.admin.id=guis1;\n                buf.company.id=guis2;\n                break;\n            }\n            case \"task\": { \n                buf={}\n            \n                break;\n            }\n            default:  { \n\n                buf={}\n                break;\n            }\n        }\n    \n        \n        //console.log(buf);\n        this.props.closeForm(\"hide\",\"status\");\n        this.props.createCallback(\n            buf\n        )\n    };\n\n    onFinishFailed = () => {\n        console.log('Failed:', \"1\");\n    };\n\n\n    updateListCallBack = (val:option[]) => {\n        let buf=this.state.fields;\n        buf[4].chosedOptions=val;\n        this.setState({fields:buf});       \n    };\n\n   \n\n    formGenerator=():JSX.Element=>{\n        return (\n            <Form id=\"AddForm\" labelCol={{span:3} } wrapperCol={{span:20,offset:1}} fields={this.state.fields}\n            \n            onFinish={this.onFinish}\n            onFinishFailed={this.onFinishFailed}\n            onFieldsChange={(_, allFields) => {\n                let buf=this.state.fields;\n                for (var _i = 0; _i < allFields.length; _i++){\n                    buf[_i].value=allFields[_i].value;\n\n                }\n                this.setState({\n                   fields:buf\n                })\n              }}\n            >\n\n                \n                {this.state.fields.map((u, i) => {\n                    switch(u.type){\n                        case \"input\":{\n                            return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                                <Input/>\n                            </Form.Item>\n                            break;\n                        }\n                        // case \"singlePicker\":{\n                        //     return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                        //     <Select onSelect={(value:string)=>{\n                        //          let buf=this.state.fields;\n                        //          u.value=value;\n                        //          this.setValue(buf);\n                        //          console.log(buf);\n                        //     }}>\n                        //       {u.options.map((uo, j) => {\n                        //           if(u.value!==uo.value)\n                        //           return(\n                        //             <Select.Option  value={uo.value} onClick={()=>{\n                                       \n                        //             }}>{uo.label}</Select.Option>\n                        //           );\n                        //       })}\n                        //     </Select>\n                        //   </Form.Item>\n                        //     break;\n                        // }\n                         case \"multiplyPicker\":{\n                             return <Form.Item name={u.name} label={u.label} rules={[{ required: true }]}>\n                             <CMultiplyPicker  updListCallback={this.updateListCallBack} typeName=\"\" dataList={u.chosedOptions} optionList={u.options}/>\n                           </Form.Item>\n                             break;\n                        }\n                        case \"text\":{\n                            return <Paragraph>\n                                {u.value}\n                            </Paragraph>\n                            break;\n                        }\n\n                    }\n                    \n            })}\n            </Form>\n\n\n\n        );\n    }\n\n    render() {\n        return (\n            this.formGenerator()\n        );\n    }\n}\n\n\n\n\n\nexport default AddForm;\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\multiplyPicker\\multiplyPicker.tsx",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284"],"import React from 'react';\nimport './multiplyPicker.css';\nimport 'antd/dist/antd.css';\nimport { paths } from '../../../../../swaggerCode/swaggerCode';\nimport axios from 'axios'\nimport {Skeleton, Menu, Dropdown, Button, Space,Input,Typography,Row, Col,Card,Form,Cascader,Select,message,Divider,Popconfirm,Avatar } from 'antd';\nimport {\n    UpOutlined,\n    CheckOutlined,\n    PlusOutlined,\n    EllipsisOutlined,\n    SettingOutlined,\n    DeleteOutlined,\n    RollbackOutlined,\n    CloseOutlined\n\n} from '@ant-design/icons';\nimport Switch from 'react-bootstrap/esm/Switch';\nimport { spawn } from 'child_process';\nimport {DataRow,DataRowEditable,DataRowList,DataRowListEditable} from \"../dataRow/dataRow\";\nimport { Steps } from 'antd';\n\nconst { Step } = Steps;\nconst { Search } = Input;\nconst { Paragraph } = Typography;\nconst { Meta } = Card;\nconst { Title, Text} = Typography;\n\n\ntype company=paths[\"/api/Company\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype article=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]\ntype role=paths[\"/api/Role\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\ntype task=paths[\"/api/Article\"][\"post\"][\"responses\"][\"201\"][\"content\"][\"application/json\"][\"tasks\"]\ntype emploe=paths[\"/api/User\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"][\"items\"][0]\n\nexport class MultiplyPicker extends React.Component<{\n        updListCallback:(val:any) =>void,\n        typeName:string,\n        dataList:string[],\n    },{}> {\n\n        state={\n            bufList:this.props.dataList\n        }\n\n        deleteUl(id:number):string[] {\n            let updateArray = [...this.state.bufList];\n            updateArray.splice(id, 1);\n            this.setState({bufList:updateArray});\n            this.props.updListCallback(updateArray);\n            //console.log(this.state.bufList);\n            //console.log(this.props.dataList);\n            //console.log(updateArray);\n            return updateArray;\n        }\n    \n        addUl(el:string):string[] {\n            let updateArray = [...this.state.bufList];\n            updateArray.splice(this.state.bufList.length,0,el );\n            this.setState({bufList:updateArray});\n            this.props.updListCallback(updateArray);\n            //console.log(this.state.bufList);\n            //console.log(this.props.dataList);\n            //console.log(updateArray);\n            return updateArray;\n        }\n\n        updateOptionsMenuCallBack():JSX.Element {\n            let optList:string[]=[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"]\n            return <Menu>\n                {optList.map((r, i) => {\n                    if(this.state.bufList.indexOf( r ) == -1 )\n                    return (\n                        \n                        <Menu.Item key={i+\"mi\"} onClick={()=>this.addUl(r)}>\n                            {r}\n                        </Menu.Item>\n                    )\n                })}\n            </Menu>\n            \n        }\n\n        render() {\n            return (\n                \n                <div>\n                {this.props.dataList.map((d, i) => {\n                    return (\n                    <Button  key={i+\"dl\"} className=\"deleteButton\" danger\n                                        type=\"dashed\"\n                                        onClick={()=>this.deleteUl(i)}\n                      >\n                            {d} <CloseOutlined />\n                    </Button>\n                    )\n                })}\n                <Dropdown overlay={this.updateOptionsMenuCallBack()}>\n                <Button\n                    type=\"dashed\"\n                    onClick={() => {}}\n                    style={{ width: '100%' }}\n                    >\n                    Добавить роль <PlusOutlined />\n                  </Button>\n                </Dropdown>\n            </div>\n\n            );\n        }\n\n}\n\ntype option=\n{\n    label:string,\n    value:string\n}\n\nexport class CMultiplyPicker extends React.Component<{\n    updListCallback:(val:any) =>void,\n    typeName:string,\n    dataList:option[],\n    optionList:option[]\n},{}> {\n\n    state={\n        bufList:this.props.dataList\n    }\n\n    deleteUl(id:number):option[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(id, 1);\n        this.setState({bufList:updateArray});\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    addUl(el:option):option[] {\n        let updateArray = [...this.state.bufList];\n        updateArray.splice(this.state.bufList.length,0,el );\n        this.setState({bufList:updateArray});\n        this.props.updListCallback(updateArray);\n        //console.log(this.state.bufList);\n        //console.log(this.props.dataList);\n        //console.log(updateArray);\n        return updateArray;\n    }\n\n    updateOptionsMenuCallBack():JSX.Element {\n \n        return <Menu>\n            {this.props.optionList.map((r, i) => {\n                if(this.state.bufList.indexOf( r ) == -1 )\n                return (\n                    \n                    <Menu.Item key={i+\"mi\"} onClick={()=>this.addUl(r)}>\n                        {r.label}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n        \n    }\n\n    render() {\n        return (\n            \n            <div>\n            {this.props.dataList.map((d, i) => {\n                return (\n                <Button  key={i+\"dl\"} className=\"deleteButton\" danger\n                                    type=\"dashed\"\n                                    onClick={()=>this.deleteUl(i)}\n                  >\n                        {d.label} <CloseOutlined />\n                </Button>\n                )\n            })}\n            <Dropdown overlay={this.updateOptionsMenuCallBack()}>\n            <Button\n                type=\"dashed\"\n                onClick={() => {}}\n                style={{ width: '100%' }}\n                >\n                Добавить роль <PlusOutlined />\n              </Button>\n            </Dropdown>\n        </div>\n\n        );\n    }\n\n}\n\n\n\nexport default {CMultiplyPicker,MultiplyPicker};\n","D:\\diploma\\CMS\\frontEnd\\src\\base\\contentOptions\\dataEntities\\dataSubEntities\\dataRow\\dataRow.tsx",["285"],"import React from 'react';\nimport { Row, Col,Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport './dataRow.css';\nimport {\n    CloseOutlined,\n    EditOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport {Dropdown, Menu, message, Typography,Space} from \"antd\";\nconst { Paragraph } = Typography;\n\n\nexport interface IDataRowE {\n    dataStr: string\n    titleStr: string\n    typeName:string\n    editFieldCallback: (val:string,param:string) => void;\n}\n\nexport interface IDataRowListE {\n    dataList: string[]\n    titleStr: string\n    typeName:string\n    editListCallback: (val:string[],param:string) => void;\n}\n\nexport interface IDataRow {\n    dataStr: string\n    titleStr: string\n}\n\nexport interface IDataRowList {\n    dataList: string[]\n    titleStr: string\n}\n\nexport function DataRowEditable({dataStr, titleStr,typeName,editFieldCallback}: IDataRowE) {\n    const [editableStr, setEditableStr] = React.useState(dataStr);\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title' >\n                <Paragraph className='DataRowTitle'>{titleStr}</Paragraph>\n            </Col>\n            <Col span={19}>\n                <Paragraph className='DataRowData'editable={{\n                maxLength: 40,\n                icon: <EditOutlined />,\n                tooltip: 'Изменить',\n                onChange:(editableStr)=>{setEditableStr(editableStr);editFieldCallback(editableStr,typeName);},\n            }}>\n                    {editableStr}\n                </Paragraph>\n            </Col>\n        </Row>\n    )\n}\n\nexport function DataRow({dataStr, titleStr}: IDataRow) {\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={20} ><Paragraph className='DataRowData'>{dataStr}</Paragraph></Col>\n        </Row>\n    )\n}\n\nexport function DataRowList({dataList, titleStr}: IDataRowList) {\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={4} className=\"DataRowList\">\n                \n                    {dataList.map((r, i) => {\n                        return (\n                            <Row key={i+\"rw\"}>\n                            <Col span={1}></Col>\n                        <Col span={22} className=\"optionText\">{r}</Col>\n                        <Col span={1}></Col>\n                        </Row> )\n                    })}\n                \n            </Col>\n        </Row>\n    )\n}\n\n\nexport function DataRowListEditable({dataList, titleStr,typeName,editListCallback}: IDataRowListE) {\n\n    function deleteUl(id:number,list:string[]):string[] {\n        let updateArray = [...list];\n        updateArray.splice(id, 1);\n        message.info(id);\n        editListCallback(updateArray,typeName);\n        return updateArray;\n    }\n\n    function addUl(el:string,list:string[]):string[] {\n        let updateArray = [...list];\n        updateArray.splice(list.length,0,el );\n        editListCallback(updateArray,typeName);\n        return updateArray;\n    }\n\n    function updateOptionsMenuCallBack():JSX.Element {\n        let optList:string[]=[\"SuperAdmin\",\"CompanyAdmin\",\"ChiefRedactor\",\"Redactor\",\"Author\",\"Corrector\"]\n        return <Menu>\n            {optList.map((r, i) => {\n                return (\n                    <Menu.Item onClick={()=>editListCallback(addUl(r,dataList),typeName)}>\n                        {r}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    }\n\n\n    return (\n        <Row className=\"DataRow\">\n            <Col span={3} className='title'><Paragraph className='DataRowTitle'>{titleStr}</Paragraph></Col>\n            <Col span={4} ><Paragraph className='DataRowList'>\n                <ul>\n                    {dataList.map((r, i) => {\n                        return (\n                            \n                                <Button className=\"deleteButton\" danger\n                                    type=\"dashed\"\n                                    onClick={()=>editListCallback(deleteUl(i,dataList),typeName)}\n                                    \n                                >\n                                     {r} <CloseOutlined />\n                                </Button>\n                           \n                            \n                        )\n                    })}\n                    \n                    <div>\n                    \n                        <Dropdown overlay={updateOptionsMenuCallBack()}>\n                            <Button\n                type=\"dashed\"\n                onClick={() => {}}\n                style={{ width: '100%' }}\n                >\n                Добавить роль <PlusOutlined />\n              </Button>\n                        </Dropdown>\n                    </div>\n                </ul>\n            </Paragraph></Col>\n        </Row>\n\n    )\n}\n\nexport default DataRow;","D:\\diploma\\CMS\\frontEnd\\src\\redactor\\redactor.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299"],"import React from 'react';\nimport './redactor.css';\nimport 'antd/dist/antd.css';\nimport { useDrag } from 'react-dnd'\nimport { useDrop } from 'react-dnd'\nimport {Form, Input, Button, Checkbox, Col, Row,notification,Card,Table,Divider,Typography,Image,Carousel} from 'antd';\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport { DndProvider} from \"react-dnd\";\nimport { useState } from 'react';\nimport { isThisTypeNode } from 'typescript';\nimport Grid from 'antd/lib/card/Grid';\nimport Item from 'antd/lib/list/Item';\nimport Paragraph from 'antd/lib/skeleton/Paragraph';\nimport{DataRowEditable} from \"../base/contentOptions/dataEntities/dataSubEntities/dataRow/dataRow\"\nimport {\n    DeleteOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CaretLeftOutlined,\n    CaretRightOutlined,\n    VerticalLeftOutlined,\n    VerticalRightOutlined,\n    EditOutlined \n} from '@ant-design/icons';\n\nexport class Redactor extends React.Component<{},{}> {\n\n    render() {\n        return(\n            <DndProvider backend={HTML5Backend}>\n          \n        <Row>\n        <Col span={1}></Col>\n            <Col span={22} >\n            <DataBlock/>\n            </Col>\n            <Col span={1}></Col>\n        </Row>\n\n         <Row >\n            <Col span={1}></Col>\n            <Col span={16}>\n            <ArticleBlock rows={5} cels={24} gridArticle={null}/>\n            </Col>\n            <Col span={6}>\n            <OptionsBlock/>\n            </Col>\n            <Col span={1}></Col>\n        </Row>\n \n    \n        \n        </DndProvider>\n        );\n    }\n}\n\n\n  \n\nexport class DataBlock extends React.Component<{},{}> {\n\n    render() {\n        return(\n            <Card className=\"dataPoolTop\" title=\"Задание\">\n            content\n            \n        </Card>\n        );\n    }\n}\n\nexport class OptionsBlock extends React.Component<{},{}> {\n    render() {\n        return(\n            <Card className=\"partsPoolright\">\n               <BlockImg name={\"text\"} pos={0}/>\n               <BlockImg name={\"img\"}pos={1}/>\n               <BlockImg name={\"coment\"}pos={2}/>\n               <BlockImg name={\"video\"}pos={3}/>\n               <BlockImg name={\"audio\"}pos={4}/>\n               <BlockImg name={\"link\"}pos={5}/>\n               <BlockImg name={\"Carusel\"}pos={6}/>\n            </Card>\n        );\n    }\n}\n\nconst ItemTypes = {\n    OPTION: 'option',\n  }\n\n\nfunction BlockImg(props:{ name:string, pos:number}) {\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: ItemTypes.OPTION,\n        collect: (monitor) => ({\n          isDragging: !!monitor.isDragging()\n        }),\n        item:{item:ComponentsBlock[props.pos], cOpt:ComponentsBlockOpt[props.pos], cOptVal:ComponentsBlockOptVals[props.pos]}\n      }))\n\n    return(\n        <div ref={drag} className=\"test\">{props.name}</div>\n    );\n}\nconst ComponentsBlock:JSX.Element[]=[\n    <Typography.Paragraph className={\"grey\"}>The useDrophook provides a way for you to wire in your component into the DnD system as a drop target. By passing in a specification into the useDrophook, you can specify including what types of data items the drop-target will accept, what props to collect, and more.</Typography.Paragraph>,\n    <Image  src=\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"/>,\n    <>2</>,\n    <>3</>,\n    <>4</>,\n    <>5</>,\n    <Carousel afterChange={()=>{}}>\n    <div>\n      <h3 className={\"contentStyle\"}>1</h3>\n    </div>\n    <div>\n      <h3 className={\"contentStyle\"}>2</h3>\n    </div>\n    <div>\n      <h3 className={\"contentStyle\"}>3</h3>\n    </div>\n    <div>\n      <h3 className={\"contentStyle\"}>4</h3>\n    </div>\n  </Carousel>,\n]\nconst ComponentsBlockOpt:string[][]=[\n    [\"text\",\"font-size\",\"allign\"],\n    [\"allign\"],\n    [\"allign\"],\n    [\"allign\"],\n    [\"allign\"],\n    [\"allign\"]\n]\n\nconst ComponentsBlockOptVals:string[][]=[\n    [\"abc\",\"12\",\"center\"],\n    [\"center\"],\n    [\"center\"],\n    [\"center\"],\n    [\"center\"],\n    [\"center\"]\n]\n\n\n\nfunction Instuments(props:{ \n    cOpt:string[],\n    cOptVal:string[],\n    delete:()=>void, \n    edit:()=>void,\n    mvR:()=>void,\n    mvL:()=>void,\n    aR:()=>void,\n    rR:()=>void,\n    aL:()=>void,\n    rL:()=>void,\n}\n    ) {\n        const [visible, setVisible] = useState(false);\n\n    return(\n        <>\n        <DeleteOutlined className={\"deleteButton buttonStyle\"} onClick={props.delete}/>\n        <EditOutlined className={\"editButton buttonStyle\"} onClick={()=>setVisible(!visible)}/>\n        <CaretRightOutlined className={\"moveRightButton buttonStyle\"} onClick={props.mvR}/>\n\n        <CaretLeftOutlined className={\"moveLeftButton buttonStyle\"} onClick={props.mvL}/>\n\n        <VerticalLeftOutlined className={\"addRightButton buttonStyle\"} onClick={props.aR}/>\n        <VerticalRightOutlined className={\"reduceRightButton buttonStyle\" }onClick={props.rR}/>\n        <VerticalRightOutlined className={\"addLeftButton buttonStyle\"}onClick={props.aL}/>\n        <VerticalLeftOutlined className={\"reduceLeftButton buttonStyle\"}onClick={props.rL}/>\n        <Settings visible={visible} cOpt={props.cOpt} cOptVal={props.cOptVal}></Settings>\n        </>\n    );\n\n    /*\n     DeleteOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CaretLeftOutlined,\n    CaretRightOutlined,\n    VerticalLeftOutlined,\n    VerticalRightOutlined,\n    EditOutlined\n    */\n}\n\nfunction Settings(props:{visible:boolean ,\n    cOpt:string[],\n    cOptVal:string[]\n}\n    ) {\n    return(\n        props.visible?\n        <Card className={\"settingsForm\"} onClick={()=>{console.log(props.cOpt)}}>\n            <DataRowEditable dataStr={props.cOpt[0]} titleStr={props.cOptVal[0]} typeName={\"q\"} editFieldCallback={()=>{}}/>\n        </Card>:\n        <></>\n    );\n\n    /*\n     DeleteOutlined,\n    CheckOutlined,\n    CloseOutlined,\n    CaretLeftOutlined,\n    CaretRightOutlined,\n    VerticalLeftOutlined,\n    VerticalRightOutlined,\n    EditOutlined\n    */\n}\n\nfunction Cell(props:{x:number,y:number,width:number,content:JSX.Element|null,\n    cOpt:string[]|null,\n    cOptVal:string[]|null,\n    edit:()=>void,\n    mvR:(x:number,y:number)=>void,\n    mvL:(x:number,y:number)=>void,\n    aR:(x:number,y:number)=>void,\n    rR:(x:number,y:number)=>void,\n    aL:(x:number,y:number)=>void,\n    rL:(x:number,y:number)=>void,\n    delete:(x:number,y:number)=>void, \n    insert:(x:number,y:number,item:JSX.Element, cOpt:string[], cOptVal:string[])=>void, \n}) {\n\n\n    const [{ isOver }, drop] = useDrop(\n        () => ({\n          accept: \"option\",\n          drop: (item:{item:JSX.Element,cOpt:string[],cOptVal:string[]}) => {\n              props.insert(props.x,props.y,item.item,item.cOpt,item.cOptVal)\n          },\n          collect: (monitor) => ({\n            isOver: !!monitor.isOver()\n          }),\n          hover:(item)=>{\n\n          }\n          \n        })\n      )\n\n    const [visible, setVisible] = useState(true);\n\n    return(\n        \n        <Col span={props.width}>\n            <div  ref={drop} className=\"redactorCell\" onClick={()=>{if(props.content!=null)setVisible(!visible);}}><>{props.content}</>\n         </div>\n         {props.content!==null&&visible?<Instuments\n            edit={props.edit}\n            mvR={()=>{props.mvR(props.x,props.y)}}\n            mvL={()=>{props.mvL(props.x,props.y)}}\n            aR={()=>{props.aR(props.x,props.y)}}\n            rR={()=>{props.rR(props.x,props.y)}}\n            aL={()=>{props.aL(props.x,props.y)}}\n            rL={()=>{props.rL(props.x,props.y)}}\n            delete={()=>{props.delete(props.x,props.y)}}\n            cOpt={props.cOpt!}\n            cOptVal={props.cOptVal!}\n            />:<></>}\n        </Col>\n        \n    \n    );\n}\n\n\n    type cel={\n        x:number,\n        y:number,\n        width:number,\n        content:JSX.Element|null,\n        cOpt:string[]|null,\n        cOptVal:string[]|null\n    }\n\n\n\n    export class ArticleBlock extends React.Component<{rows:number, cels:number, gridArticle:cel[][]|null},{\n        rows:number,\n            cels:number,\n            grid:cel[][],\n    }> {\n\n        updRowVals=(y:number)=>{\n            let buf:cel[][]=this.state.grid;\n            for (var j = 0; j < this.state.grid[y].length; j++) {\n            \n                buf[y][j].x=j;\n                buf[y][j].y=y;\n            }\n            this.setState({grid:buf})\n        }\n\n        delete=(x:number,y:number)=>{\n            console.log(\"delete\");\n            console.log(x+\":\"+y);\n            let buf:cel[][]=this.state.grid;\n            let bufw=this.state.grid[y][x].width;\n            buf[y].splice(x,1);\n            for(let i=0;i< bufw;i++)\n            {\n                let zel={\n                    x:x+i,\n                    y:y,\n                    width: 1,\n                    content: null,\n                    cOpt:null,\n                    cOptVal:null\n                }\n                buf[y].splice(x+i,0,zel);\n            }\n            this.setState({grid:buf})\n            this.updRowVals(y);\n        } \n        edit=()=>{\n            console.log(\"edit\");\n        }\n        mvR=(x:number,y:number)=>{\n            console.log(\"mvR\");\n            console.log(x+\":\"+y);\n            if(x+1<this.state.grid[y].length){\n            let buf:cel[][]=this.state.grid;\n            let gridel1:cel=buf[y][x+1];\n            gridel1.x=x;\n            let gridel2:cel=buf[y][x];\n            gridel2.x=x+1;\n            buf[y][x]=gridel1;\n            buf[y][x+1]=gridel2;\n            this.setState({grid:buf})\n            }\n            this.updRowVals(y);\n        }\n        mvL=(x:number,y:number)=>{\n            console.log(\"mvL\");\n            console.log(x+\":\"+y);\n            if(x>0){\n                let buf:cel[][]=this.state.grid;\n                let gridel1:cel=buf[y][x-1];\n                gridel1.x=x;\n                let gridel2:cel=buf[y][x];\n                gridel2.x=x-1;\n                buf[y][x]=gridel1;\n                buf[y][x-1]=gridel2;\n                this.setState({grid:buf})\n                }\n                this.updRowVals(y);\n        }\n        aR=(x:number,y:number)=>{\n            console.log(\"ar\");\n            console.log(x+\":\"+y);\n            if(x+1<this.state.grid[y].length)\n            if(this.state.grid[y][x+1].content==null){\n                let buf:cel[][]=this.state.grid;\n                let gridel:cel=buf[y][x];\n                gridel.width=gridel.width+1;\n                buf[y].splice(x,2,gridel);  \n                this.setState({grid:buf})\n            }\n                this.updRowVals(y);\n        }\n        rR=(x:number,y:number)=>{\n            console.log(\"rr\");\n            console.log(x+\":\"+y);\n            if(this.state.grid[y][x].width>1){\n                let buf:cel[][]=this.state.grid;\n                let gridel:cel=buf[y][x];\n                    gridel.width=gridel.width-1;\n                    gridel.x=gridel.x;\n                    let el:cel={\n                        x:x,\n                        y:y,\n                        width:1,\n                        content:null,\n                        cOpt:null,\n                        cOptVal:null \n                    }\n                    buf[y].splice(x,1,gridel,el);  \n                this.setState({grid:buf})\n                }\n                this.updRowVals(y);\n        }\n        aL=(x:number,y:number)=>{\n            console.log(\"al\");\n            console.log(x+\":\"+y);\n            if(x>=1&&this.state.grid[y][x-1].content==null){\n                let buf:cel[][]=this.state.grid;\n                let gridel:cel=buf[y][x];\n                gridel.width=gridel.width+1;\n                gridel.x=gridel.x-1;\n                buf[y].splice(x-1,2,gridel);  \n                this.setState({grid:buf})\n            }\n            this.updRowVals(y);\n        }\n        rL=(x:number,y:number)=>{\n            console.log(\"rl\");\n            console.log(x+\":\"+y);\n            if(this.state.grid[y][x].width>1){\n                let buf:cel[][]=this.state.grid;\n                let gridel:cel=buf[y][x];\n                    gridel.width=gridel.width-1;\n                    gridel.x=gridel.x+1;\n                    let el:cel={\n                        x:x,\n                        y:y,\n                        width:1,\n                        content:null ,\n                        cOpt:null,\n                        cOptVal:null \n                    }\n                    buf[y].splice(x,1,el,gridel);  \n                this.setState({grid:buf})\n                }\n                this.updRowVals(y);\n        }\n\n        addRow=()=>{\n            let buf:cel[][]=this.state.grid;\n            let gridRow:cel[] =[]\n            for (var j = 0; j < this.state.cels; j++) {\n                let el:cel={\n                    x:j,\n                    y:this.state.rows,\n                    width:1,\n                    content:null ,\n                    cOpt:null,\n                    cOptVal:null \n                }\n               gridRow.splice(j,0,el);\n            }\n            buf.splice(this.state.rows+1,0,gridRow);\n            this.setState({rows:this.state.rows+1}); \n            this.setState({grid:buf})\n        }\n\n        deleteRow=(y:number)=>{\n             let buf:cel[][]=this.state.grid;\n             buf.splice(y,1);\n\n             for (let i=0;i<buf.length;i++)\n             {\n                for (let j=0;j<buf[i].length;j++)\n             {\n                 buf[i][j].y=i\n             } \n             }\n            \n             this.setState({rows:this.state.rows-1})\n             this.setState({grid:buf})\n        }\n\n        insert=(x:number,y:number,item:JSX.Element, cOpt:string[], cOptVal:string[])=>{\n            console.log(x+\":\"+y);\n            let buf:cel[][]=this.state.grid;\n            let bufel={\n                x:x,\n                y:y,\n                width: this.state.grid[y][x].width,\n                content: item,\n                cOpt:cOpt,\n                cOptVal:cOptVal\n            }\n            buf[y][x]=bufel;\n            this.setState({grid:buf})\n            this.updRowVals(y);\n        }    \n\n        /*insertComponent=(x:number,y:number,width:number,component:JSX.Element)=>{\n            if(x+width>24) {x=24-width}\n            let buf:JSX.Element[][]=this.state.grid;\n            buf[y].splice(x,width,<Cell x={x} y={y} width={width} content={component} insertComponent={()=>{}} deleteComponent={this.deleteComponent}/>);\n            this.setState({grid:buf})\n        }*/\n\n\n\n\n        constructor(props:{rows:number, cels:number, gridArticle:cel[][]|null}) {\n            super(props);\n\n            if (this.props.gridArticle!==null){\n                this.state={\n                    rows:this.props.rows,\n                    cels:this.props.cels,\n                    grid:this.props.gridArticle!\n                }\n            }\n            else{\n                this.state={\n                    rows:this.props.rows,\n                    cels:this.props.cels,\n                    grid:[]\n                }\n                let buf:cel[][]=[]\n                for (var i = 0; i < this.state.rows; i++) {\n                    let gridRow:cel[] =[]\n                    for (var j = 0; j < this.state.cels; j++) {\n                        let el:cel={\n                            x:j,\n                            y:i,\n                            width:1,\n                            content:null ,\n                            cOpt:null,\n                            cOptVal:null \n                        }\n                       gridRow.splice(j,0,el);\n                    }\n                    buf.splice(i,0,gridRow);\n                }\n                this.state={\n                    rows:this.props.rows,\n                    cels:this.props.cels,\n                    grid:buf\n                }\n            }\n           // this.state.grid[3][3].content=ComponentsBlock[6];\n            //this.state.grid[3][6].content=ComponentsBlock[6];\n            console.log(this.state.grid)\n        }\n\n        /*\n        <Cell x={1} y={1} width={1} content={<>2</>}\n                    edit={this.edit}\n                    mvR={this.mvR}\n                    mvL={this.mvL}\n                    mvT={this.mvT}\n                    mvB={this.mvB}\n                    aR={this.aR}\n                    rR={this.rR}\n                    aL={this.aL}\n                    rL={this.rL}\n                    delete={this.delete}\n        */\n        \n        render() {\n            return(\n                <Card className=\"articleBody\"  title=\"Макет саттьи\">\n                {this.state.grid.map((r,i)=>{\n                return(\n                <Row>\n                    <Col span={1}></Col>\n                    <Col span={22}>\n                <Row className={\"redactorRow\"}>\n                {r.map((c,j)=>{\n                   return(\n                    <Cell x={this.state.grid[i][j].x} y={this.state.grid[i][j].y} width={this.state.grid[i][j].width} content={this.state.grid[i][j].content }\n                    cOpt={this.state.grid[i][j].cOpt}\n                    cOptVal={this.state.grid[i][j].cOptVal}\n                    edit={this.edit}\n                    mvR={this.mvR}\n                    mvL={this.mvL}\n                    aR={this.aR}\n                    rR={this.rR}\n                    aL={this.aL}\n                    rL={this.rL}\n                    delete={this.delete}\n                    insert={this.insert}\n                    />\n    \n                   ); \n                })}\n                <DeleteOutlined className={\"delRowButton\"} type=\"dashed\" onClick={()=>this.deleteRow(i)}/>\n                </Row>\n                </Col>\n                <Col span={1}></Col>\n                 </Row>\n                )\n             })}\n             {this.state.rows}: {this.state.cels}\n             <Divider/>\n\n             <Row >\n                <Col span={1}></Col>\n\n                <Col span={22}>\n                <Button type=\"dashed\" onClick={()=>this.addRow()}>Add</Button>\n                </Col>\n                <Col span={1}></Col>\n             </Row>\n                </Card>\n            );\n        }\n\n    \n    }\n\nexport default Redactor;\n\n",{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","severity":1,"message":"305","line":13,"column":11,"nodeType":"306","messageId":"307","endLine":13,"endColumn":21},{"ruleId":"304","severity":1,"message":"308","line":10,"column":5,"nodeType":"306","messageId":"307","endLine":10,"endColumn":10},{"ruleId":"304","severity":1,"message":"309","line":11,"column":5,"nodeType":"306","messageId":"307","endLine":11,"endColumn":15},{"ruleId":"304","severity":1,"message":"305","line":15,"column":11,"nodeType":"306","messageId":"307","endLine":15,"endColumn":21},{"ruleId":"304","severity":1,"message":"310","line":17,"column":12,"nodeType":"306","messageId":"307","endLine":17,"endColumn":18},{"ruleId":"304","severity":1,"message":"311","line":18,"column":10,"nodeType":"306","messageId":"307","endLine":18,"endColumn":22},{"ruleId":"304","severity":1,"message":"312","line":25,"column":10,"nodeType":"306","messageId":"307","endLine":25,"endColumn":18},{"ruleId":"304","severity":1,"message":"313","line":25,"column":20,"nodeType":"306","messageId":"307","endLine":25,"endColumn":24},{"ruleId":"304","severity":1,"message":"314","line":25,"column":26,"nodeType":"306","messageId":"307","endLine":25,"endColumn":33},{"ruleId":"304","severity":1,"message":"315","line":25,"column":46,"nodeType":"306","messageId":"307","endLine":25,"endColumn":51},{"ruleId":"304","severity":1,"message":"316","line":26,"column":28,"nodeType":"306","messageId":"307","endLine":26,"endColumn":32},{"ruleId":"304","severity":1,"message":"317","line":29,"column":8,"nodeType":"306","messageId":"307","endLine":29,"endColumn":16},{"ruleId":"304","severity":1,"message":"318","line":31,"column":8,"nodeType":"306","messageId":"307","endLine":31,"endColumn":19},{"ruleId":"304","severity":1,"message":"319","line":116,"column":15,"nodeType":"306","messageId":"307","endLine":116,"endColumn":27},{"ruleId":"320","severity":1,"message":"321","line":185,"column":1,"nodeType":"322","endLine":185,"endColumn":24},{"ruleId":"304","severity":1,"message":"323","line":7,"column":5,"nodeType":"306","messageId":"307","endLine":7,"endColumn":18},{"ruleId":"304","severity":1,"message":"324","line":8,"column":5,"nodeType":"306","messageId":"307","endLine":8,"endColumn":17},{"ruleId":"304","severity":1,"message":"308","line":12,"column":5,"nodeType":"306","messageId":"307","endLine":12,"endColumn":10},{"ruleId":"304","severity":1,"message":"309","line":13,"column":5,"nodeType":"306","messageId":"307","endLine":13,"endColumn":15},{"ruleId":"304","severity":1,"message":"305","line":16,"column":11,"nodeType":"306","messageId":"307","endLine":16,"endColumn":21},{"ruleId":"304","severity":1,"message":"312","line":17,"column":11,"nodeType":"306","messageId":"307","endLine":17,"endColumn":19},{"ruleId":"304","severity":1,"message":"313","line":17,"column":21,"nodeType":"306","messageId":"307","endLine":17,"endColumn":25},{"ruleId":"304","severity":1,"message":"314","line":17,"column":27,"nodeType":"306","messageId":"307","endLine":17,"endColumn":34},{"ruleId":"304","severity":1,"message":"315","line":17,"column":47,"nodeType":"306","messageId":"307","endLine":17,"endColumn":52},{"ruleId":"304","severity":1,"message":"325","line":18,"column":9,"nodeType":"306","messageId":"307","endLine":18,"endColumn":18},{"ruleId":"320","severity":1,"message":"321","line":103,"column":1,"nodeType":"322","endLine":103,"endColumn":44},{"ruleId":"320","severity":1,"message":"321","line":86,"column":1,"nodeType":"322","endLine":86,"endColumn":48},{"ruleId":"304","severity":1,"message":"326","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":12},{"ruleId":"304","severity":1,"message":"327","line":6,"column":14,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"328","line":12,"column":6,"nodeType":"306","messageId":"307","endLine":12,"endColumn":13},{"ruleId":"304","severity":1,"message":"329","line":13,"column":6,"nodeType":"306","messageId":"307","endLine":13,"endColumn":16},{"ruleId":"304","severity":1,"message":"326","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":12},{"ruleId":"304","severity":1,"message":"327","line":6,"column":14,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"330","line":12,"column":6,"nodeType":"306","messageId":"307","endLine":12,"endColumn":18},{"ruleId":"304","severity":1,"message":"331","line":13,"column":6,"nodeType":"306","messageId":"307","endLine":13,"endColumn":19},{"ruleId":"304","severity":1,"message":"326","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":12},{"ruleId":"304","severity":1,"message":"327","line":6,"column":14,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"332","line":7,"column":8,"nodeType":"306","messageId":"307","endLine":7,"endColumn":17},{"ruleId":"304","severity":1,"message":"326","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":12},{"ruleId":"304","severity":1,"message":"327","line":6,"column":14,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"333","line":12,"column":6,"nodeType":"306","messageId":"307","endLine":12,"endColumn":16},{"ruleId":"304","severity":1,"message":"334","line":13,"column":6,"nodeType":"306","messageId":"307","endLine":13,"endColumn":19},{"ruleId":"304","severity":1,"message":"335","line":4,"column":10,"nodeType":"306","messageId":"307","endLine":4,"endColumn":15},{"ruleId":"304","severity":1,"message":"326","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":12},{"ruleId":"304","severity":1,"message":"327","line":6,"column":14,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"332","line":7,"column":8,"nodeType":"306","messageId":"307","endLine":7,"endColumn":17},{"ruleId":"304","severity":1,"message":"336","line":519,"column":9,"nodeType":"306","messageId":"307","endLine":519,"endColumn":16},{"ruleId":"304","severity":1,"message":"337","line":8,"column":6,"nodeType":"306","messageId":"307","endLine":8,"endColumn":16},{"ruleId":"304","severity":1,"message":"338","line":8,"column":6,"nodeType":"306","messageId":"307","endLine":8,"endColumn":19},{"ruleId":"304","severity":1,"message":"339","line":5,"column":8,"nodeType":"306","messageId":"307","endLine":5,"endColumn":13},{"ruleId":"304","severity":1,"message":"313","line":6,"column":19,"nodeType":"306","messageId":"307","endLine":6,"endColumn":23},{"ruleId":"304","severity":1,"message":"312","line":6,"column":25,"nodeType":"306","messageId":"307","endLine":6,"endColumn":33},{"ruleId":"304","severity":1,"message":"340","line":6,"column":35,"nodeType":"306","messageId":"307","endLine":6,"endColumn":41},{"ruleId":"304","severity":1,"message":"315","line":6,"column":43,"nodeType":"306","messageId":"307","endLine":6,"endColumn":48},{"ruleId":"304","severity":1,"message":"341","line":6,"column":80,"nodeType":"306","messageId":"307","endLine":6,"endColumn":84},{"ruleId":"304","severity":1,"message":"342","line":6,"column":85,"nodeType":"306","messageId":"307","endLine":6,"endColumn":93},{"ruleId":"304","severity":1,"message":"343","line":6,"column":94,"nodeType":"306","messageId":"307","endLine":6,"endColumn":100},{"ruleId":"304","severity":1,"message":"314","line":6,"column":101,"nodeType":"306","messageId":"307","endLine":6,"endColumn":108},{"ruleId":"304","severity":1,"message":"324","line":10,"column":5,"nodeType":"306","messageId":"307","endLine":10,"endColumn":17},{"ruleId":"304","severity":1,"message":"344","line":16,"column":8,"nodeType":"306","messageId":"307","endLine":16,"endColumn":14},{"ruleId":"304","severity":1,"message":"345","line":17,"column":10,"nodeType":"306","messageId":"307","endLine":17,"endColumn":15},{"ruleId":"304","severity":1,"message":"346","line":18,"column":45,"nodeType":"306","messageId":"307","endLine":18,"endColumn":64},{"ruleId":"304","severity":1,"message":"347","line":21,"column":10,"nodeType":"306","messageId":"307","endLine":21,"endColumn":23},{"ruleId":"304","severity":1,"message":"348","line":24,"column":9,"nodeType":"306","messageId":"307","endLine":24,"endColumn":15},{"ruleId":"304","severity":1,"message":"349","line":27,"column":9,"nodeType":"306","messageId":"307","endLine":27,"endColumn":14},{"ruleId":"304","severity":1,"message":"316","line":27,"column":16,"nodeType":"306","messageId":"307","endLine":27,"endColumn":20},{"ruleId":"304","severity":1,"message":"350","line":30,"column":6,"nodeType":"306","messageId":"307","endLine":30,"endColumn":13},{"ruleId":"304","severity":1,"message":"351","line":31,"column":6,"nodeType":"306","messageId":"307","endLine":31,"endColumn":13},{"ruleId":"304","severity":1,"message":"352","line":32,"column":6,"nodeType":"306","messageId":"307","endLine":32,"endColumn":10},{"ruleId":"304","severity":1,"message":"353","line":33,"column":6,"nodeType":"306","messageId":"307","endLine":33,"endColumn":10},{"ruleId":"304","severity":1,"message":"354","line":34,"column":6,"nodeType":"306","messageId":"307","endLine":34,"endColumn":12},{"ruleId":"355","severity":1,"message":"356","line":486,"column":13,"nodeType":"357","endLine":486,"endColumn":23},{"ruleId":"304","severity":1,"message":"337","line":15,"column":6,"nodeType":"306","messageId":"307","endLine":15,"endColumn":16},{"ruleId":"358","severity":1,"message":"359","line":31,"column":44,"nodeType":"360","messageId":"361","endLine":31,"endColumn":46},{"ruleId":"358","severity":1,"message":"359","line":30,"column":54,"nodeType":"360","messageId":"361","endLine":30,"endColumn":56},{"ruleId":"358","severity":1,"message":"359","line":48,"column":54,"nodeType":"360","messageId":"361","endLine":48,"endColumn":56},{"ruleId":"304","severity":1,"message":"362","line":6,"column":10,"nodeType":"306","messageId":"307","endLine":6,"endColumn":25},{"ruleId":"304","severity":1,"message":"363","line":7,"column":9,"nodeType":"306","messageId":"307","endLine":7,"endColumn":17},{"ruleId":"304","severity":1,"message":"313","line":7,"column":19,"nodeType":"306","messageId":"307","endLine":7,"endColumn":23},{"ruleId":"304","severity":1,"message":"312","line":7,"column":25,"nodeType":"306","messageId":"307","endLine":7,"endColumn":33},{"ruleId":"304","severity":1,"message":"340","line":7,"column":35,"nodeType":"306","messageId":"307","endLine":7,"endColumn":41},{"ruleId":"304","severity":1,"message":"315","line":7,"column":43,"nodeType":"306","messageId":"307","endLine":7,"endColumn":48},{"ruleId":"304","severity":1,"message":"326","line":7,"column":66,"nodeType":"306","messageId":"307","endLine":7,"endColumn":69},{"ruleId":"304","severity":1,"message":"327","line":7,"column":71,"nodeType":"306","messageId":"307","endLine":7,"endColumn":74},{"ruleId":"304","severity":1,"message":"364","line":7,"column":75,"nodeType":"306","messageId":"307","endLine":7,"endColumn":79},{"ruleId":"304","severity":1,"message":"342","line":7,"column":85,"nodeType":"306","messageId":"307","endLine":7,"endColumn":93},{"ruleId":"304","severity":1,"message":"343","line":7,"column":94,"nodeType":"306","messageId":"307","endLine":7,"endColumn":100},{"ruleId":"304","severity":1,"message":"314","line":7,"column":101,"nodeType":"306","messageId":"307","endLine":7,"endColumn":108},{"ruleId":"304","severity":1,"message":"365","line":7,"column":109,"nodeType":"306","messageId":"307","endLine":7,"endColumn":116},{"ruleId":"304","severity":1,"message":"366","line":7,"column":117,"nodeType":"306","messageId":"307","endLine":7,"endColumn":127},{"ruleId":"304","severity":1,"message":"310","line":7,"column":128,"nodeType":"306","messageId":"307","endLine":7,"endColumn":134},{"ruleId":"304","severity":1,"message":"367","line":9,"column":9,"nodeType":"306","messageId":"307","endLine":9,"endColumn":23},{"ruleId":"304","severity":1,"message":"368","line":11,"column":5,"nodeType":"306","messageId":"307","endLine":11,"endColumn":15},{"ruleId":"304","severity":1,"message":"369","line":12,"column":5,"nodeType":"306","messageId":"307","endLine":12,"endColumn":18},{"ruleId":"304","severity":1,"message":"324","line":13,"column":5,"nodeType":"306","messageId":"307","endLine":13,"endColumn":17},{"ruleId":"304","severity":1,"message":"370","line":14,"column":5,"nodeType":"306","messageId":"307","endLine":14,"endColumn":21},{"ruleId":"304","severity":1,"message":"371","line":15,"column":5,"nodeType":"306","messageId":"307","endLine":15,"endColumn":20},{"ruleId":"304","severity":1,"message":"372","line":16,"column":5,"nodeType":"306","messageId":"307","endLine":16,"endColumn":19},{"ruleId":"304","severity":1,"message":"373","line":17,"column":5,"nodeType":"306","messageId":"307","endLine":17,"endColumn":21},{"ruleId":"304","severity":1,"message":"323","line":18,"column":5,"nodeType":"306","messageId":"307","endLine":18,"endColumn":18},{"ruleId":"304","severity":1,"message":"374","line":24,"column":6,"nodeType":"306","messageId":"307","endLine":24,"endColumn":13},{"ruleId":"304","severity":1,"message":"375","line":26,"column":6,"nodeType":"306","messageId":"307","endLine":26,"endColumn":16},{"ruleId":"358","severity":1,"message":"376","line":403,"column":63,"nodeType":"360","messageId":"377","endLine":403,"endColumn":65},{"ruleId":"358","severity":1,"message":"359","line":495,"column":47,"nodeType":"360","messageId":"361","endLine":495,"endColumn":49},{"ruleId":"378","severity":1,"message":"379","line":501,"column":29,"nodeType":"380","messageId":"381","endLine":501,"endColumn":35},{"ruleId":"378","severity":1,"message":"379","line":527,"column":30,"nodeType":"380","messageId":"381","endLine":527,"endColumn":36},{"ruleId":"378","severity":1,"message":"379","line":533,"column":29,"nodeType":"380","messageId":"381","endLine":533,"endColumn":35},{"ruleId":"304","severity":1,"message":"339","line":5,"column":8,"nodeType":"306","messageId":"307","endLine":5,"endColumn":13},{"ruleId":"304","severity":1,"message":"363","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":17},{"ruleId":"304","severity":1,"message":"315","line":6,"column":43,"nodeType":"306","messageId":"307","endLine":6,"endColumn":48},{"ruleId":"304","severity":1,"message":"326","line":6,"column":66,"nodeType":"306","messageId":"307","endLine":6,"endColumn":69},{"ruleId":"304","severity":1,"message":"327","line":6,"column":71,"nodeType":"306","messageId":"307","endLine":6,"endColumn":74},{"ruleId":"304","severity":1,"message":"341","line":6,"column":80,"nodeType":"306","messageId":"307","endLine":6,"endColumn":84},{"ruleId":"304","severity":1,"message":"342","line":6,"column":85,"nodeType":"306","messageId":"307","endLine":6,"endColumn":93},{"ruleId":"304","severity":1,"message":"343","line":6,"column":94,"nodeType":"306","messageId":"307","endLine":6,"endColumn":100},{"ruleId":"304","severity":1,"message":"314","line":6,"column":101,"nodeType":"306","messageId":"307","endLine":6,"endColumn":108},{"ruleId":"304","severity":1,"message":"365","line":6,"column":109,"nodeType":"306","messageId":"307","endLine":6,"endColumn":116},{"ruleId":"304","severity":1,"message":"366","line":6,"column":117,"nodeType":"306","messageId":"307","endLine":6,"endColumn":127},{"ruleId":"304","severity":1,"message":"310","line":6,"column":128,"nodeType":"306","messageId":"307","endLine":6,"endColumn":134},{"ruleId":"304","severity":1,"message":"368","line":8,"column":5,"nodeType":"306","messageId":"307","endLine":8,"endColumn":15},{"ruleId":"304","severity":1,"message":"369","line":9,"column":5,"nodeType":"306","messageId":"307","endLine":9,"endColumn":18},{"ruleId":"304","severity":1,"message":"370","line":11,"column":5,"nodeType":"306","messageId":"307","endLine":11,"endColumn":21},{"ruleId":"304","severity":1,"message":"371","line":12,"column":5,"nodeType":"306","messageId":"307","endLine":12,"endColumn":20},{"ruleId":"304","severity":1,"message":"372","line":13,"column":5,"nodeType":"306","messageId":"307","endLine":13,"endColumn":19},{"ruleId":"304","severity":1,"message":"373","line":14,"column":5,"nodeType":"306","messageId":"307","endLine":14,"endColumn":21},{"ruleId":"304","severity":1,"message":"344","line":18,"column":8,"nodeType":"306","messageId":"307","endLine":18,"endColumn":14},{"ruleId":"304","severity":1,"message":"345","line":19,"column":10,"nodeType":"306","messageId":"307","endLine":19,"endColumn":15},{"ruleId":"304","severity":1,"message":"382","line":20,"column":9,"nodeType":"306","messageId":"307","endLine":20,"endColumn":16},{"ruleId":"304","severity":1,"message":"383","line":20,"column":17,"nodeType":"306","messageId":"307","endLine":20,"endColumn":32},{"ruleId":"304","severity":1,"message":"384","line":20,"column":33,"nodeType":"306","messageId":"307","endLine":20,"endColumn":44},{"ruleId":"304","severity":1,"message":"346","line":20,"column":45,"nodeType":"306","messageId":"307","endLine":20,"endColumn":64},{"ruleId":"304","severity":1,"message":"385","line":23,"column":9,"nodeType":"306","messageId":"307","endLine":23,"endColumn":13},{"ruleId":"304","severity":1,"message":"348","line":24,"column":9,"nodeType":"306","messageId":"307","endLine":24,"endColumn":15},{"ruleId":"304","severity":1,"message":"325","line":25,"column":9,"nodeType":"306","messageId":"307","endLine":25,"endColumn":18},{"ruleId":"304","severity":1,"message":"386","line":26,"column":9,"nodeType":"306","messageId":"307","endLine":26,"endColumn":13},{"ruleId":"304","severity":1,"message":"349","line":27,"column":9,"nodeType":"306","messageId":"307","endLine":27,"endColumn":14},{"ruleId":"304","severity":1,"message":"316","line":27,"column":16,"nodeType":"306","messageId":"307","endLine":27,"endColumn":20},{"ruleId":"304","severity":1,"message":"350","line":30,"column":6,"nodeType":"306","messageId":"307","endLine":30,"endColumn":13},{"ruleId":"304","severity":1,"message":"351","line":31,"column":6,"nodeType":"306","messageId":"307","endLine":31,"endColumn":13},{"ruleId":"304","severity":1,"message":"352","line":32,"column":6,"nodeType":"306","messageId":"307","endLine":32,"endColumn":10},{"ruleId":"304","severity":1,"message":"353","line":33,"column":6,"nodeType":"306","messageId":"307","endLine":33,"endColumn":10},{"ruleId":"304","severity":1,"message":"354","line":34,"column":6,"nodeType":"306","messageId":"307","endLine":34,"endColumn":12},{"ruleId":"358","severity":1,"message":"359","line":71,"column":37,"nodeType":"360","messageId":"361","endLine":71,"endColumn":39},{"ruleId":"387","severity":1,"message":"388","line":72,"column":56,"nodeType":"389","messageId":"390","endLine":72,"endColumn":58},{"ruleId":"358","severity":1,"message":"359","line":156,"column":47,"nodeType":"360","messageId":"361","endLine":156,"endColumn":49},{"ruleId":"387","severity":1,"message":"388","line":157,"column":52,"nodeType":"389","messageId":"390","endLine":157,"endColumn":54},{"ruleId":"320","severity":1,"message":"321","line":201,"column":1,"nodeType":"322","endLine":201,"endColumn":49},{"ruleId":"304","severity":1,"message":"315","line":10,"column":45,"nodeType":"306","messageId":"307","endLine":10,"endColumn":50},{"ruleId":"304","severity":1,"message":"341","line":6,"column":9,"nodeType":"306","messageId":"307","endLine":6,"endColumn":13},{"ruleId":"304","severity":1,"message":"391","line":6,"column":15,"nodeType":"306","messageId":"307","endLine":6,"endColumn":20},{"ruleId":"304","severity":1,"message":"392","line":6,"column":30,"nodeType":"306","messageId":"307","endLine":6,"endColumn":38},{"ruleId":"304","severity":1,"message":"393","line":6,"column":49,"nodeType":"306","messageId":"307","endLine":6,"endColumn":61},{"ruleId":"304","severity":1,"message":"394","line":6,"column":67,"nodeType":"306","messageId":"307","endLine":6,"endColumn":72},{"ruleId":"304","severity":1,"message":"395","line":10,"column":10,"nodeType":"306","messageId":"307","endLine":10,"endColumn":24},{"ruleId":"304","severity":1,"message":"396","line":11,"column":8,"nodeType":"306","messageId":"307","endLine":11,"endColumn":12},{"ruleId":"304","severity":1,"message":"397","line":12,"column":8,"nodeType":"306","messageId":"307","endLine":12,"endColumn":12},{"ruleId":"304","severity":1,"message":"398","line":13,"column":8,"nodeType":"306","messageId":"307","endLine":13,"endColumn":17},{"ruleId":"304","severity":1,"message":"369","line":17,"column":5,"nodeType":"306","messageId":"307","endLine":17,"endColumn":18},{"ruleId":"304","severity":1,"message":"323","line":18,"column":5,"nodeType":"306","messageId":"307","endLine":18,"endColumn":18},{"ruleId":"304","severity":1,"message":"399","line":95,"column":14,"nodeType":"306","messageId":"307","endLine":95,"endColumn":24},{"ruleId":"304","severity":1,"message":"400","line":232,"column":14,"nodeType":"306","messageId":"307","endLine":232,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":375,"column":30,"nodeType":"357","messageId":"403","endLine":375,"endColumn":38},"no-native-reassign",["404"],"no-negated-in-lhs",["405"],"@typescript-eslint/no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'withRouter' is defined but never used.","'Avatar' is defined but never used.","'UserOutlined' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'message' is defined but never used.","'Space' is defined but never used.","'Text' is assigned a value but never used.","'userData' is defined but never used.","'companyData' is defined but never used.","'enterLoading' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'CloseOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'Paragraph' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'getUser' is defined but never used.","'deleteUser' is defined but never used.","'getCompanies' is defined but never used.","'deleteCompany' is defined but never used.","'AddEntity' is defined but never used.","'getArticle' is defined but never used.","'deleteArticle' is defined but never used.","'paths' is defined but never used.","'request' is assigned a value but never used.","'addCompany' is defined but never used.","'updateCompany' is defined but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'Cascader' is defined but never used.","'Select' is defined but never used.","'Switch' is defined but never used.","'spawn' is defined but never used.","'DataRowListEditable' is defined but never used.","'ConsoleLogger' is defined but never used.","'Search' is assigned a value but never used.","'Title' is assigned a value but never used.","'company' is defined but never used.","'article' is defined but never used.","'role' is defined but never used.","'task' is defined but never used.","'emploe' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'timingSafeEqual' is defined but never used.","'Skeleton' is defined but never used.","'Card' is defined but never used.","'Divider' is defined but never used.","'Popconfirm' is defined but never used.","'MultiplyPicker' is defined but never used.","'UpOutlined' is defined but never used.","'CheckOutlined' is defined but never used.","'EllipsisOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'RollbackOutlined' is defined but never used.","'addUser' is defined but never used.","'addArticle' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'DataRow' is defined but never used.","'DataRowEditable' is defined but never used.","'DataRowList' is defined but never used.","'Step' is assigned a value but never used.","'Meta' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Input' is defined but never used.","'Checkbox' is defined but never used.","'notification' is defined but never used.","'Table' is defined but never used.","'isThisTypeNode' is defined but never used.","'Grid' is defined but never used.","'Item' is defined but never used.","'Paragraph' is defined but never used.","'isDragging' is assigned a value but never used.","'isOver' is assigned a value but never used.","no-self-assign","'gridel.x' is assigned to itself.","selfAssignment","no-global-assign","no-unsafe-negation"]