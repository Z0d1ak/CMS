// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using web.Db;

namespace web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210127133810_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            UsersId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f")
                        });
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("web.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Name = "SuperAdminCompany"
                        });
                });

            modelBuilder.Entity("web.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            CompanyId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Name = "SuperAdmin",
                            Type = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            CompanyId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            PasswordHash = new byte[] { 137, 84, 230, 157, 109, 203, 136, 183, 17, 15, 95, 137, 52, 32, 118, 46, 146, 119, 214, 248, 149, 9, 5, 167, 64, 206, 24, 50, 135, 211, 2, 209, 193, 150, 126, 155, 207, 191, 156, 184, 148, 211, 57, 129, 169, 11, 40, 194, 214, 211, 193, 119, 96, 44, 133, 20, 201, 67, 31, 170, 11, 86, 165, 154 },
                            PasswordSalt = new byte[] { 229, 29, 114, 244, 81, 151, 182, 47, 232, 2, 193, 78, 193, 75, 8, 57, 65, 176, 65, 241, 104, 59, 110, 121, 64, 97, 220, 124, 48, 55, 92, 178, 83, 241, 101, 150, 0, 32, 223, 212, 229, 81, 95, 17, 26, 175, 137, 255, 191, 128, 54, 196, 249, 59, 77, 107, 119, 160, 230, 114, 219, 151, 191, 204, 123, 155, 73, 91, 219, 120, 67, 107, 249, 109, 160, 182, 36, 155, 39, 248, 128, 167, 77, 240, 123, 45, 247, 123, 170, 105, 209, 219, 5, 161, 64, 66, 24, 17, 51, 77, 233, 88, 1, 228, 134, 100, 52, 119, 15, 32, 67, 175, 204, 98, 36, 62, 87, 103, 196, 55, 159, 163, 60, 38, 243, 105, 182, 144 }
                        });
                });

            modelBuilder.Entity("web.Entities.WfTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("СompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PerformerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("web.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Articles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Initiator")
                        .WithMany("InitiatedArticles")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("web.Entities.Role", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("web.Entities.WfTask", b =>
                {
                    b.HasOne("web.Entities.Article", "Article")
                        .WithMany("Tasks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Author")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Tasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Performer")
                        .WithMany("PerfomingTasks")
                        .HasForeignKey("PerformerId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("Company");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("web.Entities.Company", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Roles");

                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.Navigation("CreatedTasks");

                    b.Navigation("InitiatedArticles");

                    b.Navigation("PerfomingTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
