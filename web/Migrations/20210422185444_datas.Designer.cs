// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using web.Db;

namespace web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210422185444_datas")]
    partial class datas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            UsersId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f")
                        });
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("web.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Name = "SuperAdminCompany"
                        });
                });

            modelBuilder.Entity("web.Entities.Data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("PayLoad")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("web.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            CompanyId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Name = "SuperAdmin",
                            Type = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            CompanyId = new Guid("face1e55-b0d5-1ab5-1e55-bef001ed100f"),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            PasswordHash = new byte[] { 17, 247, 248, 161, 212, 182, 52, 253, 153, 221, 60, 93, 61, 178, 226, 202, 134, 8, 90, 216, 239, 191, 184, 145, 153, 117, 236, 104, 59, 184, 85, 116, 225, 219, 234, 80, 28, 234, 59, 126, 96, 62, 11, 45, 127, 145, 90, 37, 215, 223, 50, 66, 57, 72, 228, 24, 114, 190, 45, 22, 116, 14, 143, 233 },
                            PasswordSalt = new byte[] { 32, 95, 161, 211, 249, 141, 239, 84, 209, 229, 198, 109, 17, 230, 109, 15, 225, 11, 247, 136, 184, 166, 9, 29, 65, 161, 43, 100, 74, 32, 124, 200, 62, 201, 144, 158, 42, 48, 165, 217, 5, 80, 113, 215, 57, 43, 213, 123, 7, 215, 42, 117, 138, 246, 42, 168, 203, 52, 146, 15, 104, 79, 22, 113, 155, 50, 55, 156, 158, 78, 202, 248, 69, 248, 202, 1, 252, 229, 243, 144, 55, 78, 109, 163, 215, 197, 143, 4, 234, 117, 215, 129, 234, 164, 158, 191, 164, 248, 7, 227, 134, 138, 40, 28, 210, 143, 207, 22, 69, 110, 246, 51, 65, 19, 136, 17, 135, 161, 157, 144, 170, 162, 70, 3, 161, 189, 205, 236 }
                        });
                });

            modelBuilder.Entity("web.Entities.WfTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("ParentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("СompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PerformerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("web.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Articles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Initiator")
                        .WithMany("InitiatedArticles")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("web.Entities.Role", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("web.Entities.WfTask", b =>
                {
                    b.HasOne("web.Entities.Article", "Article")
                        .WithMany("Tasks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Author")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.Company", "Company")
                        .WithMany("Tasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.Entities.User", "Performer")
                        .WithMany("PerfomingTasks")
                        .HasForeignKey("PerformerId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("Company");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("web.Entities.Article", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("web.Entities.Company", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Roles");

                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("web.Entities.User", b =>
                {
                    b.Navigation("CreatedTasks");

                    b.Navigation("InitiatedArticles");

                    b.Navigation("PerfomingTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
